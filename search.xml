<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>冯道，究竟是个什么样的人？</title>
      <link href="2023/07/08/%E5%86%AF%E9%81%93%EF%BC%8C%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%B8%AA%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BA%BA%EF%BC%9F/"/>
      <url>2023/07/08/%E5%86%AF%E9%81%93%EF%BC%8C%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%B8%AA%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BA%BA%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><strong>残唐五代，烽火狼烟。</strong></p><p>一个出生寒门的读书人，没有社会背景和人脉关系，从小小的侍郎做到宰相，历经四个朝代和十位皇帝。</p><p>天下动荡仿佛和他无关，不得罪人的同时捎带救人，退休之后自称为长乐老，逍遥到七十多岁寿终正寝。</p><p><strong>当世之士无贤愚，皆仰道为元老，而喜为之称誉。</strong></p><p>虽说金杯银杯不如口碑，但是口碑会随时代而变化，欧阳修骂他是不知廉耻，司马光评论他是奸臣之尤。</p><p>五代里的皇帝脱胎前朝，搅起血雨腥风被称为枭雄，在枭雄缝隙间存活的人，口碑却一步步地走向坍塌。</p><p>冯道，究竟是个什么样的人？</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708222252.png" alt="image-20230708222252550"></p><h4 id="882年，黄巢之乱第七年。"><a href="#882年，黄巢之乱第七年。" class="headerlink" title="882年，黄巢之乱第七年。"></a><strong>882年，黄巢之乱第七年。</strong></h4><p>河北的一个普通农户家，诞生一个普普通通的婴儿，他的未来注定不会普通，因为赶上了唐王朝的末世。</p><p>盛世和末世并不难区分，越爱折腾越容易四面漏风，老子这位高明的掌勺人，在千年之前已经写好菜谱。</p><blockquote><p>治大国，若烹小鲜。<br>以道莅天下，其鬼不神。<br>非其鬼不神，其神不伤人。<br>非其神不伤人，圣人亦不伤人。<br>夫两不相伤，故德交归焉。</p></blockquote><p>老冯作为唐王朝的基石，经常蹲在村口石头上闲聊，从庄稼收成到天下局势，聊出农忙生活的另类精彩。</p><p>一会说李克用进军关中，一会说朱温应该投降朝廷，一会又说黄巢挖掘乾陵，四十万人连墓门都找不到。</p><p>老冯离开村口的大石头，仿佛立刻回归到真实身份，听说今年粮种又涨价了，想去打个零工也没老板要。</p><p>本地暂时不受战火肆虐，并不能代表生活不受影响，很多条官道被炸断之后，错落有致的棋道逐渐瘫痪。</p><p>钱，好像越来越难赚了。</p><p><img src="C:\Users\18875\AppData\Roaming\Typora\typora-user-images\image-20230708222333820.png" alt="image-20230708222333820"></p><p><strong>其先为农为儒，不恆其业。</strong></p><p>老冯家没有固定的职业，在种地和教书之间徘徊着，做生意和当官这两件事，基本上和他们家没啥关系。</p><p>不直接跟钱或权打交道，很难积累出丰厚的关系网，这两样东西是千古不衰，永远吸引世俗间的注意力。</p><p>没有享受过多的注意力，反倒容易激活质朴的本性，天然本性经由自然触发，普通人逐渐会变得不普通。</p><blockquote><p>道少纯厚，好学善属文。<br>不耻恶衣食，负米奉亲之外，惟以披诵吟讽为事。<br>虽大雪拥户，凝尘满席，湛如也。</p></blockquote><p>冯道从小就很喜欢读书，吃穿用度方面没什么讲究，每天给父母亲做好饭菜，钻到破房子里面咬文嚼字。</p><p>桌面被他磨得溜光水滑，屋角落满灰尘也不去打扫，凝望着窗外面大雪纷飞，给双手哈点热气继续看书。</p><p>没病没灾花不了多少钱，紧着点用生活也能过得去，然而面对局势的大周期，开张倒闭的节点又降临了。</p><p>唐，好像越来越虚弱了。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708222402.png" alt="image-20230708222402339"></p><h4 id="907年，朱温灭唐建梁。"><a href="#907年，朱温灭唐建梁。" class="headerlink" title="907年，朱温灭唐建梁。"></a><strong>907年，朱温灭唐建梁。</strong></h4><p>十五岁的冯道满脸疑惑，不知道换牌以后有啥影响，请教村里年龄最大的人，发现老汉脸上也写满问号。</p><p>近三百年的旗帜倒掉了，好几代人没有经历过交接，但这并不影响开张倒闭，一切好像很自然的发生了。</p><p>朱温是大唐王朝的草民，敬翔是大唐考场的落榜生，联起手有点负负得正的意思（见秦岭一白.敬翔篇）。</p><blockquote><p>天行有常，不为尧存，不为桀亡。<br>应之以治则吉，应之以乱则凶。<br>强本而节用，则天不能贫。<br>养备而动时，则天不能病。<br>修道而不贰，则天不能祸。</p></blockquote><p>冯道在书本里找到答案，却不如亲身感受来得真切，旧框架倒了而新朝未立，他们这代人的前途在哪里？</p><p>有人选择继续在家种地，兵荒马乱被抢也无能为力，有人选择加入朱温阵营，有人选择对立面的李克用。</p><p>无数种选择撕裂了基石，各方像是在玩贪吃蛇游戏，一声令下之后前仆后继，只有一支队伍能活到最后。</p><p>冯道可以看懂诗书文集，因为这些是用笔墨书写的，但是他看不清天下大势，因为这些是用血火铸就的。</p><p>家，无论何时都是港湾。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708222420.png" alt="image-20230708222420174"></p><p>安贫乐道，不是让你乐贫。</p><p>冯老爹不是个普通农民，为农为儒有点像种地倒茬，不同庄稼侧重不同养分，老栽种一样容易损毁地力。</p><p>读书和种地其实差不多，在一个方向上钻研得太深，收获深度必然失其广度，还是套种更接近均衡发展。</p><p>发展的目的是为了释放，安贫乐道是一种释放结果，尽力之后对贫困的坦荡，乐贫却是啥都不干的懒惰。</p><p>各大阵营在招人，你也去试试吧！</p><h4 id="冯道选择去投奔刘守光"><a href="#冯道选择去投奔刘守光" class="headerlink" title="冯道选择去投奔刘守光"></a><strong>冯道选择去投奔刘守光</strong></h4><p>一封自荐信荣升低级参谋，一句话没说好又被下狱，前后加起来不到俩月时间。</p><p>乱世是用来打破框架的，出头容易同样倒台更容易，冯道躺在昏暗的牢房里，琢磨职场新人易犯的错误。</p><p>刘守光囚禁父亲揍哥哥，这种人怎么可能海纳百川，但是这种人又掌断生死，如何相处还真是门大学问。</p><p><strong>守光怒，置于狱中，寻为人所救免。</strong></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708222430.png" alt="image-20230708222430403"></p><h4 id="承业重其文章履行，甚见待遇。"><a href="#承业重其文章履行，甚见待遇。" class="headerlink" title="承业重其文章履行，甚见待遇。"></a><strong>承业重其文章履行，甚见待遇。</strong></h4><p>张承业曾是唐朝的太监，现在成为冯道的首位贵人，他是李克用的河东监军，受命辅佐战神儿子李存勖。</p><p>张承业要是想提拔冯道，连镀金这种流程都不需要，结果周围有人看着眼红，好坏和坏话涌进老张耳朵。</p><blockquote><p>周元豹者，善人论鉴，与道不洽。<br>谓承业曰：冯生无前程，公不可过用。<br>卢质曰：我曾见杜黄裳司空写真图，道之状貌酷类焉，将来必副大用，元豹之言不足信也。</p></blockquote><p>面相是门很玄妙的学问，归根结底取决于自身心性，经过上一次的牢狱之灾，冯道装作没听到风言风语。</p><p>他每天按时去打卡上班，李存勖和朱温在黄河对峙，大量文书堆在办公桌上，冯道忙得都没有时间喝水。</p><p>在敬业的工作态度面前，背后的玄妙言论逐渐消散，冯道悄无声息化解灾祸，或许和他的名字也有关联。</p><p><strong>道者，人之所蹈，使万物不知其所由。</strong></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708222445.png" alt="image-20230708222445223"></p><p>李存勖在打仗，郭崇韬要裁军。</p><p>老郭的意思是连年大战，军队里面捞油水的人太多，为了每一分钱花到实处，让那些吃空饷的赶紧滚蛋。</p><p>李存勖听到后直接怒了，老子带着人抛头颅洒热血，属下多吃三五口怎么了，看不惯你就来当这个主帅。</p><p>李存勖命令冯道做笔录，要将口述内容在军营公布，板着脸催促动作麻利点，却听到冯秘书的温声劝诫。</p><blockquote><p>道所掌笔砚，敢不供职。<br>崇韬所谏，未至过当，阻拒之则可，不可以向来之言。<br>喧动群议，敌人若知，谓大王君臣之不和矣。<br>幸熟而思之，则天下幸甚也。</p></blockquote><p>郭崇韬的建议不合时宜，李存勖当耳边风就可以了，你俩撸起袖子当众干架，河对岸的敌军还不乐疯了。</p><p>碉堡往往是从内部瓦解，冯道思虑后选择堵住裂缝，然而面对着暴怒的战神，不是谁都敢在气头上灭火。</p><p>李存勖的血压降下来了，郭崇韬回过神跑来感谢，冯道的名声也显露了（<strong>因道为之解焉，人始重其胆量</strong>）。</p><p>早前乱发言被关进牢房，上次没有发言却化险为夷，这次乱发言又换来赞誉，这里面有没有什么规律呢？</p><p>招式是死的，出招的人是活的。</p><h4 id="923年，后唐灭后梁。"><a href="#923年，后唐灭后梁。" class="headerlink" title="923年，后唐灭后梁。"></a><strong>923年，后唐灭后梁。</strong></h4><p>刘守光称帝失败被杀了，张承业心怀大唐郁郁而终，李存勖开创一个新时代，郭崇韬更是立下汗马功劳。</p><p>冯道被任命为户部侍郎，穿着光鲜的紫服挺立朝堂，只有短短二十多年光景，他却经历了两次改朝换代。</p><p><strong>凭君莫话封侯事，一将功成万骨枯。</strong></p><p>冯老爹还算是比较幸运，死在自家炕上而不是野外，临终前望着显贵的儿子，忧虑的眼神中有一丝欣慰。</p><p>在皇帝严重贬值的乱世，位置越高代表着风险越大，世事无常的岁月变化中，永恒不变的依仗还是品性。</p><p>冯道的守孝生活很清俭，遇到灾荒还捐出全部工资，他住在简陋的茅草房里，拒收本地官员送来的礼品。</p><p>契丹听说还有这号人物，派出特工队想抓回去研究，多亏边防军不是吃素的，这才没让草原匪徒们得逞。</p><blockquote><p>丁父忧，持服于景城。<br>遇岁俭，所得俸余悉赈于乡里，道之所居惟蓬茨而已。<br>凡牧宰馈遗，斗粟匹帛无所受焉。<br>时契丹方盛，素闻道名，欲掠而取之，会边人有备，获免。</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708222515.png" alt="image-20230708222515113"></p><p>丧假没有结束，李存勖死了。</p><p>后唐开国皇帝正值壮年，没有倒在对外开拓的战场，却被内部叛军乱箭射死，遗体在城门口被仓促焚烧。</p><p>亲眼目睹政变的两个人，一个是走向皇位的李嗣源，一个是唉声叹息的赵弘殷，他生了个儿子叫赵匡胤。</p><p><strong>先帝时冯道郎中何在？</strong></p><h4 id="李嗣源继任为后唐明宗"><a href="#李嗣源继任为后唐明宗" class="headerlink" title="李嗣源继任为后唐明宗"></a>李嗣源继任为后唐明宗</h4><p>直接喊冯道快回来当宰相，作为冯道的第二个贵人，唐明宗相信自己的眼力见。</p><p>冯道没琢磨皇帝的面相，揣测这条大腿还能活几年，也没有去维护同事关系，完全按照职责该干啥干啥。</p><p>他推荐有真才实学的人，仗着前朝资历骗吃骗喝的，发篇文章都要去抄袭的，冯道非但不提升还要打压。</p><blockquote><p>孤寒士子，抱才业、素知识者皆与引用。<br>唐末衣冠，履行浮躁者必抑而镇之。</p></blockquote><p>出招的人是活的，所以才要讲规则。</p><p><strong>有人靠本事，有人混圈子。</strong></p><p>这是寒门和豪门的区别，然而这两大阵营时刻流动，宰相乃至皇帝也破不掉，想要稳固只能努力去平衡。</p><p>冯道提携大量孤寒士子，自然而然招致对面的不满，一个工部侍郎都敢调侃，说宰相选人要背《兔园策》。</p><p>冯道让人请侍郎来谈话，说这本启蒙读物出自名儒，大道至简永远不会过时，只注重辞藻华丽何其浅薄。</p><blockquote><p>《兔园策》皆名儒所集，道能讽之。<br>中朝士子止看文场秀句，便为举业。<br>皆窃取公聊，何浅狭之甚耶！</p></blockquote><p>前任宰相收到前线捷报，不经调研就写出歌颂奏章，冯道看个开头就笑喷了：<strong>昨来收复定州，非真定也。</strong></p><p>最基本的地名都搞错了，歌功颂德变成了贻笑大方，看不惯各种洗地的操作，冯道接手文书的编写工作。</p><p>一个个字体从笔尖流出，贯穿起来激荡出文理双绝，所谓文章乃是胸中之气，以文观人更换来满朝敬服。</p><blockquote><p>其文浑然，非流俗之体，举朝服焉。<br>尤长于篇咏，秉笔则成，典丽之外。<br>义含古道，必为远近传写。<br>故渐畏其高深，由是班行肃然，无浇漓之态。</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708222542.png" alt="image-20230708222541870"></p><p><strong>弘文馆大学士，尚书左仆射，始平郡公。</strong></p><p>冯宰相的头衔越来越多，然而生活条件却一成不变，或许是自幼养成的习惯，钟情诗书超过了吃穿用度。</p><p>他和仆人吃着同一锅饭，睡觉也不讲究床垫要多软，走进田间地头更不合影，皇帝称他是真正的士大夫。</p><blockquote><p>冯道性纯俭，顷在德胜寨居一茅庵。<br>与从人同器食，卧则刍藁一束，其心晏如也。<br>及以父忧退归乡里，自耕樵采。<br>与农夫杂处，略不以素贵介怀，真士大夫也。</p></blockquote><p>有一年的粮食大丰收，后唐明宗的心情非常舒畅，朝着躬身站立的冯道，问道：<strong>天下虽熟，百姓得济否？</strong></p><p>风调雨顺乃是国之吉兆，冯道却没顺着皇帝的话说，一番回答不禁显得败兴，更让文武百官们面面相觑。</p><p>无论是揣摩准了李嗣源，亦或是真心为百姓们发声，敢在皇帝面前说这些话，这在历史情境中并不多见。</p><blockquote><p>道曰：谷贵饿农，谷贱伤农，此常理也。<br>有《伤田家诗》云：<br>二月卖新丝，五月粜秋谷。<br>医得眼下疮，剜却心头肉。<br>我愿君王心，化作光明烛。<br>不照绮罗筵，遍照逃亡屋。</p></blockquote><p>唐明宗的眼神凝重，口中默默念叨着：<strong>此诗甚好…</strong></p><p><strong>道之发言简正，善于裨益，非常人所能及也。</strong></p><p>常年战乱断绝基础教育，经济缺口造成全民忙挣钱，逐渐导致传统文化缺失，慢慢地连古籍都看不懂了。</p><p>碎片化的曲解层出不穷，糟粕的崛起势头超过精华，冯道召集人手正本清源，将九经释义刻板流传天下。</p><p><strong>雕为印版，流布天下，后进赖之。</strong></p><h4 id="李嗣源死亡，李从珂继位"><a href="#李嗣源死亡，李从珂继位" class="headerlink" title="李嗣源死亡，李从珂继位"></a>李嗣源死亡，李从珂继位</h4><p>民生和文化方面的业绩，很大程度仰仗皇帝的开明，然而唐明宗没教好儿子，坑爹坑出国破家亡的高度。</p><p>李家的二皇子造反被杀，年事已高的李嗣源气死了，儿子们开启大乱斗模式，最后还是养子李从珂胜出。</p><p>后唐末帝办完登基手续，紧接着宣布新的人事部署，安排冯道去给先帝修陵寝，修完墓调任同州节度使。</p><p>京城和地方的规则不同，当过宰相的冯道被欺负了，有位军爷在门口跳脚骂，冯道却笑着请他进来喝酒。</p><p>喝过酒骂人就不难看了，冯道给双方都找了个台阶，家仆们看不懂是啥意思，冯道依然淡淡的笑着说道。</p><p><strong>此人为不善，自当有报，吾何怒焉。</strong></p><h4 id="936年，后晋灭后唐。"><a href="#936年，后晋灭后唐。" class="headerlink" title="936年，后晋灭后唐。"></a>936年，后晋灭后唐。</h4><p>石敬瑭本是后唐的功臣，同舟共济演变成刀剑相向，君臣之间为何屡屡反目，因为他们从配合变成猜忌。</p><p>晋高祖向契丹借高利贷，靠着场外求助灭掉了后唐，幽云十六州只能算本金，利息一直到死都没有还完。</p><p><strong>及晋祖入洛，以道为首相。</strong></p><p>石敬瑭是冯道的老同事，同时是耶律德光的干儿子，契丹给关系证明盖好章，通知后晋麻溜派人来领取。</p><p>这个重任落在冯道肩上，无论声望资历无出其右者，然而从契丹出差回来后，冯宰相仿佛像是变了个人。</p><p>或许看到契丹兵强马壮，诗书教化仿佛显得很微弱，或许念及自己年过五旬，以后的日子到底该怎么活。</p><p>甲乙双方的会谈不平等，更何况冯道是干儿子一方，回来不久提交辞职报告，但是石敬瑭坚决不予批准。</p><p><strong>道尝上表求退，晋祖不之览，谓曰：卿来日不出，朕当亲行请卿。</strong></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708222617.png" alt="image-20230708222617102"></p><p><strong>道不得已出焉，当时宠遇，无与为比。</strong></p><p>孤独的石敬瑭需要陪伴，内有刘知远逐渐不听调遣，外有契丹干爹常年摆谱，谁都知道他比干爹大十岁。</p><p>亲生儿子倒是生了不少，却一个一个死在自己前面，很多人在背后戳脊梁骨，但是他相信冯道应该不会。</p><p><strong>臣本自书生，为陛下在中书，守历代成规，不敢有一毫之失也。</strong></p><p>晋少帝石重贵继位之后，加封冯道为太尉兼燕国公，数数自己侍奉过的皇帝，冯道都不好意思去上朝了。</p><p>他询问上朝开会的朋友，大家如何评价职场不倒翁，得到毁誉参半的答案后，冯道的脸上逐渐露出笑容。</p><p>当年孔圣人都有人诋毁，何况一个空虚浅薄的冯道，原以为十个人里九个骂，五五开已经远远超出预期。</p><blockquote><p>凡人同者为是，不同为非，而非道者，十恐有九。<br>昔仲尼圣人也，犹为叔孙武叔所毁，况道之虚薄者乎。<br>然道之所持，始终不易。</p></blockquote><p>冯道在努力坚持做自己，然而一介文人与局势不和，石重贵准备要站起来了，握紧拳头承接契丹的怒火。</p><p>有人说冯道是和平宰相，危急关头扛不起血火重压，晋少帝没给他机会证明，再次调去担任同州节度使。</p><p>规则是强者定的，强者却是相对的。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708222630.png" alt="image-20230708222630839"></p><h4 id="947年，契丹灭晋。"><a href="#947年，契丹灭晋。" class="headerlink" title="947年，契丹灭晋。"></a><strong>947年，契丹灭晋。</strong></h4><p>石重贵一家子沦为俘虏，冯道接到诏书前往沦陷区，面对着耶律德光的问话，他的期望转移到契丹身上。</p><p>打草谷的策略血泪交加，灭晋之后放眼望去皆草场，冯道开口所称颂的皇帝，不是石重贵而是耶律德光。</p><blockquote><p>问曰：天下百姓，如何可救？<br>道曰：此时百姓，佛再出救不得，惟皇帝救得。<br>其后衣冠不至伤夷，皆道与赵延寿阴护之所至也。</p></blockquote><p>皇帝和张三李四的称谓，或许不应该具有高下之分，虚名背后庇护多少众生，才是换回多少尊重的砝码。</p><p>后晋俘虏团被押往北方，耶律德光暴死被做成腊肉，辽国大佬忙着争夺权力，浑然顾不上冯道这帮子人。</p><p>将士趁机反抗攻占常山，六十五岁的冯道出面安抚，在返回老家中原的路上，大家一致认定冯道是首功。</p><p>冯道一边挑选执勤将帅，一边又给军民安排事项，听到首功二字摆手说道：<strong>儒臣何能为，皆诸将之力也。</strong></p><p><strong>道以德重，军民由是帖然，道首有力焉。</strong></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708222646.png" alt="image-20230708222646690"></p><h4 id="后晋没了，刘知远创建后汉。"><a href="#后晋没了，刘知远创建后汉。" class="headerlink" title="后晋没了，刘知远创建后汉。"></a><strong>后晋没了，刘知远创建后汉。</strong></h4><p>活得久至少有一个好处，不管走到哪里都有老熟人，后汉高祖拜冯道为太师，三朝元老更像是个吉祥物。</p><p>刘知远坐观石重贵被俘，连忙宣布自己成立了后汉，让德高望重的冯道坐台，有助于增加正统的印象分。</p><p>一切在有条不紊的开展，刘知远最器重的儿子没了，他本人伤心过度也死了，机关算尽最终玩了个寂寞。</p><p>后汉隐帝登基时，年迈的冯道心神恍惚。</p><p>这幅场景每隔几年上演，他连仪式流程都快背熟了，偶尔出神后赶紧看工牌，免得高喊誓词时弄错称谓。</p><p>国号和皇帝像是闹着玩，荒唐的时代里面怎么认真，冯道心底装着太多记忆，越来越觉得他们长一个样。</p><p>担心喊错国名被砍脑袋，冯道申请调任到闲散职位，他给自己取名为长乐老，回顾起大半生的传奇经历。</p><p><strong>道奉朝请外，平居自适，著《长乐老自叙》。</strong></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230709183234.png" alt="image-20230709183234297"></p><h4 id="951年，后周灭后汉。"><a href="#951年，后周灭后汉。" class="headerlink" title="951年，后周灭后汉。"></a>951年，后周灭后汉。</h4><p>郭威澶州兵变黄袍加身，两个年轻人从头到尾参与，一个是老郭的养子柴荣，一个是柴荣的哥们赵匡胤。</p><p>冯道已经活成一种象征，某种意义上比皇帝有分量，满朝文武哪个没跳过槽，唯独冯太师历经四朝九帝。</p><p>隔十几年来场开张倒闭，大家的脸上写满司空见惯，后周太祖好像也腻味了，在冯道面前没有一点架子。</p><p><strong>太祖甚重之，每进对不以名呼。</strong></p><p>郭威是后周的开国皇帝，然而所有亲人被满门抄斩，生命之中什么最为宝贵，或许他和冯道有相同答案。</p><p>周太祖孤独地站在顶峰，江山如画只能遗留给养子，凝望着儿孙绕膝的冯道，就算羡慕也没有选择机会。</p><p>强者看似是在制定规则，弱者幻想强者能遵守规则，只有天道在静静俯视着，双方践踏规则就推到重来。</p><p>底层的个体被肆意裹挟，高层群体搞不好连根拔起，贪吃蛇大战后百废待兴，另一场模拟实验又开始了。</p><p>四朝了，到底还要试验多久？</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708222700.png" alt="image-20230708222659997"></p><p><strong>河东流寇作乱，周世宗御驾亲征。</strong></p><p>三十岁的柴荣血气方刚，七十二岁的冯道颤颤巍巍，前者常年在战场上驰骋，后者见惯城头变幻大王旗。</p><p>冯道阻拦皇帝御驾亲征，周世宗耐着性子想说服他，列举唐太宗的成功案例，结果遭到四朝元老的嘲讽。</p><blockquote><p>世宗：唐初，天下草寇蜂起，并是太宗亲平之。<br>道奏曰：陛下得如太宗否？<br>世宗怒曰：冯道何相少也！</p></blockquote><p>柴荣有种被轻视的感觉，一票通过必须要御驾亲征，冯道被赶去给先帝修坟，还是那个无比熟悉的岗位。</p><p>站在长宽百米的皇陵前，似曾相识的感觉又回来了，精气神伴随着体力衰退，冯道记不清这是第几个坟。</p><p>他好像被困在时间段里，重复体验一场场开张倒闭，尽管肉身跳出乱世血火，心神却在相似情境里轮回。</p><p><strong>及山陵礼毕，薨于其第，享年七十有三。</strong></p><p><strong>世宗闻之，辍视朝三日，追封瀛王，谥曰文懿。</strong></p><blockquote><p> 冯道有诗云：</p><p>莫为危时便怆神，前程往往有期因。</p><p>终闻海岳归明主，未省乾坤陷吉人。</p><p>道德几时曾去世，舟车何处不通津。</p><p>但教方寸无诸恶，狼虎丛中也立身。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 历史 </category>
          
          <category> 五代十国 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="2023/07/08/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2023/07/08/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a><strong>git cherry-pick</strong></h3><p>cherry-pick可以理解为”挑拣”提交，它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。 当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而是只想将某一次提交合入到本地当前分支上，那么就要使用git cherry-pick了。</p><p>cherry-pick 命令可以在一个分支上选择性地应用另一个分支或提交中的一个或多个提交。这对于合并单独的 bug 修复或其他小型改动非常有用。</p><p><strong>使用方法</strong></p><p>对于 commit-id 的操作，都只需要使用前五位就可以了。</p><ul><li><p>合并单个提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;commit-id&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#不自动提交，只更新工作区和暂存区，不产生新的提交。(其他options见下文)</span></span></span><br><span class="line">git cherry-pick -n &lt;commit_id&gt;</span><br></pre></td></tr></table></figure><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708195810.png" alt="image-20230708195810800"></p></li><li><p>合并多个提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> commitid之间空格分开</span></span><br><span class="line">git cherry-pick commit_id1 commit_id2 commit_id3</span><br></pre></td></tr></table></figure></li><li><p>合并连续多个提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry_pick &lt;start-commit-ids&gt;..&lt;end-commit-id&gt;</span><br></pre></td></tr></table></figure><p>可以看到，它的范围就是 start-commit-id 到 end-commit-id 之间所有的 commit，但是它这是一个 (左开，右闭] 的区间，也就是说，它将不会包含 start-commit-id 的 commit。</p><p>而如果想要包含 start-commit-id 的话，就需要使用 ^ 标记一下，就会变成一个 [左闭，右闭] 的区间，具体命令如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;start-commit-id&gt;^..&lt;end-commit-id&gt;</span><br></pre></td></tr></table></figure><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708184330.png" alt="image-20230708184329974"></p><p>无论是对单个 commit 进行 cherry-pick ，还是<a href="https://so.csdn.net/so/search?q=%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86&spm=1001.2101.3001.7020">批量处理</a>，注意一定要根据时间线，依照 commit 的先后顺序来处理，否者会有意想不到的问题。</p></li></ul><p><strong>常用options</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick [&lt;options&gt;] &lt;commit-ish&gt;...</span><br><span class="line"></span><br><span class="line">--quit 退出当前的chery-pick序列</span><br><span class="line">--continue 继续当前的chery-pick序列</span><br><span class="line">--abort 取消当前的chery-pick序列，恢复当前分支</span><br><span class="line">-n, --no-commit 不自动提交</span><br><span class="line">-e, --edit 编辑提交信息</span><br><span class="line">-x, 在原来的提交信息下，增加一行额外说明信息（cherry picked from commit …），用来说明该次commit是从哪里cherry-pick的。</span><br><span class="line">如果是从自己的私人分支之间做这个操作，就不要使用这个，这样的信息是无用的。</span><br><span class="line">如果是cherry-pick别的同事的提交，可以使用这个参数，这个额外信息将非常有用。</span><br></pre></td></tr></table></figure><p><strong>Idea操作</strong></p><ul><li><p>切换到合并的目标分支</p></li><li><p>在git log面板显示中，找到要合并到的commit信息 右键点击 Cherry-Pick</p></li></ul><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708181848.png" alt="image-20230708181848067"></p><ul><li><p>查看本地的目标分支的log记录，这个时候可以看到想要合并的某一个commit记录已经存在了</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708182317.png" alt="image-20230708182317751"></p></li><li><p>git push 即可</p></li></ul><h3 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a><strong>git config</strong></h3><p>该命令将分别设置提交代码的用户名和电子邮件地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config –global user.name “name”</span><br><span class="line">git config –global user.email “email”</span><br></pre></td></tr></table></figure><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><strong>git reset</strong></h3><p><strong>使用方法</strong></p><p>git reset 命令用于回退版本，可以指定退回某一次提交的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure><ul><li><strong>–mixed为默认的，可以不用带该参数</strong><br>恢复成未add的状态</li><li><strong>–soft用于回退到某个版本</strong><br>已经add了，未commit</li><li><strong>–hard 参数撤销工作区中所有未提交的修改内容，</strong><br>直接把回滚的内容在本地仓库中抹去</li></ul><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708191322.png" alt="image-20230708191322284"></p><p><strong>Idea操作</strong></p><ul><li>选择要回滚到哪个commit 右键点击 reset current（注意：被选中的版本号不会被回滚）</li></ul><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708190217.png" alt="image-20230708190217857"></p><ul><li>选择对应的回滚模式</li></ul><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708190620.png" alt="image-20230708190620579"></p><ul><li><p>git push -f    强制提交一下</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708190833.png" alt="image-20230708190833096"></p><p><strong>显示全部历史提交</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p><strong>误删恢复</strong></p><p>如果回滚代码之后发现复制错了 commit_id，或者误删了某次 commit 记录，也可以通过下方代码恢复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commit—id</span><br></pre></td></tr></table></figure></li></ul><h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a><strong>git revert</strong></h3><p><strong>解释</strong></p><blockquote><p>git revert是用于“反做”某一个版本，以达到撤销该版本的修改的目的。比如，我们commit了三个版本（版本一、版本二、 版本三），突然发现版本二不行（如：有bug），想要撤销版本二，但又不想影响撤销版本三的提交，就可以用 git revert 命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西。如下图所示：</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708193340.png" alt="image-20230708193340015"></p><p><strong>使用方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># revert一个commit</span><br><span class="line">git revert -n commit-id</span><br><span class="line"># revert多个commit (注意这是一个前开后闭区间)</span><br><span class="line">git revert -n f7742cd..551c408</span><br></pre></td></tr></table></figure><p><strong>适用场景：</strong> 如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。</p><p><strong>Idea操作</strong></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708193504.png" alt="image-20230708193504686"></p><p><strong>git reset 和 git revert 的区别</strong></p><p><code>git revert</code> 后多出一条 commit ，提醒同事，这里有回撤操作。</p><p>git reset直接版之前 commit 删掉，非 <code>git reset --hard</code> 的操作是不会删掉修改代码，如果远程已经有之前代码，需要强推 <code>git push -f</code></p><h3 id="查看一个文件的历史提交记录"><a href="#查看一个文件的历史提交记录" class="headerlink" title="查看一个文件的历史提交记录"></a>查看一个文件的历史提交记录</h3><p>点击文件 –&gt; Git –&gt; show History</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708194055.png" alt="image-20230708194055719"></p><h3 id="合并多个commit"><a href="#合并多个commit" class="headerlink" title="合并多个commit"></a>合并多个commit</h3><ul><li>先选中最早的那条记录，右击选择Interactivity Rebase from Here…</li></ul><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708194459.png" alt="image-20230708194459543"></p><ul><li>把除了第一条记录的Action改成squash，点击Start Rebasing</li></ul><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708194731.png" alt="image-20230708194730989"></p><blockquote><p>pick：保留该commit（缩写:p）<br>reword：保留该commit，但我需要修改该commit的注释（缩写:r）<br>edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）<br>squash：将该commit和前一个commit合并（缩写:s）<br>fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）<br>exec：执行shell命令（缩写:x）<br>drop：我要丢弃该commit（缩写:d）</p></blockquote><ul><li>修改提交的日志，点击Continue Rebasing</li><li>git push -f 强制提交一下</li></ul><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708194841.png" alt="image-20230708194841176"></p><h3 id="git使用http形式免密执行命令"><a href="#git使用http形式免密执行命令" class="headerlink" title="git使用http形式免密执行命令"></a>git使用http形式免密执行命令</h3><p>首次输入密码之后执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20230708180647.png" alt="image-20230708180647435"></p><h3 id="本地分支跟远程分支不关联问题"><a href="#本地分支跟远程分支不关联问题" class="headerlink" title="本地分支跟远程分支不关联问题"></a>本地分支跟远程分支不关联问题</h3><blockquote><p>报错信息：atal: refusing to merge unrelated histories</p></blockquote><p>本地创建了一个仓库，把本地仓库和Gitee上关联以后发现git pull/git push，git feach提醒fatal: refusing to merge unrelated histories</p><p>原因是两个分支是两个不同的版本，具有不同的提交历史</p><p>拉取远程代码的时候执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p>可以允许不相关历史提交，强制合并</p><h3 id="git切换ssh和http协议"><a href="#git切换ssh和http协议" class="headerlink" title="git切换ssh和http协议"></a>git切换ssh和http协议</h3><ul><li>查看当前remote</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><ul><li>切换到http：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url https://github.com/username/repository.git</span><br></pre></td></tr></table></figure><ul><li>切换到ssh：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url [git@github.com](mailto:git@github.com):username/repository.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2023/07/02/todo/%E8%AE%A1%E5%88%92/"/>
      <url>2023/07/02/todo/%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ul><li>kafka</li><li>Hbase</li><li>大数据分析</li><li>流式计算</li><li>golang</li><li>历史人物</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>未命名</title>
      <link href="2021/07/01/%E6%9C%AA%E5%91%BD%E5%90%8D/"/>
      <url>2021/07/01/%E6%9C%AA%E5%91%BD%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<ul><li>我们总是设想，假如生活能够重来一遍，人生就会打开新的篇章，其实每个现在都是一个新的开始。与其对过去望眼欲穿，还不如从现在开始，对未来充满希望。人不能一直活在过去，而毫无顾忌的抛弃现在和未来。或许你现在正在经历前所未有的艰难，或许在悬崖边上摇摇欲坠，或许在低谷里咬牙坚持，或许在海浪中逆风漂流，因此才会渴望乘上一台时光机，打开一扇任意门。但是 重来一次，你还是会后悔。人生就是取经的过程，苦难无处不在，像野花一样长在你的必经路旁。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 鸡汤语录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MyCat(一)---简介</title>
      <link href="2021/06/28/MyCat(%E4%B8%80)---%E7%AE%80%E4%BB%8B/"/>
      <url>2021/06/28/MyCat(%E4%B8%80)---%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-MyCat引入"><a href="#1-MyCat引入" class="headerlink" title="1. MyCat引入"></a>1. MyCat引入</h3><p>如今随着互联网的发展，数据的量级也是成指数式的增长，从GB到TB到PB。对数据的各种操作也是愈加的困难，传统的关系型数据库已经无法满足快速查询与插入数据的需求，这个时候NoSQL的出现暂时解决了这一危机，它通过降低数据的安全性，减少对事务的支持，减少对复杂查询的支持，来获取性能上的提升，但是，在有一些场合NOSQL是无法满足使用场景的，就比如有些场景是绝对要有事务和安全指标的，这个时候NoSQL肯定是无法满足的，所以还是需要使用关系型数据库，如何使用关系型数据库存储海量的数据，此时就需要做数据库集群，为了提高查询性能讲一个数据库分散到不同的数据库中存储，为应对此问题就出现了MyCat</p><p>MyCat的目标就是：低成本的将现有的单机数据库和应用平滑的迁移到云端，解决海量数据存储和业务规模迅速增长情况下数据存储和访问的瓶颈问题。</p><h3 id="2-MyCat历史"><a href="#2-MyCat历史" class="headerlink" title="2. MyCat历史"></a>2. MyCat历史</h3><p>1). Mycat 背后是阿里曾经开源的知名产品——Cobar。Cobar 的核心功能和优势是 MySQL 数据库分片，此产品曾经广为流传，据说最早的发起者对 Mysql 很精通，后来从阿里跳槽了，阿里随后开源的 Cobar，并维持到 2013 年年初，然后，就没有然后了。 Cobar 的思路和实现路径的确不错。基于 Java 开发的，实现了 MySQL 公开的二进制传输协议，巧妙地将自己伪装成一个 MySQL Server，目前市面上绝大多数 MySQL 客户端工具和应用都能兼容。比自己实现一个新的数据库协议要明智的多，因为生态环境在哪里摆着。 </p><p>2). Mycat 是基于 cobar 演变而来，相对于cobar来说 , 有两个显著优势 : ①. 对 cobar 的代码进行了彻底的重构，Mycat在I/O方面进行了重大改进,将原来的BIO改成了NIO, 并发量有大幅提高 ;  ②. 增加了对Order By、Group By、limit等聚合功能的支持，同时兼容绝大多数数据库成为通用的数据库中间件 。</p><p>3). 简单的说，MyCAT就是：一个新颖的数据库中间件产品支持mysql集群，或者 mariadb cluster，提供高可用性数据分片集群。你可以像使用mysql一样使用 mycat 。对于开发人员来说根本感觉不到mycat的存在。、</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628092539.png" alt="1571824365101"></p><h3 id="3-MyCat的优势"><a href="#3-MyCat的优势" class="headerlink" title="3. MyCat的优势"></a>3. MyCat的优势</h3><p>MyCat 是一个彻底开源的，面向企业应用数据库中间件 , 支持事务， 可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群, 在MyCat 中融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server , 并结合传统数据库和新型分布式数据仓库的新一代企业级数据库中间件产品 。</p><p>并具有优势: </p><p><strong>1). 性能可靠稳定</strong></p><p>基于阿里开源的Cobar产品而研发，Cobar的稳定性、可靠性、优秀的架构和性能以及众多成熟的使用案例使得MYCAT一开始就拥有一个很好的起点，站在巨人的肩膀上，我们能看到更远。业界优秀的开源项目和创新思路被广泛融入到MYCAT的基因中，使得MYCAT在很多方面都领先于目前其他一些同类的开源项目，甚至超越某些商业产品。</p><p><strong>2). 强大的技术团队</strong></p><p>MyCat 现在由一支强大的技术团队维护 , 吸引和聚集了一大批业内大数据和云计算方面的资深工程师、架构师、DBA，优秀的团队保障了MyCat的稳定高效运行。而且MyCat不依托于任何商业公司，而且得到大批开源爱好者的支持。</p><p><strong>3). 体系完善</strong></p><p>MyCat已经形成了一系列的周边产品,比较有名的是 Mycat-web、Mycat-NIO、Mycat-Balance等,已经形成了一个比较完整的解决方案,而不仅仅是一个中间件。</p><p><strong>4). 社区活跃</strong></p><p>与MyCat数据库中间件类似的产品还有 TDDL、Amoeba、Cobar 。</p><p>①. TDDL（Taobao Distributed Data Layer）不同于其它几款产品，并非独立的中间件，只能算作中间层，是以Jar包方式提供给应用调用 ，属于JDBC Shard的思想 。</p><p>②. Amoeba是作为一个真正的独立中间件提供服务,应用去连接Amoeba操作MySQL集群，就像操作单个MySQL一样。Amoeba算中间件中的早期产品,后端还在使用JDBC Driver。</p><p>③. Cobar是在Amoeba基础上进化的版本，一个显著变化是把后端JDBC Driver改为原生的MySQL通信协议层。</p><p>④. MyCat又是在Cobar基础上发展的版本, 性能优良, 功能强大, 社区活跃 。</p><h3 id="4-MyCat-使用场合"><a href="#4-MyCat-使用场合" class="headerlink" title="4. MyCat 使用场合"></a>4. MyCat 使用场合</h3><p>要想用好MyCat，就需要了解其适用场景，以下几个场景适合适用MyCat。</p><p><strong>1). 高可用性与MySQL读写分离</strong></p><p>高可用：利用MyCat可以轻松实现热备份，当一台服务器停机时，可以由集群中的另一台服务器自动接管业务，无需人工干预，从而保证高可用。</p><p>读写分离：通过MySQL数据库的binlog日志完成主从复制，并可以通过MyCat轻松实现读写分离，实现insert、update、delete走主库，而在select时走从库，从而缓解单台服务器的访问压力。</p><p><strong>2). 业务数据分级存储保障</strong></p><p>企业的数据量总是无休止的增长，这些数据的格式不一样，访问效率不一样，重要性也不一样。可以针对不同级别的数据，采用不同的存储设备，通过分级存储管理软件实现数据客体在存储设备之间自动迁移及自动访问切换。</p><p><strong>3). 大表水平拆分，集群并行计算</strong></p><p>数据切分是MyCat的核心功能，是指通过某种特定的条件，将存放在同一个数据库的数据，分散存储在多个数据库中，以达到分散单台设备负载的效果。当数据库量超过800万行且需要做分片时，就可以考虑使用MyCat实现数据切分。</p><p><strong>4). 数据库路由器</strong></p><p>MyCat基于MySQL实例的连接池复用机制，可以让每个应用最大程度共享一个MySQL实例的所有连接池，让数据库的并发访问能力大大提升。</p><p><strong>5). 整合多种数据源</strong></p><p>当一个项目中使用了多个数据库（Oracle，MySQL，SQL Server,PostgreSQL），并配置了多个数据源，操作起来就比较烦锁，这时就可以使用MyCat进行整合，最终我们的应用程序只需要访问一个数据源即可。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> MyCat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyCat </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyCat(二)---入门</title>
      <link href="2021/06/27/MyCat(%E4%BA%8C)---%E5%85%A5%E9%97%A8/"/>
      <url>2021/06/27/MyCat(%E4%BA%8C)---%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><p>MyCat是采用Java语言开发的开源数据库中间件，支持win和linux运行环境，下面介绍MyCat的linux的环境搭建</p><ul><li>MySQL</li><li>JDK</li><li>MyCat</li></ul><h4 id="1-1-安装配置MySQL"><a href="#1-1-安装配置MySQL" class="headerlink" title="1.1 安装配置MySQL"></a>1.1 安装配置MySQL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">A). 卸载 centos 中预安装的 mysql</span><br><span class="line"></span><br><span class="line">rpm -qa | grep -i mysql</span><br><span class="line"></span><br><span class="line">rpm -e mysql-libs-5.1.71-1.el6.x86_64 --nodeps</span><br><span class="line"></span><br><span class="line">B). 上传 mysql 的安装包</span><br><span class="line"></span><br><span class="line">alt + p -------&gt; put  E:/test/MySQL-5.6.22-1.el6.i686.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line">C). 解压 mysql 的安装包 </span><br><span class="line"></span><br><span class="line">mkdir mysql</span><br><span class="line"></span><br><span class="line">tar -xvf MySQL-5.6.22-1.el6.i686.rpm-bundle.tar -C /root/mysql</span><br><span class="line"></span><br><span class="line">D). 安装依赖包 </span><br><span class="line"></span><br><span class="line">yum -y install libaio.so.1 libgcc_s.so.1 libstdc++.so.6 libncurses.so.5 --setopt=protected_multilib=false</span><br><span class="line"></span><br><span class="line">yum  update libstdc++-4.4.7-4.el6.x86_64</span><br><span class="line"></span><br><span class="line">E). 安装 mysql-client</span><br><span class="line"></span><br><span class="line">rpm -ivh MySQL-client-5.6.22-1.el6.i686.rpm</span><br><span class="line"></span><br><span class="line">F). 安装 mysql-server</span><br><span class="line"></span><br><span class="line">rpm -ivh MySQL-server-5.6.22-1.el6.i686.rpm</span><br><span class="line"></span><br><span class="line">-----------------------------------------</span><br><span class="line">service mysql start</span><br><span class="line"></span><br><span class="line">service mysql stop</span><br><span class="line"></span><br><span class="line">service mysql status</span><br><span class="line"></span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h4 id="1-2-配置JDK环境"><a href="#1-2-配置JDK环境" class="headerlink" title="1.2 配置JDK环境"></a>1.2 配置JDK环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">配置PATH环境变量 , 在该配置文件(/etc/profile)的最后加入如下配置</span><br><span class="line">export JAVA_HOME=/usr/share/jdk1.8.0_181</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><h4 id="1-3-MyCat"><a href="#1-3-MyCat" class="headerlink" title="1.3 MyCat"></a>1.3 MyCat</h4><p>   <img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628093716.png" alt="1573556739880"></p><h3 id="2-MyCat核心概念"><a href="#2-MyCat核心概念" class="headerlink" title="2. MyCat核心概念"></a>2. MyCat核心概念</h3><h4 id="2-1-分片"><a href="#2-1-分片" class="headerlink" title="2.1 分片"></a>2.1 分片</h4><p>简单来说，就是指通过某种特定的条件，将我们存放在同一个数据库中的数据分散存放到多个数据库或者主机上面，已达到分散单台设备负载的效果。数据的切分，根据其切分规则的类型，可以分为两种切分模式。</p><ul><li><p>一种是按照不同的表（或者Schema）来切分到不同的数据库智商，这种切分已经称之为数据的垂直切分</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628094405.png" alt="1573622314361"></p></li><li><p>另外一种则是根据表中的数据的逻辑关系，将同一个表中的数据按照某种条件拆分到多台数据库上面，这种切分称之为水平切分</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628094541.png" alt="1573622358104"></p></li></ul><p><strong>MyCat分片策略</strong></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628094613.png" alt="1573659631804"></p><blockquote><p>虚线以辑结构图，虚线之下是物理结构图</p></blockquote><h4 id="2-2-逻辑库Schema"><a href="#2-2-逻辑库Schema" class="headerlink" title="2.2 逻辑库Schema"></a>2.2 逻辑库Schema</h4><p>MyCat是一个数据库中间件，通常对实际应用来说，并不需要指定中间件的存在，业务开发人员只需要知道数据库的概念，所以数据库中间件可以被看做一个或者多个数据库集群构成的逻辑表</p><h4 id="2-3-逻辑表"><a href="#2-3-逻辑表" class="headerlink" title="2.3 逻辑表"></a>2.3 逻辑表</h4><p>既然有了逻辑库，那么就会有逻辑表，分布式数据库中，对应用来说，读写数据的表的逻辑表。逻辑表可以是数据切分后，分布在一个或者多个分片库中，也可以不做数据切分，不分片，只有一个表构成。</p><ol><li><p>分片表</p><p>是指那些原有很大数据的表，需要切分到多个数据库中的表，这样，每个分片都有一部分数据，所有分片构成了完整的数据。总而言之就是需要进行分片的表，如：tb_order表是一个分片表，数据按照规则被切分到dn1，dn2两个节点。</p></li><li><p>非分片表</p><p>一个数据库中国并不是所有的表都很大，某些表是不用进行切分的，非分片是相对分片表来说的，就是那些不需要进行数据切分的表，如一个数据库中的字典表，city表等</p></li><li><p>ER表</p><p>关系型数据库是基于实体关系模型（Entity Relationship Model）的，MyCat中的ER表便来源如此，MyCat提出基于ER关系的数据分片策略，字表的记录与其关联父表的记录存放在一个数据分片中，通过表分组保证数据关联查询不会跨库操作。</p></li><li><p>全局表</p><p>在一个大型的项目中，会存在一部分字典表（码表），在其中存储的是项目中的一些基础的数据，而这些基础的数据，数据量都不大，在各个业务表中可能都存在关联。当业务表由于数据量大而分片之后，业务表与附属的数据字典表之间的关联查询就变成了比较棘手的问题，在MyCat中可以通过数据冗余来解决这类表的关联查询，即所有分片都复制这一份数据，因此可以把这些冗余数据的表定义为全局表。</p></li></ol><h4 id="2-4-分片节点（dataNode）"><a href="#2-4-分片节点（dataNode）" class="headerlink" title="2.4 分片节点（dataNode）"></a>2.4 分片节点（dataNode）</h4><p>数据切分之后，一个大表分到不同的数据库上面，每个表分片所在的数据库就是分片节点</p><h4 id="2-5-节点主机（dataHost）"><a href="#2-5-节点主机（dataHost）" class="headerlink" title="2.5 节点主机（dataHost）"></a>2.5 节点主机（dataHost）</h4><p>数据切分之后，每个分片节点（dataNode）不一定都会独占一台机器，同一机器上面可以有多个分片数据库，这样一个或者多个分片节点所在的机器就是节点主机，为了规避单节点主机的并发数限制，尽量将读写压力高的分片节点均衡的放在不同的节点主机</p><h4 id="2-6-分片规则（rule）"><a href="#2-6-分片规则（rule）" class="headerlink" title="2.6 分片规则（rule）"></a>2.6 分片规则（rule）</h4><p>前面讲了数据切分，一个大表被分成若干个分片表，就需要一定的规则。这样按照某种业务规则把数据分到某个分片的规则就是分片规则，数据切分选择合适的分片规则是非常重要的。将极大的避免后续数据处理的难度。</p><h3 id="3-分片配置测试"><a href="#3-分片配置测试" class="headerlink" title="3. 分片配置测试"></a>3. 分片配置测试</h3><h4 id="3-1-需求"><a href="#3-1-需求" class="headerlink" title="3.1 需求"></a>3.1 需求</h4><p>由于TB_TEST表中的数据很大，现在需要对TB_TEST表进行数据分片，分为三个节点，每一个节点主机位于不同的服务器上，具体的结构，参考下图：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628140911.png" alt="1575724614686"></p><h4 id="3-2-环境准备"><a href="#3-2-环境准备" class="headerlink" title="3.2 环境准备"></a>3.2 环境准备</h4><p>准备三台虚拟机，并且按照好MySQL，并配置好：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IP 地址列表 : </span><br><span class="line">192.168.192.157</span><br><span class="line">192.168.192.158</span><br><span class="line">192.168.192.159</span><br></pre></td></tr></table></figure><h4 id="3-3-配置schema-xml"><a href="#3-3-配置schema-xml" class="headerlink" title="3.3 配置schema.xml"></a>3.3 配置schema.xml</h4><p>schema.xml作为MyCat中重要的配置文件之一，管理着MyCat的逻辑表，逻辑库以及对应的分片规则，DataNode,弄懂这些配置，是正确使用MyCat的前提，这里就是一层层对该文件进行解析</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>schema</td><td>标签用于定义MyCat实例中的逻辑库</td></tr><tr><td>table</td><td>标签定义了MyCat中的逻辑表, rule用于指定分片规则，auto-sharding-long的分片规则是按ID值的范围进行分片 1-5000000 为第1片  5000001-10000000 为第2片….  具体设置我们会在第四节中讲解。</td></tr><tr><td>dataNode</td><td>标签定义了MyCat中的数据节点，也就是我们通常说所的数据分片。</td></tr><tr><td>dataHost</td><td>标签在mycat逻辑库中也是作为最底层的标签存在，直接定义了具体的数据库实例、读写分离配置和心跳语句。</td></tr></tbody></table><p>在服务器中创建三个数据库，命名为db1</p><p>修改schema.xml如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 逻辑库配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;ITCAST&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逻辑表配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;TB_TEST&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 数据节点配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host3&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db1&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 节点主机配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.157:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.158:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host3&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.159:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-4-配置server-xml"><a href="#3-4-配置server-xml" class="headerlink" title="3.4 配置server.xml"></a>3.4 配置server.xml</h4><p>server.xml几乎保存了所有MyCat需要的系统配置信息，最常用的是在此配置用户名，密码以及权限，在system中添加utf8字符集设置，否则存储中文会出现乱码问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;charset&quot;</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改user的配置，我们这里为ITCAST设置了两个用户</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>ITCAST<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>ITCAST<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且需要将原来的逻辑库的配置，替换为ITCAST逻辑库</p><h4 id="3-5-启动MyCat"><a href="#3-5-启动MyCat" class="headerlink" title="3.5 启动MyCat"></a>3.5 启动MyCat</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/mycat start</span><br><span class="line">bin/mycat stop</span><br><span class="line">bin/mycat status</span><br></pre></td></tr></table></figure><p>查看MyCat:</p><p>连接端口号  8066 </p><p>1). 通过命令行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 127.0.0.1 -P 8066 -u root -p</span><br></pre></td></tr></table></figure><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628142803.png" alt="1573916419746"></p><h4 id="3-6-MyCat分片测试"><a href="#3-6-MyCat分片测试" class="headerlink" title="3.6 MyCat分片测试"></a>3.6 MyCat分片测试</h4><p>进入MyCat，执行下列语句创建一个表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TB_TEST (</span><br><span class="line">  id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  title <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ;</span><br></pre></td></tr></table></figure><p>我们再查看MySQL的3个库，发现表都自动创建好啦。好神奇。</p><p>接下来是插入表数据，注意，在写 INSERT 语句时一定要写把字段列表写出来，否则会出现下列错误提示：</p><p>错误代码： 1064</p><p>partition table, insert must provide ColumnList</p><p>我们试着插入一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TB_TEST(ID,TITLE) <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;goods1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TB_TEST(ID,TITLE) <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;goods2&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TB_TEST(ID,TITLE) <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;goods3&#x27;</span>);</span><br></pre></td></tr></table></figure><p>我们会发现这些数据被写入到第一个节点中了，那什么时候数据会写到第二个节点中呢？</p><p>我们插入下面的数据就可以插入第二个节点了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TB_TEST(ID,TITLE) <span class="keyword">VALUES</span>(<span class="number">5000001</span>,<span class="string">&#x27;goods5000001&#x27;</span>);</span><br></pre></td></tr></table></figure><p>因为我们采用的分片规则是每节点存储500万条数据，所以当ID大于5000000则会存储到第二个节点上。</p><p>目前只设置了两个节点，如果数据大于1000万条，会怎么样呢？执行下列语句测试一下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TB_TEST(ID,TITLE) <span class="keyword">VALUES</span>(<span class="number">10000001</span>,<span class="string">&#x27;goods10000001&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-原理介绍"><a href="#4-原理介绍" class="headerlink" title="4. 原理介绍"></a>4. 原理介绍</h3><p>MyCat原理中最重要的一个动词就是“拦截”，它拦截了用户发送过来的SQL语句，首先对SQL语句做了一些特定的分析，如分片分析，路由分析，读写分离分析，缓存分析等，然后将此SQL语句发往后端真实的数据库中，并将返回的结果做适当的处理，最终在返回给用户。如图所示。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628144252.png" alt="1577358066323"></p><p>在图中，user表被分为三个分片节点dn1,dn2,dn3。他们分布在三个MySQLServer上，因此可以使用1-n台服务器来分片，分片规则为典型的字符串枚举分片，一个规则的定义是分片字段+分片函数，这是的分片字段为status，分片函数则为字符串枚举方式</p><p>MyCat收到一条SQL语句时，首先解析SQL语句涉及到的表，接着查看此表的定义，如果该表存在分片规则，则获取SQL语句里的分片字段的值，并匹配分片函数，得到该SQL语句对应的分片列表，然后将SQL语句发送到相对应的分片去执行，最好处理所有分片返回的数据并返回给客户端，以 ‘select * from user where status = ‘0’;为例，查询status=0，按照分片函数，0值存放在dn1,于是SQL语句被发送到了第一个节点中执行，然后再将查询返回的结果返回的用户</p><p>如果发送的SQL条件为 where status in (0,1),那么SQL语句会被发送到dn1,dn2对应的主机上执行，然后将结果集合并后输出给用户</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> MyCat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyCat </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyCat(三)---配置文件</title>
      <link href="2021/06/26/MyCat(%E4%B8%89)---%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>2021/06/26/MyCat(%E4%B8%89)---%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="1-serer-xml"><a href="#1-serer-xml" class="headerlink" title="1. serer.xml"></a>1. serer.xml</h3><h4 id="1-1-system标签"><a href="#1-1-system标签" class="headerlink" title="1.1 system标签"></a>1.1 system标签</h4><table><thead><tr><th>属性</th><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>charset</td><td>utf8</td><td>设置Mycat的字符集, 字符集需要与MySQL的字符集保持一致</td></tr><tr><td>nonePasswordLogin</td><td>0,1</td><td>0为需要密码登陆、1为不需要密码登陆 ,默认为0，设置为1则需要指定默认账户</td></tr><tr><td>useHandshakeV10</td><td>0,1</td><td>使用该选项主要的目的是为了能够兼容高版本的jdbc驱动, 是否采用HandshakeV10Packet来与client进行通信, 1:是, 0:否</td></tr><tr><td>useSqlStat</td><td>0,1</td><td>开启SQL实时统计, 1 为开启 , 0 为关闭 ;<br />开启之后, MyCat会自动统计SQL语句的执行情况 ;<br />mysql -h 127.0.0.1 -P 9066 -u root -p<br />查看MyCat执行的SQL, 执行效率比较低的SQL , SQL的整体执行情况、读写比例等 ;<br />show @@sql ; show @@sql.slow ; show @@sql.sum ;</td></tr><tr><td>useGlobleTableCheck</td><td>0,1</td><td>是否开启全局表的一致性检测。1为开启 ，0为关闭 。</td></tr><tr><td>sqlExecuteTimeout</td><td>1000</td><td>SQL语句执行的超时时间 , 单位为 s ;</td></tr><tr><td>sequnceHandlerType</td><td>0,1,2</td><td>用来指定Mycat全局序列类型，0 为本地文件，1 为数据库方式，2 为时间戳列方式，默认使用本地文件方式，文件方式主要用于测试</td></tr><tr><td>sequnceHandlerPattern</td><td>正则表达式</td><td>必须带有MYCATSEQ_或者 mycatseq_进入序列匹配流程 注意MYCATSEQ_有空格的情况</td></tr><tr><td>subqueryRelationshipCheck</td><td>true,false</td><td>子查询中存在关联查询的情况下,检查关联字段中是否有分片字段 .默认 false</td></tr><tr><td>useCompression</td><td>0,1</td><td>开启mysql压缩协议 , 0 : 关闭, 1 : 开启</td></tr><tr><td>fakeMySQLVersion</td><td>5.5,5.6</td><td>设置模拟的MySQL版本号</td></tr><tr><td>defaultSqlParser</td><td></td><td>由于MyCat的最初版本使用了FoundationDB的SQL解析器, 在MyCat1.3后增加了Druid解析器, 所以要设置defaultSqlParser属性来指定默认的解析器; 解析器有两个 : druidparser 和 fdbparser, 在MyCat1.4之后,默认是druidparser, fdbparser已经废除了</td></tr><tr><td>processors</td><td>1,2….</td><td>指定系统可用的线程数量, 默认值为CPU核心 x 每个核心运行线程数量; processors 会影响processorBufferPool, processorBufferLocalPercent, processorExecutor属性, 所有, 在性能调优时, 可以适当地修改processors值</td></tr><tr><td>processorBufferChunk</td><td></td><td>指定每次分配Socket Direct Buffer默认值为4096字节, 也会影响BufferPool长度, 如果一次性获取字节过多而导致buffer不够用, 则会出现警告, 可以调大该值</td></tr><tr><td>processorExecutor</td><td></td><td>指定NIOProcessor上共享 businessExecutor固定线程池的大小; MyCat把异步任务交给 businessExecutor线程池中, 在新版本的MyCat中这个连接池使用频次不高, 可以适当地把该值调小</td></tr><tr><td>packetHeaderSize</td><td></td><td>指定MySQL协议中的报文头长度, 默认4个字节</td></tr><tr><td>maxPacketSize</td><td></td><td>指定MySQL协议可以携带的数据最大大小, 默认值为16M</td></tr><tr><td>idleTimeout</td><td>30</td><td>指定连接的空闲时间的超时长度;如果超时,将关闭资源并回收, 默认30分钟</td></tr><tr><td>txIsolation</td><td>1,2,3,4</td><td>初始化前端连接的事务隔离级别,默认为 REPEATED_READ , 对应数字为3<br />READ_UNCOMMITED=1;<br />READ_COMMITTED=2;<br />REPEATED_READ=3;<br />SERIALIZABLE=4;</td></tr><tr><td>sqlExecuteTimeout</td><td>300</td><td>执行SQL的超时时间, 如果SQL语句执行超时,将关闭连接; 默认300秒;</td></tr><tr><td>serverPort</td><td>8066</td><td>定义MyCat的使用端口, 默认8066</td></tr><tr><td>managerPort</td><td>9066</td><td>定义MyCat的管理端口, 默认9066</td></tr></tbody></table><h4 id="1-2-user标签"><a href="#1-2-user标签" class="headerlink" title="1.2 user标签"></a>1.2 user标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>ITCAST<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readOnly&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;benchmark&quot;</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;usingDecrypt&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 表级 DML 权限设置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    &lt;privileges check=&quot;false&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span></span><br><span class="line"><span class="comment">            &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">            &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">        &lt;/schema&gt;</span></span><br><span class="line"><span class="comment">    &lt;/privileges&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>user标签主要用于定义登录MyCat的用户和权限 :</p><p>1). &lt;user name=”root” defaultAccount=”true”&gt; : name 属性用于声明用户名 ;</p><p>2). &lt;property name=”password”&gt;123456&lt;/property&gt; : 指定该用户名访问MyCat的密码 ;</p><p>3). &lt;property name=”schemas”&gt;ITCAST&lt;/property&gt; : 能够访问的逻辑库, 多个的话, 使用 “,” 分割</p><p>4). &lt;property name=”readOnly”&gt;true&lt;/property&gt; : 是否只读</p><p>5). &lt;property name=”benchmark”&gt;11111&lt;/property&gt; : 指定前端的整体连接数量 , 0 或不设置表示不限制 </p><p>6). &lt;property name=”usingDecrypt”&gt;0&lt;/property&gt; : 是否对密码加密默认 0 否 , 1 是</p><p><code>java -cp Mycat-server-1.6.7.3-release.jar io.mycat.util.DecryptUtil 0:root:123456</code></p><p>7). &lt;privileges check=”false”&gt;</p><p>A. 对用户的 schema 及 下级的 table 进行精细化的 DML 权限控制; </p><p>B. privileges 节点中的 check 属性是用 于标识是否开启 DML 权限检查， 默认 false 标识不检查，当然 privileges 节点不配置，等同 check=false, 由于 Mycat 一个用户的 schemas 属性可配置多个 schema ，所以 privileges 的下级节点 schema 节点同样 可配置多个，对多库多表进行细粒度的 DML 权限控制;</p><p>C. 权限修饰符四位数字(0000 - 1111)，对应的操作是 IUSD ( 增，改，查，删 )。同时配置了库跟表的权限，就近原则。以表权限为准。</p><h4 id="1-3-firewall标签"><a href="#1-3-firewall标签" class="headerlink" title="1.3 firewall标签"></a>1.3 firewall标签</h4><p>firewall标签用来定义防火墙；firewall下whitehost标签用来定义 IP白名单 ，blacklist用来定义 SQL黑名单。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">firewall</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 白名单配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">whitehost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">host</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">host</span>=<span class="string">&quot;127.0.0.1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">whitehost</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 黑名单配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blacklist</span> <span class="attr">check</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;selelctAllow&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">blacklist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">firewall</span>&gt;</span></span><br></pre></td></tr></table></figure><p>黑名单拦截明细配置:</p><table><thead><tr><th>配置项</th><th>缺省值</th><th>描述</th></tr></thead><tbody><tr><td>selelctAllow</td><td>true</td><td>是否允许执行 SELECT 语句</td></tr><tr><td>selectAllColumnAllow</td><td>true</td><td>是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但可以select * from (select id, name from t) a。这个选项是防御程序通过调用 select * 获得数据表的结构信息。</td></tr><tr><td>selectIntoAllow</td><td>true</td><td>SELECT 查询中是否允许 INTO 字句</td></tr><tr><td>deleteAllow</td><td>true</td><td>是否允许执行 DELETE 语句</td></tr><tr><td>updateAllow</td><td>true</td><td>是否允许执行 UPDATE 语句</td></tr><tr><td>insertAllow</td><td>true</td><td>是否允许执行 INSERT 语句</td></tr><tr><td>replaceAllow</td><td>true</td><td>是否允许执行 REPLACE 语句</td></tr><tr><td>mergeAllow</td><td>true</td><td>是否允许执行 MERGE 语句，这个只在 Oracle 中有用</td></tr><tr><td>callAllow</td><td>true</td><td>是否允许通过 jdbc 的 call 语法调用存储过程</td></tr><tr><td>setAllow</td><td>true</td><td>是否允许使用 SET 语法</td></tr><tr><td>truncateAllow</td><td>true</td><td>truncate 语句是危险，缺省打开，若需要自行关闭</td></tr><tr><td>createTableAllow</td><td>true</td><td>是否允许创建表</td></tr><tr><td>alterTableAllow</td><td>true</td><td>是否允许执行 Alter Table 语句</td></tr><tr><td>dropTableAllow</td><td>true</td><td>是否允许修改表</td></tr><tr><td>commentAllow</td><td>false</td><td>是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别</td></tr><tr><td>noneBaseStatementAllow</td><td>false</td><td>是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽 DDL。</td></tr><tr><td>multiStatementAllow</td><td>false</td><td>是否允许一次执行多条语句，缺省关闭</td></tr><tr><td>useAllow</td><td>true</td><td>是否允许执行 mysql 的 use 语句，缺省打开</td></tr><tr><td>describeAllow</td><td>true</td><td>是否允许执行 mysql 的 describe 语句，缺省打开</td></tr><tr><td>showAllow</td><td>true</td><td>是否允许执行 mysql 的 show 语句，缺省打开</td></tr><tr><td>commitAllow</td><td>true</td><td>是否允许执行 commit 操作</td></tr><tr><td>rollbackAllow</td><td>true</td><td>是否允许执行 roll back 操作</td></tr><tr><td>拦截配置－永真条件</td><td></td><td></td></tr><tr><td>selectWhereAlwayTrueCheck</td><td>true</td><td>检查 SELECT 语句的 WHERE 子句是否是一个永真条件</td></tr><tr><td>selectHavingAlwayTrueCheck</td><td>true</td><td>检查 SELECT 语句的 HAVING 子句是否是一个永真条件</td></tr><tr><td>deleteWhereAlwayTrueCheck</td><td>true</td><td>检查 DELETE 语句的 WHERE 子句是否是一个永真条件</td></tr><tr><td>deleteWhereNoneCheck</td><td>false</td><td>检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险</td></tr><tr><td>updateWhereAlayTrueCheck</td><td>true</td><td>检查 UPDATE 语句的 WHERE 子句是否是一个永真条件</td></tr><tr><td>updateWhereNoneCheck</td><td>false</td><td>检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险</td></tr><tr><td>conditionAndAlwayTrueAllow</td><td>false</td><td>检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件</td></tr><tr><td>conditionAndAlwayFalseAllow</td><td>false</td><td>检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件</td></tr><tr><td>conditionLikeTrueAllow</td><td>true</td><td>检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件</td></tr><tr><td>其他拦截配置</td><td></td><td></td></tr><tr><td>selectIntoOutfileAllow</td><td>false</td><td>SELECT … INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的</td></tr><tr><td>selectUnionCheck</td><td>true</td><td>检测 SELECT UNION</td></tr><tr><td>selectMinusCheck</td><td>true</td><td>检测 SELECT MINUS</td></tr><tr><td>selectExceptCheck</td><td>true</td><td>检测 SELECT EXCEPT</td></tr><tr><td>selectIntersectCheck</td><td>true</td><td>检测 SELECT INTERSECT</td></tr><tr><td>mustParameterized</td><td>false</td><td>是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL</td></tr><tr><td>strictSyntaxCheck</td><td>true</td><td>是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者。</td></tr><tr><td>conditionOpXorAllow</td><td>false</td><td>查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。</td></tr><tr><td>conditionOpBitwseAllow</td><td>true</td><td>查询条件中是否允许有”&amp;”、”~”、”|”、”^”运算符。</td></tr><tr><td>conditionDoubleConstAllow</td><td>false</td><td>查询条件中是否允许连续两个常量运算表达式</td></tr><tr><td>minusAllow</td><td>true</td><td>是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句</td></tr><tr><td>intersectAllow</td><td>true</td><td>是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句</td></tr><tr><td>constArithmeticAllow</td><td>true</td><td>拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中”3 - 1”是常量运算表达式。</td></tr><tr><td>limitZeroAllow</td><td>false</td><td>是否允许 limit 0 这样的语句</td></tr><tr><td>禁用对象检测配置</td><td></td><td></td></tr><tr><td>tableCheck</td><td>true</td><td>检测是否使用了禁用的表</td></tr><tr><td>schemaCheck</td><td>true</td><td>检测是否使用了禁用的 Schema</td></tr><tr><td>functionCheck</td><td>true</td><td>检测是否使用了禁用的函数</td></tr><tr><td>objectCheck</td><td>true</td><td>检测是否使用了“禁用对对象”</td></tr><tr><td>variantCheck</td><td>true</td><td>检测是否使用了“禁用的变量”</td></tr><tr><td>readOnlyTables</td><td>空</td><td>指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为”被修改表”出现</td></tr></tbody></table><h3 id="2-schema-xml"><a href="#2-schema-xml" class="headerlink" title="2. schema.xml"></a>2. schema.xml</h3><p>schema.xml 作为MyCat中最重要的配置文件之一 , 涵盖了MyCat的逻辑库 、 表 、 分片规则、分片节点及数据源的配置。</p><h4 id="2-1-schema标签"><a href="#2-1-schema标签" class="headerlink" title="2.1 schema标签"></a>2.1 schema标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;ITCAST&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;TB_TEST&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p>schema 标签用于定义 MyCat实例中的逻辑库 , 一个MyCat实例中, 可以有多个逻辑库 , 可以通过 schema 标签来划分不同的逻辑库。MyCat中的逻辑库的概念 ， 等同于MySQL中的database概念 , 需要操作某个逻辑库下的表时, 也需要切换逻辑库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use ITCAST;</span><br></pre></td></tr></table></figure><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><ul><li><p>name 指定逻辑库的库名，可以自己自定义人核字符串；</p></li><li><p>checkSQLschema  取值为true/false </p><p>如果设置为true时 , 如果我们执行的语句为 “select * from ITCAST.TB_TEST;” , 则MyCat会自动把schema字符去掉, 把SQL语句修改为 “select * from TB_TEST;” 可以避免SQL发送到后端数据库执行时, 报table不存在的异常 。</p><p>不过当我们在编写SQL语句时, 指定了一个不存在schema, MyCat是不会帮我们自动去除的 ,这个时候数据库就会报错, 所以在编写SQL语句时,最好不要加逻辑库的库名, 直接查询表即可。</p></li><li><p>SQLMaxLimit</p><p>当该属性设置为某个数值时,每次执行的SQL语句如果没有加上limit语句, MyCat也会自动在limit语句后面加上对应的数值 。也就是说， 如果设置了该值为100，则执行 select * from TB_TEST 与 select * from TB_TEST limit 100 是相同的效果 。</p><p>所以在正常的使用中, 建立设置该值 , 这样就可以避免每次有过多的数据返回。</p></li></ul><h5 id="子标签table"><a href="#子标签table" class="headerlink" title="子标签table"></a>子标签table</h5><p>table便签定义了MyCat中逻辑库schema下的逻辑表，所有需要拆分的表都需要在table标签中定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;TB_TEST&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628145821.png" alt="1574954845578"></p><p>1). name </p><p>定义逻辑表的表名 , 在该逻辑库下必须唯一。</p><p>2). dataNode</p><p>定义的逻辑表所属的dataNode , 该属性需要与dataNode标签中的name属性的值对应。 如果一张表拆分的数据，存储在多个数据节点上，多个节点的名称使用”,”分隔 。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628145904.png" alt="1574955059453"> </p><p>3). rule</p><p>该属性用于指定逻辑表的分片规则的名字, 规则的名字是在rule.xml文件中定义的, 必须与tableRule标签中name属性对应。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628145908.png" alt="1574955534319"> </p><p>4). ruleRequired</p><p>该属性用于指定表是否绑定分片规则, 如果配置为true, 但是没有具体的rule, 程序会报错。</p><p>5). primaryKey</p><p>逻辑表对应真实表的主键</p><p>如: 分片规则是使用主键进行分片, 使用主键进行查询时, 就会发送查询语句到配置的所有的datanode上; 如果使用该属性配置真实表的主键, 那么MyCat会缓存主键与具体datanode的信息, 再次使用主键查询就不会进行广播式查询了, 而是直接将SQL发送给具体的datanode。</p><p>6). type</p><p>该属性定义了逻辑表的类型，目前逻辑表只有全局表和普通表。</p><p>全局表：type的值是 global , 代表 全局表 。</p><p>普通表：无</p><p>7). autoIncrement</p><p>mysql对非自增长主键，使用last_insert_id() 是不会返回结果的，只会返回0。所以，只有定义了自增长主键的表，才可以用last_insert_id()返回主键值。<br>mycat提供了自增长主键功能，但是对应的mysql节点上数据表，没有auto_increment,那么在mycat层调用last_insert_id()也是不会返回结果的。</p><p>如果使用这个功能， 则最好配合数据库模式的全局序列。使用 autoIncrement=”true” 指定该表使用自增长主键,这样MyCat才不会抛出 “分片键找不到” 的异常。 autoIncrement的默认值为 false。</p><p>8). needAddLimit</p><p>指定表是否需要自动在每个语句的后面加上limit限制, 默认为true。</p><h4 id="2-2-dataNode标签"><a href="#2-2-dataNode标签" class="headerlink" title="2.2 dataNode标签"></a>2.2 dataNode标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db1&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>dataNode标签中定义了MyCat中的数据节点, 也就是我们通常说的数据分片。一个dataNode标签就是一个独立的数据分片。</p><p>具体的属性 ： </p><table><thead><tr><th>属性</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>数据节点的名称</td><td>需要唯一 ; 在table标签中会引用这个名字, 标识表与分片的对应关系</td></tr><tr><td>dataHost</td><td>数据库实例主机名称</td><td>引用自 dataHost 标签中name属性</td></tr><tr><td>database</td><td>定义分片所属的数据库</td><td></td></tr></tbody></table><h4 id="2-3-dataHost标签"><a href="#2-3-dataHost标签" class="headerlink" title="2.3 dataHost标签"></a>2.3 dataHost标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.147:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该标签在MyCat逻辑库中作为底层标签存在, 直接定义了具体的数据库实例、读写分离、心跳语句。</p><h5 id="2-3-1-属性"><a href="#2-3-1-属性" class="headerlink" title="2.3.1 属性"></a>2.3.1 属性</h5><table><thead><tr><th>属性</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>数据节点名称</td><td>唯一标识， 供上层标签使用</td></tr><tr><td>maxCon</td><td>最大连接数</td><td>内部的writeHost、readHost都会使用这个属性</td></tr><tr><td>minCon</td><td>最小连接数</td><td>内部的writeHost、readHost初始化连接池的大小</td></tr><tr><td>balance</td><td>负载均衡类型</td><td>取值0,1,2,3 ; 后面章节会详细介绍;</td></tr><tr><td>writeType</td><td>写操作分发方式</td><td>0 : 写操作都转发到第1台writeHost, writeHost1挂了, 会切换到writeHost2上; <br />1 : 所有的写操作都随机地发送到配置的writeHost上 ;</td></tr><tr><td>dbType</td><td>后端数据库类型</td><td>mysql, mongodb , oracle</td></tr><tr><td>dbDriver</td><td>数据库驱动</td><td>指定连接后端数据库的驱动,目前可选值有 native和JDBC。native执行的是二进制的MySQL协议，可以使用MySQL和MariaDB。其他类型数据库需要使用JDBC（需要在MyCat/lib目录下加入驱动jar）</td></tr><tr><td>switchType</td><td>数据库切换策略</td><td>取值 -1,1,2,3 ; 后面章节会详细介绍;</td></tr></tbody></table><h5 id="2-3-2-子标签heartbeat"><a href="#2-3-2-子标签heartbeat" class="headerlink" title="2.3.2 子标签heartbeat"></a>2.3.2 子标签heartbeat</h5><p>配置MyCat与后端数据库的心跳，用于检测后端数据库的状态。heartbeat用于配置心跳检查语句。例如 ： MySQL中可以使用 select user(), Oracle中可以使用 select 1 from dual等。</p><h5 id="2-3-3-子标签writeHost、readHost"><a href="#2-3-3-子标签writeHost、readHost" class="headerlink" title="2.3.3 子标签writeHost、readHost"></a>2.3.3 子标签writeHost、readHost</h5><p>指定后端数据库的相关配置， 用于实例化后端连接池。 writeHost指定写实例， readHost指定读实例。</p><p>在一个dataHost中可以定义多个writeHost和readHost。但是，如果writeHost指定的后端数据库宕机， 那么这个writeHost绑定的所有readHost也将不可用。</p><p>属性：</p><table><thead><tr><th>属性名</th><th>含义</th><th>取值</th></tr></thead><tbody><tr><td>host</td><td>实例主机标识</td><td>对于writeHost一般使用 *M1；对于readHost，一般使用 *S1；</td></tr><tr><td>url</td><td>后端数据库连接地址</td><td>如果是native，一般为 ip:port ; 如果是JDBC, 一般为jdbc:mysql://ip:port/</td></tr><tr><td>user</td><td>数据库用户名</td><td>root</td></tr><tr><td>password</td><td>数据库密码</td><td>itcast</td></tr><tr><td>weight</td><td>权重</td><td>在readHost中作为读节点权重</td></tr><tr><td>usingDecrypt</td><td>密码加密</td><td>默认 0 否 , 1 是</td></tr></tbody></table><h3 id="3-rule-xml"><a href="#3-rule-xml" class="headerlink" title="3. rule.xml"></a>3. rule.xml</h3><p>rule.xml中定义所有拆分表的规则, 在使用过程中可以灵活的使用分片算法, 或者对同一个分片算法使用不同的参数, 它让分片过程可配置化。</p><h4 id="3-1-tableRule标签"><a href="#3-1-tableRule标签" class="headerlink" title="3.1 tableRule标签"></a>3.1 tableRule标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-long&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A. name : 指定分片算法的名称</p><p>B. rule : 定义分片算法的具体内容 </p><p>C. columns : 指定对应的表中用于分片的列名</p><p>D. algorithm : 对应function中指定的算法名称</p><h4 id="3-2-Function标签"><a href="#3-2-Function标签" class="headerlink" title="3.2 Function标签"></a>3.2 Function标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.AutoPartitionByLong&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>autopartition-long.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A. name : 指定算法名称, 该文件中唯一 </p><p>B. class : 指定算法的具体类</p><p>C. property : 根据算法的要求执行 </p><h3 id="4-sequence-配置文件"><a href="#4-sequence-配置文件" class="headerlink" title="4.  sequence 配置文件"></a>4.  sequence 配置文件</h3><p>在分库分表的情况下 , 原有的自增主键已无法满足在集群中全局唯一的主键 ,因此, MyCat中提供了全局sequence来实现主键 , 并保证全局唯一。那么在MyCat的配置文件 sequence_conf.properties 中就配置的是序列的相关配置。</p><p>主要包含以下几种形式：</p><p>1). 本地文件方式</p><p>2). 数据库方式</p><p>3). 本地时间戳方式</p><p>4). 其他方式</p><p>5). 自增长主键</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> MyCat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyCat </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyCat(四)---分片</title>
      <link href="2021/06/25/Mycat(%E5%9B%9B)---%E5%88%86%E7%89%87/"/>
      <url>2021/06/25/Mycat(%E5%9B%9B)---%E5%88%86%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h3 id="垂直拆分"><a href="#垂直拆分" class="headerlink" title="垂直拆分"></a>垂直拆分</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150647.png" alt="1573622314361"> </p><p>一种是按照不同的表（或者Schema）来切分到不同的数据库（主机）之上，这种切分可以称之为数据的垂直（纵向）切分。</p><h4 id="案例场景"><a href="#案例场景" class="headerlink" title="案例场景"></a>案例场景</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150708.png" alt="1575725341210"> </p><p>在业务系统中, 有以下表结构 ,但是由于用户与订单每天都会产生大量的数据, 单台服务器的数据存储及处理能力是有限的, 可以对数据库表进行拆分, 原有的数据库表: </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150716.png" alt="1575726526012"> </p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>1). 准备三台数据库实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.192.157</span><br><span class="line">192.168.192.158</span><br><span class="line">192.168.192.159</span><br></pre></td></tr></table></figure><p>2). 在三台数据库实例中建库建表</p><p>将准备好的三个SQL脚本, 分别导入到三台MySQL实例中 ;</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150726.png" alt="1575730157557"> </p><p>登录MySQL数据库之后, 使用source命令导入 ;</p><h4 id="schema-xml的配置"><a href="#schema-xml的配置" class="headerlink" title="schema.xml的配置"></a>schema.xml的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;ITCAST_DB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_areas_city&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_areas_provinces&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_areas_region&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_address&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_goods_base&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_goods_desc&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;goods_id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_goods_item_cat&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_order_item&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_order_master&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;order_id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_order_pay_log&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;out_trade_no&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user_db&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;goods_db&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host3&quot;</span> <span class="attr">database</span>=<span class="string">&quot;order_db&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.157:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.158:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host3&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.159:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="server-xml的配置"><a href="#server-xml的配置" class="headerlink" title="server.xml的配置"></a>server.xml的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>ITCAST_DB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>ITCAST_DB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>ITCAST_DB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readOnly&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>1). 查询数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_goods_base;</span><br><span class="line">select * from tb_user;</span><br><span class="line">select * from tb_order_master;</span><br></pre></td></tr></table></figure><p>2). 插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> tb_user_address(id,user_id,province_id,city_id,town_id,mobile,address,contact,is_default,notes,create_date,alias) <span class="keyword">values</span> (<span class="keyword">null</span>,<span class="string">&#x27;java00001&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;13900112222&#x27;</span>,<span class="string">&#x27;钟楼&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> tb_order_item(id,item_id,goods_id,order_id,title,price,num,total_fee,pic_path,seller_id) <span class="keyword">values</span> (<span class="keyword">null</span>,<span class="number">19</span>,<span class="number">149187842867954</span>,<span class="number">3</span>,<span class="string">&#x27;3G 6&#x27;</span>,<span class="string">&#x27;1.00&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;5.00&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;qiandu&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3). 测试跨分片的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_id , payment ,receiver, province , city , area <span class="keyword">FROM</span> tb_order_master o , tb_areas_provinces p , tb_areas_city c , tb_areas_region r</span><br><span class="line"><span class="keyword">WHERE</span> o.receiver_province <span class="operator">=</span> p.provinceid <span class="keyword">AND</span> o.receiver_city <span class="operator">=</span> c.cityid <span class="keyword">AND</span> o.receiver_region <span class="operator">=</span> r.areaid ;</span><br></pre></td></tr></table></figure><p>当运行上述的SQL语句时, MyCat会报错, 原因是因为当前SQL语句涉及到跨域的join操作 ;</p><h4 id="全局表配置"><a href="#全局表配置" class="headerlink" title="全局表配置"></a>全局表配置</h4><p>1). 将数据节点user_db中的关联的字典表 tb_areas_provinces , tb_areas_city , tb_areas_region中的数据备份 ;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>pitcast user_db tb_areas_provinces  <span class="operator">&gt;</span> provinces;</span><br><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>pitcast user_db tb_areas_city <span class="operator">&gt;</span> city;</span><br><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>pitcast user_db tb_areas_region <span class="operator">&gt;</span> region;</span><br></pre></td></tr></table></figure><p>2). 将备份的表结构及数据信息, 远程同步到其他两个数据节点的数据库中;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scp city root<span class="variable">@192</span><span class="number">.168</span><span class="number">.192</span><span class="number">.158</span>:<span class="operator">/</span>root</span><br><span class="line">scp city root<span class="variable">@192</span><span class="number">.168</span><span class="number">.192</span><span class="number">.159</span>:<span class="operator">/</span>root</span><br><span class="line"></span><br><span class="line">scp provinces root<span class="variable">@192</span><span class="number">.168</span><span class="number">.192</span><span class="number">.158</span>:<span class="operator">/</span>root</span><br><span class="line">scp provinces root<span class="variable">@192</span><span class="number">.168</span><span class="number">.192</span><span class="number">.159</span>:<span class="operator">/</span>root</span><br><span class="line"></span><br><span class="line">scp region root<span class="variable">@192</span><span class="number">.168</span><span class="number">.192</span><span class="number">.158</span>:<span class="operator">/</span>root</span><br><span class="line">scp region root<span class="variable">@192</span><span class="number">.168</span><span class="number">.192</span><span class="number">.159</span>:<span class="operator">/</span>root</span><br></pre></td></tr></table></figure><p>3). 导入到对应的数据库中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p goods_db &lt; city</span><br><span class="line">mysql -uroot -p goods_db &lt; provinces </span><br><span class="line">mysql -uroot -p goods_db &lt; region </span><br></pre></td></tr></table></figure><p>4). MyCat逻辑表中的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_areas_city&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_areas_provinces&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_areas_region&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>5). 重启MyCat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/mycat restart</span><br></pre></td></tr></table></figure><p>6). 测试</p><p>再次执行相同的连接查询 , 是可以正常查询出对应的数据的 ;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT order_id , payment ,receiver, province , city , area FROM tb_order_master o , tb_areas_provinces p , tb_areas_city c , tb_areas_region r</span><br><span class="line">WHERE o.receiver_province = p.provinceid AND o.receiver_city = c.cityid AND o.receiver_region = r.areaid ;</span><br></pre></td></tr></table></figure><p>当我们对Mycat全局表进行增删改的操作时, 其他节点主机上的后端MySQL数据库中的数据时会同步变化的;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tb_areas_city set city = &#x27;石家庄&#x27; where id = 5;</span><br></pre></td></tr></table></figure><h3 id="水平拆分"><a href="#水平拆分" class="headerlink" title="水平拆分"></a>水平拆分</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>根据表中的数据的逻辑关系，将同一个表中的数据按照某种条件拆分到多台数据库（主机）上面，这种切分称之为数据的水平（横向）切分。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150738.png" alt="1577151764698"> </p><h4 id="案例场景-1"><a href="#案例场景-1" class="headerlink" title="案例场景"></a>案例场景</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150743.png" alt="1577152000136"> </p><p>在业务系统中, 有一张表(日志表), 业务系统每天都会产生大量的日志数据 , 单台服务器的数据存储及处理能力是有限的, 可以对数据库表进行拆分, 原有的数据库表拆分成以下表 : </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150749.png" alt="1577152168606"> </p><h4 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h4><p>1). 准备三台数据库实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.192.157</span><br><span class="line">192.168.192.158</span><br><span class="line">192.168.192.159</span><br></pre></td></tr></table></figure><p>2). 在三台数据库实例中创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database log_db <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br></pre></td></tr></table></figure><h4 id="schema-xml的配置-1"><a href="#schema-xml的配置-1" class="headerlink" title="schema.xml的配置"></a>schema.xml的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;LOG_DB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_log&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>  <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;log_db&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;log_db&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host3&quot;</span> <span class="attr">database</span>=<span class="string">&quot;log_db&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.157:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.158:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host3&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.159:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="server-xml的配置-1"><a href="#server-xml的配置-1" class="headerlink" title="server.xml的配置"></a>server.xml的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>LOG_DB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>LOG_DB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>LOG_DB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readOnly&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>1). 在MyCat数据库中执行建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_log` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `model_name` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;模块名&#x27;</span>,</span><br><span class="line">  `model_value` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;模块值&#x27;</span>,</span><br><span class="line">  `return_value` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;返回值&#x27;</span>,</span><br><span class="line">  `return_class` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;返回值类型&#x27;</span>,</span><br><span class="line">  `operate_user` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作用户&#x27;</span>,</span><br><span class="line">  `operate_time` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">  `param_and_value` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;请求参数名及参数值&#x27;</span>,</span><br><span class="line">  `operate_class` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作类&#x27;</span>,</span><br><span class="line">  `operate_method` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作方法&#x27;</span>,</span><br><span class="line">  `cost_time` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;执行方法耗时, 单位 ms&#x27;</span>,</span><br><span class="line">  `source` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;来源 : 1 PC , 2 Android , 3 IOS&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p>2). 插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_log` (`id`, `model_name`, `model_value`, `return_value`, `return_class`, `operate_user`, `operate_time`, `param_and_value`, `operate_class`, `operate_method`, `cost_time`，`source`) <span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&#x27;success&#x27;</span>,<span class="string">&#x27;java.lang.String&#x27;</span>,<span class="string">&#x27;10001&#x27;</span>,<span class="string">&#x27;2020-02-26 18:12:28&#x27;</span>,<span class="string">&#x27;&#123;\&quot;age\&quot;:\&quot;20\&quot;,\&quot;name\&quot;:\&quot;Tom\&quot;,\&quot;gender\&quot;:\&quot;1\&quot;&#125;&#x27;</span>,<span class="string">&#x27;cn.itcast.controller.UserController&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&#x27;10&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_log` (`id`, `model_name`, `model_value`, `return_value`, `return_class`, `operate_user`, `operate_time`, `param_and_value`, `operate_class`, `operate_method`, `cost_time`，`source`) <span class="keyword">VALUES</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&#x27;success&#x27;</span>,<span class="string">&#x27;java.lang.String&#x27;</span>,<span class="string">&#x27;10001&#x27;</span>,<span class="string">&#x27;2020-02-26 18:12:27&#x27;</span>,<span class="string">&#x27;&#123;\&quot;age\&quot;:\&quot;20\&quot;,\&quot;name\&quot;:\&quot;Tom\&quot;,\&quot;gender\&quot;:\&quot;1\&quot;&#125;&#x27;</span>,<span class="string">&#x27;cn.itcast.controller.UserController&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&#x27;23&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_log` (`id`, `model_name`, `model_value`, `return_value`, `return_class`, `operate_user`, `operate_time`, `param_and_value`, `operate_class`, `operate_method`, `cost_time`，`source`) <span class="keyword">VALUES</span>(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;update&#x27;</span>,<span class="string">&#x27;success&#x27;</span>,<span class="string">&#x27;java.lang.String&#x27;</span>,<span class="string">&#x27;10001&#x27;</span>,<span class="string">&#x27;2020-02-26 18:16:45&#x27;</span>,<span class="string">&#x27;&#123;\&quot;age\&quot;:\&quot;20\&quot;,\&quot;name\&quot;:\&quot;Tom\&quot;,\&quot;gender\&quot;:\&quot;1\&quot;&#125;&#x27;</span>,<span class="string">&#x27;cn.itcast.controller.UserController&#x27;</span>,<span class="string">&#x27;update&#x27;</span>,<span class="string">&#x27;34&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_log` (`id`, `model_name`, `model_value`, `return_value`, `return_class`, `operate_user`, `operate_time`, `param_and_value`, `operate_class`, `operate_method`, `cost_time`，`source`) <span class="keyword">VALUES</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;update&#x27;</span>,<span class="string">&#x27;success&#x27;</span>,<span class="string">&#x27;java.lang.String&#x27;</span>,<span class="string">&#x27;10001&#x27;</span>,<span class="string">&#x27;2020-02-26 18:16:45&#x27;</span>,<span class="string">&#x27;&#123;\&quot;age\&quot;:\&quot;20\&quot;,\&quot;name\&quot;:\&quot;Tom\&quot;,\&quot;gender\&quot;:\&quot;1\&quot;&#125;&#x27;</span>,<span class="string">&#x27;cn.itcast.controller.UserController&#x27;</span>,<span class="string">&#x27;update&#x27;</span>,<span class="string">&#x27;13&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_log` (`id`, `model_name`, `model_value`, `return_value`, `return_class`, `operate_user`, `operate_time`, `param_and_value`, `operate_class`, `operate_method`, `cost_time`，`source`) <span class="keyword">VALUES</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&#x27;success&#x27;</span>,<span class="string">&#x27;java.lang.String&#x27;</span>,<span class="string">&#x27;10001&#x27;</span>,<span class="string">&#x27;2020-02-26 18:30:31&#x27;</span>,<span class="string">&#x27;&#123;\&quot;age\&quot;:\&quot;200\&quot;,\&quot;name\&quot;:\&quot;TomCat\&quot;,\&quot;gender\&quot;:\&quot;0\&quot;&#125;&#x27;</span>,<span class="string">&#x27;cn.itcast.controller.UserController&#x27;</span>,<span class="string">&#x27;insert&#x27;</span>,<span class="string">&#x27;29&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_log` (`id`, `model_name`, `model_value`, `return_value`, `return_class`, `operate_user`, `operate_time`, `param_and_value`, `operate_class`, `operate_method`, `cost_time`，`source`) <span class="keyword">VALUES</span>(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;find&#x27;</span>,<span class="string">&#x27;success&#x27;</span>,<span class="string">&#x27;java.lang.String&#x27;</span>,<span class="string">&#x27;10001&#x27;</span>,<span class="string">&#x27;2020-02-26 18:30:31&#x27;</span>,<span class="string">&#x27;&#123;\&quot;age\&quot;:\&quot;200\&quot;,\&quot;name\&quot;:\&quot;TomCat\&quot;,\&quot;gender\&quot;:\&quot;0\&quot;&#125;&#x27;</span>,<span class="string">&#x27;cn.itcast.controller.UserController&#x27;</span>,<span class="string">&#x27;find&#x27;</span>,<span class="string">&#x27;29&#x27;</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="分片规则"><a href="#分片规则" class="headerlink" title="分片规则"></a>分片规则</h3><p>MyCat的分片规则配置在conf目录下的rule.xml文件中定义 ; </p><p>环境准备 : </p><p>1). schema.xml中的内容做好备份 , 并配置逻辑库; </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;PARTITION_DB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;partition_db&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;partition_db&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host3&quot;</span> <span class="attr">database</span>=<span class="string">&quot;partition_db&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.157:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.158:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host3&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.159:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2). 在MySQL的三个节点的数据库中 , 创建数据库partition_db</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database partition_db DEFAULT CHARACTER SET utf8mb4;</span><br></pre></td></tr></table></figure><h4 id="取模分片"><a href="#取模分片" class="headerlink" title="取模分片"></a>取模分片</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>mod-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置说明 : </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>class</td><td>指定该分片算法对应的类</td></tr><tr><td>count</td><td>数据节点的数量</td></tr></tbody></table><h4 id="范围分片"><a href="#范围分片" class="headerlink" title="范围分片"></a>范围分片</h4><p>根据指定的字段及其配置的范围与数据节点的对应情况， 来决定该数据属于哪一个分片 ， 配置如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-long&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.AutoPartitionByLong&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>autopartition-long.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>autopartition-long.txt 配置如下： </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># range start-end ,data node index</span></span><br><span class="line"><span class="comment"># K=1000,M=10000.</span></span><br><span class="line"><span class="meta">0-500M</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">500M-1000M</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">1000M-1500M</span>=<span class="string">2</span></span><br></pre></td></tr></table></figure><p>含义为 ： 0 - 500 万之间的值 ， 存储在0号数据节点 ； 500万 - 1000万之间的数据存储在1号数据节点 ； 1000万 - 1500 万的数据节点存储在2号节点 ；</p><p>配置说明: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>class</td><td>指定该分片算法对应的类</td></tr><tr><td>mapFile</td><td>对应的外部配置文件</td></tr><tr><td>type</td><td>默认值为0 ; 0 表示Integer , 1 表示String</td></tr><tr><td>defaultNode</td><td>默认节点 <br />默认节点的所用:枚举分片时,如果碰到不识别的枚举值, 就让它路由到默认节点 ; 如果没有默认值,碰到不识别的则报错 。</td></tr></tbody></table><p>**测试: **</p><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_log&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 创建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_log` (</span><br><span class="line">  id <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  operateuser <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  operation <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;1: insert, 2: delete, 3: update , 4: select&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_log (id,operateuser ,operation) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_log (id,operateuser ,operation) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_log (id,operateuser ,operation) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Rose&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_log (id,operateuser ,operation) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Coco&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_log (id,operateuser ,operation) <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Lily&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="枚举分片"><a href="#枚举分片" class="headerlink" title="枚举分片"></a>枚举分片</h4><p>通过在配置文件中配置可能的枚举值, 指定数据分布到不同数据节点上, 本规则适用于按照省份或状态拆分数据等业务 , 配置如下: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-intfile&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>status<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>hash-int<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;hash-int&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByFileMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-hash-int.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>partition-hash-int.txt ，内容如下 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1=0</span><br><span class="line">2=1</span><br><span class="line">3=2</span><br></pre></td></tr></table></figure><p>配置说明: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>class</td><td>指定该分片算法对应的类</td></tr><tr><td>mapFile</td><td>对应的外部配置文件</td></tr><tr><td>type</td><td>默认值为0 ; 0 表示Integer , 1 表示String</td></tr><tr><td>defaultNode</td><td>默认节点 ; 小于0 标识不设置默认节点 , 大于等于0代表设置默认节点 ; <br />默认节点的所用:枚举分片时,如果碰到不识别的枚举值, 就让它路由到默认节点 ; 如果没有默认值,碰到不识别的则报错 。</td></tr></tbody></table><p>测试: </p><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-enum-status&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 创建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user` (</span><br><span class="line">  id <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  username <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  status <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;1: 未启用, 2: 已启用, 3: 已关闭&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user (id,username ,status) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user (id,username ,status) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user (id,username ,status) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Rose&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user (id,username ,status) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Coco&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user (id,username ,status) <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Lily&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="范围求模算法"><a href="#范围求模算法" class="headerlink" title="范围求模算法"></a>范围求模算法</h4><p>该算法为先进行范围分片, 计算出分片组 , 再进行组内求模。</p><p><strong>优点</strong>： 综合了范围分片和求模分片的优点。 分片组内使用求模可以保证组内的数据分布比较均匀， 分片组之间采用范围分片可以兼顾范围分片的特点。</p><p><strong>缺点</strong>： 在数据范围时固定值（非递增值）时，存在不方便扩展的情况，例如将 dataNode Group size 从 2 扩展为 4 时，需要进行数据迁移才能完成 ； 如图所示： </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150800.png" alt="image-20200110193319982"> </p><p>配置如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-rang-mod&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-mod<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-mod&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByRangeMod&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>autopartition-range-mod.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>autopartition-range-mod.txt 配置格式 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#range  start-end , data node group size</span><br><span class="line">0-500M=1</span><br><span class="line">500M1-2000M=2</span><br></pre></td></tr></table></figure><p>在上述配置文件中, 等号前面的范围代表一个分片组 , 等号后面的数字代表该分片组所拥有的分片数量;</p><p>配置说明: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段名</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>class</td><td>指定该分片算法对应的类</td></tr><tr><td>mapFile</td><td>对应的外部配置文件</td></tr><tr><td>defaultNode</td><td>默认节点 ; 未包含以上规则的数据存储在defaultNode节点中, 节点从0开始</td></tr></tbody></table><p><strong>测试:</strong></p><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_stu&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-rang-mod&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 创建表</span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_stu` (</span><br><span class="line">      id <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">      username <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">      status <span class="type">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;1: 未启用, 2: 已启用, 3: 已关闭&#x27;</span>,</span><br><span class="line">      <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">    ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 插入数据</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_stu (id,username ,status) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_stu (id,username ,status) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_stu (id,username ,status) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Rose&#x27;</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_stu (id,username ,status) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Coco&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_stu (id,username ,status) <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Lily&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_stu (id,username ,status) <span class="keyword">values</span>(<span class="number">5000001</span>,<span class="string">&#x27;Roce&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_stu (id,username ,status) <span class="keyword">values</span>(<span class="number">5000002</span>,<span class="string">&#x27;Jexi&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_stu (id,username ,status) <span class="keyword">values</span>(<span class="number">5000003</span>,<span class="string">&#x27;Mini&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="固定分片hash算法"><a href="#固定分片hash算法" class="headerlink" title="固定分片hash算法"></a>固定分片hash算法</h4><p>该算法类似于十进制的求模运算，但是为二进制的操作，例如，取 id 的二进制低 10 位 与 1111111111 进行位 &amp; 运算。</p><p>最小值：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150855.png" alt="image-20200112180630348"> </p><p>最大值：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150849.png" alt="image-20200112180643493"> </p><p><strong>优点</strong>： 这种策略比较灵活，可以均匀分配也可以非均匀分配，各节点的分配比例和容量大小由partitionCount和partitionLength两个参数决定</p><p><strong>缺点</strong>：和取模分片类似。</p><p>配置如下 ： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-long-hash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>func1<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;func1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.opencloudb.route.function.PartitionByLong&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>256,512<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在示例中配置的分片策略，希望将数据水平分成3份，前两份各占 25%，第三份占 50%。</p><p>配置说明: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段名</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>class</td><td>指定该分片算法对应的类</td></tr><tr><td>partitionCount</td><td>分片个数列表</td></tr><tr><td>partitionLength</td><td>分片范围列表</td></tr></tbody></table><p>约束 : </p><p>1). 分片长度 : 默认最大2^10 , 为 1024 ;</p><p>2). count, length的数组长度必须是一致的 ;</p><p>3). 两组数据的对应情况: (partitionCount[0]partitionLength[0])=(partitionCount[1]partitionLength[1])</p><p>以上分为三个分区:0-255,256-511,512-1023</p><p><strong>测试:</strong></p><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_brand&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-long-hash&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 创建表</span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_brand` (</span><br><span class="line">      id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">      name <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;名称&#x27;</span>,</span><br><span class="line">      firstChar <span class="type">char</span>(<span class="number">1</span>)  COMMENT <span class="string">&#x27;首字母&#x27;</span>,</span><br><span class="line">      <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">    ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 插入数据</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_brand (id,name ,firstChar) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;七匹狼&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_brand (id,name ,firstChar) <span class="keyword">values</span>(<span class="number">529</span>,<span class="string">&#x27;八匹狼&#x27;</span>,<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_brand (id,name ,firstChar) <span class="keyword">values</span>(<span class="number">1203</span>,<span class="string">&#x27;九匹狼&#x27;</span>,<span class="string">&#x27;J&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_brand (id,name ,firstChar) <span class="keyword">values</span>(<span class="number">1205</span>,<span class="string">&#x27;十匹狼&#x27;</span>,<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_brand (id,name ,firstChar) <span class="keyword">values</span>(<span class="number">1719</span>,<span class="string">&#x27;六匹狼&#x27;</span>,<span class="string">&#x27;L&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="取模范围算法"><a href="#取模范围算法" class="headerlink" title="取模范围算法"></a>取模范围算法</h4><p>该算法先进行取模，然后根据取模值所属范围进行分片。</p><p><strong>优点</strong>：可以自主决定取模后数据的节点分布</p><p><strong>缺点</strong>：dataNode 划分节点是事先建好的，需要扩展时比较麻烦。</p><p> 配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-pattern&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-pattern<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-pattern&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByPattern&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-pattern.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;patternValue&quot;</span>&gt;</span>96<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>partition-pattern.txt 配置如下: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0-32=0</span><br><span class="line">33-64=1</span><br><span class="line">65-96=2</span><br></pre></td></tr></table></figure><p>在mapFile配置文件中, 1-32即代表id%96后的分布情况。如果在1-32, 则在分片0上 ; 如果在33-64, 则在分片1上 ; 如果在65-96, 则在分片2上。</p><p>配置说明: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>class</td><td>指定该分片算法对应的类</td></tr><tr><td>mapFile</td><td>对应的外部配置文件</td></tr><tr><td>defaultNode</td><td>默认节点 ; 如果id不是数字, 无法求模, 将分配在defaultNode上</td></tr><tr><td>patternValue</td><td>求模基数</td></tr></tbody></table><p><strong>测试:</strong></p><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_mod_range&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-pattern&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 创建表</span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_mod_range` (</span><br><span class="line">      id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">      name <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;名称&#x27;</span>,</span><br><span class="line">      <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">    ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 插入数据</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_mod_range (id,name) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Test1&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_mod_range (id,name) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Test2&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_mod_range (id,name) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Test3&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_mod_range (id,name) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Test4&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_mod_range (id,name) <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Test5&#x27;</span>);</span><br></pre></td></tr></table></figure><p><font color='red'>注意 : 取模范围算法只能针对于数字类型进行取模运算 ; 如果是字符串则无法进行取模分片 ;</font></p><h4 id="字符串hash求模范围算法"><a href="#字符串hash求模范围算法" class="headerlink" title="字符串hash求模范围算法"></a>字符串hash求模范围算法</h4><p>与取模范围算法类似, 该算法支持数值、符号、字母取模，首先截取长度为 prefixLength 的子串，在对子串中每一个字符的 ASCII 码求和，然后对求和值进行取模运算（sum%patternValue），就可以计算出子串的分片数。</p><p><strong>优点</strong>：可以自主决定取模后数据的节点分布</p><p><strong>缺点</strong>：dataNode 划分节点是事先建好的，需要扩展时比较麻烦。</p><p>配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-prefixpattern&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-prefixpattern<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-prefixpattern&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByPrefixPattern&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-prefixpattern.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefixLength&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;patternValue&quot;</span>&gt;</span>96<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>partition-prefixpattern.txt 配置如下: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># range start-end ,data node index</span><br><span class="line"># ASCII</span><br><span class="line"># 48-57=0-9</span><br><span class="line"># 64、65-90=@、A-Z</span><br><span class="line"># 97-122=a-z</span><br><span class="line">###### first host configuration</span><br><span class="line">0-32=0</span><br><span class="line">33-64=1</span><br><span class="line">65-96=2</span><br></pre></td></tr></table></figure><p>配置说明: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>class</td><td>指定该分片算法对应的类</td></tr><tr><td>mapFile</td><td>对应的外部配置文件</td></tr><tr><td>prefixLength</td><td>截取的位数; 将该字段获取前prefixLength位所有ASCII码的和, 进行求模sum%patternValue ,获取的值，在通配范围内的即分片数 ;</td></tr><tr><td>patternValue</td><td>求模基数</td></tr></tbody></table><p>如 : </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">字符串 :</span><br><span class="line">gf89f9a</span><br><span class="line"></span><br><span class="line">截取字符串的前5位进行ASCII的累加运算 : </span><br><span class="line">g - 103</span><br><span class="line">f - 102</span><br><span class="line">8 - 56</span><br><span class="line">9 - 57</span><br><span class="line">f - 102</span><br><span class="line"></span><br><span class="line">    sum求和 : 103 + 102 + + 56 + 57 + 102 = 420</span><br><span class="line">    求模 : 420 % 96 = 36</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>附录 ASCII码表 : </p><p><img src="G:\BaiduNetdiskDownload\MyCat资料\文档\文档\assets\1577267028771.png" alt="1577267028771"> </p><p><strong>测试:</strong></p><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_u&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-prefixpattern&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 创建表</span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_u` (</span><br><span class="line">      username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">      age <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">default</span> <span class="number">0</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">      <span class="keyword">PRIMARY</span> KEY (`username`)</span><br><span class="line">    ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 插入数据</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_u (username,age) <span class="keyword">values</span>(<span class="string">&#x27;Test100001&#x27;</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_u (username,age) <span class="keyword">values</span>(<span class="string">&#x27;Test200001&#x27;</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_u (username,age) <span class="keyword">values</span>(<span class="string">&#x27;Test300001&#x27;</span>,<span class="number">19</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_u (username,age) <span class="keyword">values</span>(<span class="string">&#x27;Test400001&#x27;</span>,<span class="number">25</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_u (username,age) <span class="keyword">values</span>(<span class="string">&#x27;Test500001&#x27;</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure><h4 id="应用指定算法"><a href="#应用指定算法" class="headerlink" title="应用指定算法"></a>应用指定算法</h4><p>由运行阶段由应用自主决定路由到那个分片 , 直接根据字符子串（必须是数字）计算分片号 , 配置如下 : </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-substring&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-substring<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-substring&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionDirectBySubString&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;startIndex&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- zero-based --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;size&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultPartition&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置说明: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>class</td><td>指定该分片算法对应的类</td></tr><tr><td>startIndex</td><td>字符子串起始索引</td></tr><tr><td>size</td><td>字符长度</td></tr><tr><td>partitionCount</td><td>分区(分片)数量</td></tr><tr><td>defaultPartition</td><td>默认分片(在分片数量定义时, 字符标示的分片编号不在分片数量内时,使用默认分片)</td></tr></tbody></table><p>示例说明 : </p><p>id=05-100000002 , 在此配置中代表根据id中从 startIndex=0，开始，截取siz=2位数字即05，05就是获取的分区，如果没传默认分配到defaultPartition 。</p><p><strong>测试:</strong></p><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_app&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-substring&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 创建表</span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_app` (</span><br><span class="line">      id <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">      name <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;名称&#x27;</span>,</span><br><span class="line">      <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">    ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_app (id,name) <span class="keyword">values</span>(<span class="string">&#x27;00-00001&#x27;</span>,<span class="string">&#x27;Testx00001&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_app (id,name) <span class="keyword">values</span>(<span class="string">&#x27;01-00001&#x27;</span>,<span class="string">&#x27;Test100001&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_app (id,name) <span class="keyword">values</span>(<span class="string">&#x27;01-00002&#x27;</span>,<span class="string">&#x27;Test200001&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_app (id,name) <span class="keyword">values</span>(<span class="string">&#x27;02-00001&#x27;</span>,<span class="string">&#x27;Test300001&#x27;</span>);</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_app (id,name) <span class="keyword">values</span>(<span class="string">&#x27;02-00002&#x27;</span>,<span class="string">&#x27;TesT400001&#x27;</span>);</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h4 id="字符串hash解析算法"><a href="#字符串hash解析算法" class="headerlink" title="字符串hash解析算法"></a>字符串hash解析算法</h4><p>截取字符串中的指定位置的子字符串, 进行hash算法， 算出分片 ， 配置如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-stringhash&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-stringhash<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-stringhash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByString&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>512<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- zero-based --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashSlice&quot;</span>&gt;</span>0:2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置说明: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>class</td><td>指定该分片算法对应的类</td></tr><tr><td>partitionLength</td><td>hash求模基数 ; length*count=1024 (出于性能考虑)</td></tr><tr><td>partitionCount</td><td>分区数</td></tr><tr><td>hashSlice</td><td>hash运算位 , 根据子字符串的hash运算 ; 0 代表 str.length() , -1 代表 str.length()-1 , 大于0只代表数字自身 ; 可以理解为substring（start，end），start为0则只表示0</td></tr></tbody></table><p><strong>测试:</strong> </p><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_strhash&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-stringhash&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 创建表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_strhash(</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">primary</span> key,</span><br><span class="line">content <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">)engine<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_strhash (name,content) <span class="keyword">VALUES</span>(<span class="string">&#x27;T1001&#x27;</span>, UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_strhash (name,content) <span class="keyword">VALUES</span>(<span class="string">&#x27;ROSE&#x27;</span>, UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_strhash (name,content) <span class="keyword">VALUES</span>(<span class="string">&#x27;JERRY&#x27;</span>, UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_strhash (name,content) <span class="keyword">VALUES</span>(<span class="string">&#x27;CRISTINA&#x27;</span>, UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_strhash (name,content) <span class="keyword">VALUES</span>(<span class="string">&#x27;TOMCAT&#x27;</span>, UUID());</span><br></pre></td></tr></table></figure><p>原理: </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150917.png" alt="image-20200112234530612"> </p><h4 id="一致性hash算法"><a href="#一致性hash算法" class="headerlink" title="一致性hash算法"></a>一致性hash算法</h4><p>一致性Hash算法有效的解决了分布式数据的拓容问题 , 配置如下: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;murmur&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMurmurHash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;seed&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;virtualBucketTimes&quot;</span>&gt;</span>160<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;weightMapFile&quot;&gt;weightMapFile&lt;/property&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;bucketMapPath&quot;&gt;/etc/mycat/bucketMapPath&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置说明: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>class</td><td>指定该分片算法对应的类</td></tr><tr><td>seed</td><td>创建murmur_hash对象的种子，默认0</td></tr><tr><td>count</td><td>要分片的数据库节点数量，必须指定，否则没法分片</td></tr><tr><td>virtualBucketTimes</td><td>一个实际的数据库节点被映射为这么多虚拟节点，默认是160倍，也就是虚拟节点数是物理节点数的160倍;virtualBucketTimes*count就是虚拟结点数量 ;</td></tr><tr><td>weightMapFile</td><td>节点的权重，没有指定权重的节点默认是1。以properties文件的格式填写，以从0开始到count-1的整数值也就是节点索引为key，以节点权重值为值。所有权重值必须是正整数，否则以1代替</td></tr><tr><td>bucketMapPath</td><td>用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的murmur hash值与物理节点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何东西</td></tr></tbody></table><p><strong>测试：</strong></p><p>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_order&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-murmur&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 创建表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_order(</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">primary</span> key,</span><br><span class="line">money <span class="type">int</span>(<span class="number">11</span>),</span><br><span class="line">content <span class="type">varchar</span>(<span class="number">200</span>)</span><br><span class="line">)engine<span class="operator">=</span>InnoDB ;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>). 插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">212</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">312</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">412</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">534</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">621</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">754563</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">8123</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">91213</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">23232</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">112321</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">21221</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">112132</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">12132</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">124321</span>, <span class="number">100</span> , UUID());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_order (id,money,content) <span class="keyword">VALUES</span>(<span class="number">212132</span>, <span class="number">100</span> , UUID());</span><br></pre></td></tr></table></figure><h4 id="日期分片算法"><a href="#日期分片算法" class="headerlink" title="日期分片算法"></a>日期分片算法</h4><p>按照日期来分片</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-date&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-date<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByDate&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2020-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sEndDate&quot;</span>&gt;</span>2020-12-31<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sPartionDay&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置说明: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>class</td><td>指定该分片算法对应的类</td></tr><tr><td>dateFormat</td><td>日期格式</td></tr><tr><td>sBeginDate</td><td>开始日期</td></tr><tr><td>sEndDate</td><td>结束日期，如果配置了结束日期，则代码数据到达了这个日期的分片后，会重复从开始分片插入</td></tr><tr><td>sPartionDay</td><td>分区天数，默认值 10 ，从开始日期算起，每个10天一个分区</td></tr></tbody></table><p>注意：配置规则的表的 dataNode 的分片，必须和分片规则数量一致，例如 2020-01-01 到 2020-12-31 ，每10天一个分片，一共需要37个分片。</p><h4 id="单月小时算法"><a href="#单月小时算法" class="headerlink" title="单月小时算法"></a>单月小时算法</h4><p>单月内按照小时拆分, 最小粒度是小时 , 一天最多可以有24个分片, 最小1个分片, 下个月从头开始循环, 每个月末需要手动清理数据。</p><p>配置如下 ： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-hour&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-hour<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-hour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.LatestMonthPartion&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;splitOneDay&quot;</span>&gt;</span>24<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置说明: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段 ； 字符串类型（yyyymmddHH）， 需要符合JAVA标准</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>splitOneDay</td><td>一天切分的分片数</td></tr></tbody></table><h4 id="自然月分片算法"><a href="#自然月分片算法" class="headerlink" title="自然月分片算法"></a>自然月分片算法</h4><p>使用场景为按照月份列分区, 每个自然月为一个分片, 配置如下: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-month&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-month<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-month&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMonth&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2020-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sEndDate&quot;</span>&gt;</span>2020-12-31<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置说明: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>class</td><td>指定该分片算法对应的类</td></tr><tr><td>dateFormat</td><td>日期格式</td></tr><tr><td>sBeginDate</td><td>开始日期</td></tr><tr><td>sEndDate</td><td>结束日期，如果配置了结束日期，则代码数据到达了这个日期的分片后，会重复从开始分片插入</td></tr></tbody></table><h4 id="日期范围hash算法"><a href="#日期范围hash算法" class="headerlink" title="日期范围hash算法"></a>日期范围hash算法</h4><p>其思想和范围取模分片一样，先根据日期进行范围分片求出分片组，再根据时间hash使得短期内数据分布的更均匀 ;</p><p>优点 : 可以避免扩容时的数据迁移，又可以一定程度上避免范围分片的热点问题</p><p>注意 : 要求日期格式尽量精确些，不然达不到局部均匀的目的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;range-date-hash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>range-date-hash<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;range-date-hash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByRangeDateHash&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd HH:mm:ss<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2020-01-01 00:00:00<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;groupPartionSize&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sPartionDay&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置说明: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>columns</td><td>标识将要分片的表字段</td></tr><tr><td>algorithm</td><td>指定分片函数与function的对应关系</td></tr><tr><td>class</td><td>指定该分片算法对应的类</td></tr><tr><td>dateFormat</td><td>日期格式 , 符合Java标准</td></tr><tr><td>sBeginDate</td><td>开始日期 , 与 dateFormat指定的格式一致</td></tr><tr><td>groupPartionSize</td><td>每组的分片数量</td></tr><tr><td>sPartionDay</td><td>代表多少天为一组</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> MyCat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyCat </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP三次握手</title>
      <link href="2021/06/24/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
      <url>2021/06/24/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="握手的过程"><a href="#握手的过程" class="headerlink" title="握手的过程"></a>握手的过程</h4><p>1、第一次握手：客户端给服务器发送一个 SYN 报文。</p><p>2、第二次握手：服务器收到 SYN 报文之后，会应答一个 SYN+ACK 报文。</p><p>3、第三次握手：客户端收到 SYN+ACK 报文之后，会回应一个 ACK 报文。</p><p>4、服务器收到 ACK 报文之后，三次握手建立完成。</p><h4 id="为什么需要三次握手而不是两次"><a href="#为什么需要三次握手而不是两次" class="headerlink" title="为什么需要三次握手而不是两次"></a>为什么需要三次握手而不是两次</h4><p>第一次握手：客户端发送网络包，服务端收到了。这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</p><p>第二次握手：服务端发包，客户端收到了。这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常。</p><p>第三次握手：客户端发包，服务端收到了。这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。</p><p>因此，需要三次握手才能确认双方的接收与发送能力是否正常。</p><h4 id="三次握手的具体描述"><a href="#三次握手的具体描述" class="headerlink" title="三次握手的具体描述"></a>三次握手的具体描述</h4><p>1、第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 **SN(c)**。此时客户端处于 <strong>SYN_Send</strong> 状态。</p><p>2、第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)，同时会把客户端的 ISN + 1 作为 ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 <strong>SYN_REVD</strong> 的状态。</p><p>3、第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 <strong>establised</strong> 状态。</p><p>4、服务器收到 ACK 报文之后，也处于 <strong>establised 状态</strong>，此时，双方以建立起了链接。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210624164103.png" alt="img"></p><h4 id="三次握手的作用"><a href="#三次握手的作用" class="headerlink" title="三次握手的作用"></a>三次握手的作用</h4><p>1、确认双方的接受能力、发送能力是否正常。</p><p>2、指定自己的初始化序列号，为后面的可靠传送做准备。</p><h4 id="（ISN）是固定的吗"><a href="#（ISN）是固定的吗" class="headerlink" title="（ISN）是固定的吗"></a>（ISN）是固定的吗</h4><p>三次握手的一个重要功能是客户端和服务端交换ISN(Initial Sequence Number), 以便让对方知道接下来接收数据的时候如何按序列号组装数据。</p><p>如果ISN是固定的，攻击者很容易猜出后续的确定号，因此 ISN 是动态生成的</p><h4 id="半连接队列"><a href="#半连接队列" class="headerlink" title="半连接队列"></a>半连接队列</h4><p>服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为<strong>半连接队列</strong>。当然还有一个<strong>全连接队列</strong>，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。</p><blockquote><p>这里在补充一点关于<strong>SYN-ACK 重传次数</strong>的问题：　服务器发送完SYN－ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传，如果重传次数超 过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。注意，每次重传等待的时间不一定相同，一般会是指数增长，例如间隔时间为 1s, 2s, 4s, 8s, ….</p></blockquote><h4 id="三次握手过程中可以携带数据吗"><a href="#三次握手过程中可以携带数据吗" class="headerlink" title="三次握手过程中可以携带数据吗"></a>三次握手过程中可以携带数据吗</h4><p>很多人可能会认为三次握手都不能携带数据，其实第三次握手的时候，是可以携带数据的。也就是说，第一次、第二次握手不可以携带数据，而第三次握手是可以携带数据的。</p><p>为什么这样呢？大家可以想一个问题，假如第一次握手可以携带数据的话，如果有人要恶意攻击服务器，那他每次都在第一次握手中的 SYN 报文中放入大量的数据，因为攻击者根本就不理服务器的接收、发送能力是否正常，然后疯狂着重复发 SYN 报文的话，这会让服务器花费很多时间、内存空间来接收这些报文。也就是说，第一次握手可以放数据的话，其中一个简单的原因就是会让服务器更加容易受到攻击了。</p><p>而对于第三次的话，此时客户端已经处于 established 状态，也就是说，对于客户端来说，他已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的了，所以能携带数据页没啥毛病。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP四次挥手</title>
      <link href="2021/06/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>2021/06/24/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="四次挥手过程"><a href="#四次挥手过程" class="headerlink" title="四次挥手过程"></a>四次挥手过程</h4><p>刚开始双方都处于 establised 状态，假如是客户端先发起关闭请求，则：</p><p>1、第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于<strong>FIN_WAIT1</strong>状态。</p><p>2、第二次握手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 + 1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 <strong>CLOSE_WAIT</strong>状态。</p><p>3、第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 <strong>LAST_ACK</strong> 的状态。</p><p>4、第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 + 1 作为自己 ACK 报文的序列号值，此时客户端处于 <strong>TIME_WAIT</strong> 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态</p><p>5、服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210624164704.png" alt="img"></p><p>这里特别需要主要的就是<strong>TIME_WAIT</strong>这个状态了，这个是面试的高频考点，就是要理解，为什么客户端发送 ACK 之后不直接关闭，而是要等一阵子才关闭。这其中的原因就是，要确保服务器是否已经收到了我们的 ACK 报文，如果没有收到的话，服务器会重新发 FIN 报文给客户端，客户端再次收到 ACK 报文之后，就知道之前的 ACK 报文丢失了，然后再次发送 ACK 报文。</p><p>至于 TIME_WAIT 持续的时间至少是一个报文的来回时间。一般会设置一个计时，如果过了这个计时没有再次收到 FIN 报文，则代表对方成功就是 ACK 报文，此时处于 CLOSED 状态。</p><blockquote><p>LISTEN – 侦听来自远方TCP端口的连接请求；</p><p>SYN-SENT -在发送连接请求后等待匹配的连接请求；</p><p>SYN-RECEIVED – 在收到和发送一个连接请求后等待对连接请求的确认；</p><p>ESTABLISHED- 代表一个打开的连接，数据可以传送给用户；</p><p>FIN-WAIT-1 – 等待远程TCP的连接中断请求，或先前的连接中断请求的确认；</p><p>FIN-WAIT-2 – 从远程TCP等待连接中断请求；</p><p>CLOSE-WAIT – 等待从本地用户发来的连接中断请求；</p><p>CLOSING -等待远程TCP对连接中断的确认；</p><p>LAST-ACK – 等待原来发向远程TCP的连接中断请求的确认；</p><p>TIME-WAIT -等待足够的时间以确保远程TCP接收到连接中断请求的确认；</p><p>CLOSED – 没有任何连接状态；</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210624164823.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络五层模型</title>
      <link href="2021/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BA%94%E5%B1%82%E6%A8%A1%E5%9E%8B/"/>
      <url>2021/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BA%94%E5%B1%82%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p> 天各一方的两台计算机是如何通信的呢？在成千上万的计算机中，为什么一台计算机能够准确的寻找到另外一台计算机，并且把数据发送给它呢？</p><p>可能很多人都听说过网络通信的 5 层模型，但是可能并不是很清楚为什么需要五层模型，五层模型负责的任务也有可能经常混淆。下面是网络通信的五层模型</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210624155122.png" alt="img"></p><h4 id="1-物理层"><a href="#1-物理层" class="headerlink" title="1. 物理层"></a>1. 物理层</h4><p>一台计算机与另一台计算机要进行通信，第一件要做的事是什么？当然是把这台计算机与另外的其他计算机连起来。这样，我们才能把数据传输过去。例如可以通过光纤，电缆，双绞线等介质把他们连接起来。然后才能进行通信。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210624155544.png" alt="img"></p><p>也就是说，物理层负责把两台计算机连起来，然后在计算机之间通过高低电频来传送0,1这样的电信号。</p><h4 id="2-数据链路层"><a href="#2-数据链路层" class="headerlink" title="2. 数据链路层"></a>2. 数据链路层</h4><p>前面说了，物理层它只是单纯的负责把计算机连接起来。并且在计算机之间传输0，1这样的电信号。如果是这些0，1组合的传送毫无规则的话，计算机是解读不了的，一大堆0,1谁知道是什么东西。</p><p>因此，我们需要制定一套规则来进行0,1的传送。例如多少个电信号为一组，每一组信号应该如何标识才能让计算机读懂等等。</p><p>于是，有了以太网协议。</p><h5 id="1-以太网协议"><a href="#1-以太网协议" class="headerlink" title="1. 以太网协议"></a>1. 以太网协议</h5><p>以太网协议规定，一组电信号构成一个数据包，我们把这个数据包称之为帧。每一个帧由标头（Head）和数据（Data）两部分组成。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210624160509.png" alt="img"></p><p>帧的大小一般为 64 – 1518 个字节。假如需要传送的数据很大的话，就分成多个桢来进行传送。</p><p>对于表头和数据这两个部分，他们存放的都是一些什么数据呢？我猜你眯着眼睛都能想到他们应该放什么数据。 毫无疑问，我们至少得知道这个桢是谁发送，发送给谁的等这些信息吧？所以标头部分主要是一些说明数据，例如发送者，接收者等信息。而数据部分则是这个数据包具体的，想给接守者的内容。</p><p>大家想一个问题，一个桢的长度是 64~1518 个字节，也就是说桢的长度不是固定的，那你觉得标头部分的字节长度是固定的吗？它当然是固定的啊，假如不是固定的，每个桢都是单独发的，那计算机怎么知道标头是几个字节，数据是几个字节呢。所以标头部分的字节是固定的，并且固定为18个字节。</p><p>把一台计算的的数据通过物理层和链路层发送给另一台计算机，究竟是谁发给谁的，计算机与计算机之间如何区分，，你总得给他们一个唯一的标识吧？</p><p>于是，MAC 地址出现了。</p><h5 id="2-MAC-地址"><a href="#2-MAC-地址" class="headerlink" title="2. MAC 地址"></a>2. MAC 地址</h5><p>连入网络的每一个计算机都会有网卡接口，每一个网卡都会有一个唯一的地址，这个地址就叫做 MAC 地址。计算机之间的数据传送，就是通过 MAC 地址来唯一寻找、传送的。</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210624161440.png" alt="img" style="zoom:67%;" /><p>MAC地址 由 6 个字节（48位）所构成，在网卡生产时就被唯一标识了。</p><h5 id="3-广播与ARP协议"><a href="#3-广播与ARP协议" class="headerlink" title="3. 广播与ARP协议"></a>3. 广播与ARP协议</h5><h6 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h6><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210624161814.png" alt="img"></p><p>如图，假如计算机 A 知道了计算机 B 的 MAC 地址，然后计算机 A 想要给计算机 B 传送数据，虽然计算机 A 知道了计算机 B 的 MAC 地址，可是它要怎么给它传送数据呢？计算机 A 不仅连着计算机 B，而且计算机 A 也还连着其他的计算机。 虽然计算机 A 知道计算机 B 的 MAC 地址，可是计算机 A 却不知道知道计算机 B 是分布在哪边路线上，为了解决这个问题，于是，有了<strong>广播</strong>的出现。</p><p>在同一个<strong>子网</strong>中，计算机 A 要向计算机 B 发送一个数据包，这个数据包会包含接收者的 MAC 地址。当发送时，计算机 A 是通过<strong>广播</strong>的方式发送的，这时同一个子网中的计算机 C, D 也会收到这个数据包的，然后收到这个数据包的计算机，会把数据包的 MAC 地址取出来，与自身的 MAC 地址对比，如果两者相同，则接受这个数据包，否则就丢弃这个数据包。这种发送方式我们称之为广播,就像我们平时在广场上通过广播的形式呼叫某个人一样，如果这个名字是你，你就理会一下，如果不是你，你就当作听不见。</p><h6 id="ARP-协议"><a href="#ARP-协议" class="headerlink" title="ARP 协议"></a>ARP 协议</h6><p>那么问题来了，计算机 A 是如何知道计算机 B 的 MAC 地址的呢？这个时候就得由 ARP 协议这个家伙来解决了，不过 ARP 协议会涉及到IP地址，我们下面才会扯到IP地址。因此我们先放着，就当作是有这么一个 ARP 协议，通过它我们可以知道子网中其他计算机的 MAC 地址。</p><h4 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3. 网络层"></a>3. 网络层</h4><p>上面我们有说到子网这个关键词，实际上我们所处的网络，是由无数个子网络构成的。广播的时候，也只有同一个子网里面的计算机能够收到。</p><p>假如没有子网这种划分的话，计算机 A 通过广播的方式发一个数据包给计算机 B , 其他所有计算机也都能收到这个数据包，然后进行对比再舍弃。世界上有那么多它计算机，每一台计算机都能收到其他所有计算机的数据包，那就不得了了。那还不得奔溃。 因此产生了<strong>子网</strong>这么一个东西。</p><p>那么问题来了，我们如何区分哪些 MAC 地址是属于同一个子网的呢？假如是同一个子网，那我们就用广播的形式把数据传送给对方，如果不是同一个子网的，我们就会把数据发给网关，让网关进行转发。</p><p>为了解决这个问题，于是，有了 IP 协议。</p><h6 id="1-IP协议"><a href="#1-IP协议" class="headerlink" title="1. IP协议"></a>1. IP协议</h6><p>IP协议，它所定义的地址，我们称之为<strong>IP地址</strong>。IP协议有两种版本，一种是 IPv4,另一种是 IPv6。不过我们目前大多数用的还是 IPv4，我们现在也只讨论 IPv4 这个版本的协议。</p><p>这个 IP 地址由 32 位的二进制数组成，我们一般把它分成4段的十进制表示，地址范围为0.0.0.0~255.255.255.255。</p><p>每一台想要联网的计算机都会有一个IP地址。这个IP地址被分为两部分，前面一部分代表<strong>网络部分</strong>，后面一部分代表<strong>主机部分</strong>。并且网络部分和主机部分所占用的二进制位数是不固定的。</p><p>假如两台计算机的网络部分是一模一样的，我们就说这两台计算机是处于同一个子网中。例如 192.168.43.1 和 192.168.43.2, 假如这两个 IP 地址的网络部分为 24 位，主机部分为 8 位。那么他们的网络部分都为 192.168.43，所以他们处于同一个子网中。</p><p>可是问题来了，你怎么知道网络部分是占几位，主机部分又是占几位呢？也就是说，单单从两台计算机的IP地址，我们是无法判断他们的是否处于同一个子网中的。</p><p>这就引申出了另一个关键词————<strong>子网掩码</strong>。子网掩码和IP地址一样也是 32 位二进制数，不过它的网络部分规定全部为 1，主机部分规定全部为 0.也就是说，假如上面那两个IP地址的网络部分为 24 位，主机部分为 8 位的话，那他们的子网掩码都为 11111111.11111111.11111111.00000000，即255.255.255.0。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210624161935.png" alt="img"></p><p>那有了子网掩码，如何来判端IP地址是否处于同一个子网中呢。显然，知道了子网掩码，相当于我们知道了网络部分是几位，主机部分是几位。我们只需要把 IP 地址与它的子网掩码做与(and)运算，然后把各自的结果进行比较就行了，如果比较的结果相同，则代表是同一个子网，否则不是同一个子网。</p><p>例如，192.168.43.1和192.168.43.2的子码掩码都为255.255.255.0，把IP与子码掩码相与，可以得到他们都为192.168.43.0，进而他们处于同一个子网中。</p><h6 id="2-ARP协议"><a href="#2-ARP协议" class="headerlink" title="2.  ARP协议"></a>2.  ARP协议</h6><p>有了上面IP协议的知识，我们回来讲一下ARP协议。</p><p>有了两台计算机的IP地址与子网掩码，我们就可以判断出它们是否处于同一个子网之中了。</p><p>假如他们处于同一个子网之中，计算机A要给计算机B发送数据时。我们可以通过ARP协议来得到计算机B的MAC地址。</p><p>ARP协议也是通过广播的形式给同一个子网中的每台电脑发送一个数据包(当然，这个数据包会包含接收方的IP地址)。对方收到这个数据包之后，会取出IP地址与自身的对比，如果相同，则把自己的MAC地址回复给对方，否则就丢弃这个数据包。这样，计算机A就能知道计算机B的MAC地址了。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210624162151.png" alt="img"></p><p>可能有人会问，知道了MAC地址之后，发送数据是通过广播的形式发送，询问对方的MAC地址也是通过广播的形式来发送，那其他计算机怎么知道你是要传送数据还是要询问MAC地址呢？其实在询问MAC地址的数据包中，在对方的MAC地址这一栏中，填的是一个特殊的MAC地址，其他计算机看到这个特殊的MAC地址之后，就能知道广播想干嘛了。</p><p>假如两台计算机的IP不是处于同一个子网之中，这个时候，我们就会把数据包发送给网关，然后让网关让我们进行转发传送</p><h6 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h6><p>这里再说一个问题，我们是如何知道对方计算机的IP地址的呢？这个问题可能有人会觉得很白痴，心想，当然是计算机的操作者来进行输入了。这没错，当我们想要访问某个网站的时候，我们可以输入IP来进行访问，但是我相信绝大多数人是输入一个网址域名的，例如访问百度是输入 <a href="http://www.baidu.com/">www.baidu.com</a> 这个域名。其实当我们输入这个域名时，会有一个叫做DNS服务器的家伙来帮我们解析这个域名，然后返回这个域名对应的IP给我们的。</p><blockquote><p> 因此，网络层的功能就是让我们在茫茫人海中，能够找到另一台计算机在哪里，是否属于同一个子网等。</p></blockquote><h4 id="4-传输层"><a href="#4-传输层" class="headerlink" title="4. 传输层"></a>4. 传输层</h4><p>通过物理层、数据链路层以及网络层的互相帮助，我们已经把数据成功从计算机A传送到计算机B了，可是，计算机B里面有各种各样的应用程序，计算机该如何知道这些数据是给谁的呢？</p><p>这个时候，**端口(Port)**这个家伙就上场了，也就是说，我们在从计算机A传数据给计算表B的时候，还得指定一个端口，以供特定的应用程序来接受处理。</p><p>也就是说，传输层的功能就是建立端口到端口的通信。相比网络层的功能是建立主机到主机的通信。</p><p>也就是说，只有有了IP和端口，我们才能进行准确着通信。这个时候可能有人会说，我输入IP地址的时候并没有指定一个端口啊。其实呢，对于有些传输协议，已经有设定了一些默认端口了。例如http的传输默认端口是80，这些端口信息也会包含在数据包里的。</p><p>传输层最常见的两大协议是 TCP 协议和 UDP 协议，其中 TCP 协议与 UDP 最大的不同就是 TCP 提供可靠的传输，而 UDP 提供的是不可靠传输。</p><h4 id="5-应用层"><a href="#5-应用层" class="headerlink" title="5. 应用层"></a>5. 应用层</h4><p>终于说到应用层了，应用层这一层最接近我们用户了。</p><p>虽然我们收到了传输层传来的数据，可是这些传过来的数据五花八门，有html格式的，有mp4格式的，各种各样。你确定你能看的懂？</p><p>因此我们需要指定这些数据的格式规则，收到后才好解读渲染。例如我们最常见的 Http 数据包中，就会指定该数据包是 什么格式的文件了。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyCat(五)---性能监控</title>
      <link href="2021/06/23/MyCat(%E4%BA%94)---%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
      <url>2021/06/23/MyCat(%E4%BA%94)---%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="MyCat-性能监控"><a href="#MyCat-性能监控" class="headerlink" title="MyCat 性能监控"></a>MyCat 性能监控</h3><h4 id="MyCat-web简介"><a href="#MyCat-web简介" class="headerlink" title="MyCat-web简介"></a>MyCat-web简介</h4><p>Mycat-web 是 Mycat 可视化运维的管理和监控平台，弥补了 Mycat 在监控上的空白。帮 Mycat 分担统计任务和配置管理任务。Mycat-web 引入了 ZooKeeper 作为配置中心，可以管理多个节点。Mycat-web 主要管理和监控 Mycat 的流量、连接、活动线程和内存等，具备 IP 白名单、邮件告警等模块，还可以统计 SQL 并分析慢 SQL 和高频 SQL 等。为优化 SQL 提供依据。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150949.png" alt="1577358192118"> </p><h4 id="MyCat-web下载"><a href="#MyCat-web下载" class="headerlink" title="MyCat-web下载"></a>MyCat-web下载</h4><p>下载地址 : <a href="http://dl.mycat.io/">http://dl.mycat.io/</a></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150953.png" alt="1577369790112"> </p><h4 id="Mycat-web安装配置"><a href="#Mycat-web安装配置" class="headerlink" title="Mycat-web安装配置"></a>Mycat-web安装配置</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>1). 安装Zookeeper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">A. 上传安装包 </span><br><span class="line">alt + p -----&gt; put D:\tmp\zookeeper-3.4.11.tar.gz</span><br><span class="line"></span><br><span class="line">B. 解压</span><br><span class="line">tar -zxvf zookeeper-3.4.11.tar.gz -C /usr/local/</span><br><span class="line"></span><br><span class="line">C. 创建数据存放目录</span><br><span class="line">mkdir data</span><br><span class="line"></span><br><span class="line">D. 修改配置文件名称并配置</span><br><span class="line">mv zoo_sample.cfg zoo.cfg</span><br><span class="line"></span><br><span class="line">E. 配置数据存放目录</span><br><span class="line">dataDir=/usr/local/zookeeper-3.4.11/data</span><br><span class="line"></span><br><span class="line">F. 启动Zookeeper</span><br><span class="line">bin/zkServer.sh start</span><br></pre></td></tr></table></figure><p>2). 安装Mycat-web</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">A. 上传安装包 </span><br><span class="line">alt + p --------&gt; put D:\tmp\Mycat-web-1.0-SNAPSHOT-20170102153329-linux.tar.gz</span><br><span class="line"></span><br><span class="line">B. 解压</span><br><span class="line">tar -zxvf Mycat-web-1.0-SNAPSHOT-20170102153329-linux.tar.gz -C /usr/local/</span><br><span class="line"></span><br><span class="line">C. 目录介绍</span><br><span class="line">    drwxr-xr-x. 2 root root  4096 Oct 19  2015 etc         ----&gt; jetty配置文件</span><br><span class="line">    drwxr-xr-x. 3 root root  4096 Oct 19  2015 lib         ----&gt; 依赖jar包</span><br><span class="line">    drwxr-xr-x. 7 root root  4096 Jan  1  2017 mycat-web   ----&gt; mycat-web项目</span><br><span class="line">    -rwxr-xr-x. 1 root root   116 Oct 19  2015 readme.txt</span><br><span class="line">    -rwxr-xr-x. 1 root root 17125 Oct 19  2015 start.jar   ----&gt; 启动jar</span><br><span class="line">    -rwxr-xr-x. 1 root root   381 Oct 19  2015 start.sh    ----&gt; linux启动脚本</span><br><span class="line"></span><br><span class="line">D. 启动</span><br><span class="line">sh start.sh</span><br><span class="line"></span><br><span class="line">E. 访问</span><br><span class="line">http://192.168.192.147:8082/mycat</span><br></pre></td></tr></table></figure><p>如果Zookeeper与Mycat-web不在同一台服务器上 , 需要设置Zookeeper的地址 ; 在/usr/local/mycat-web/mycat-web/WEB-INF/classes/mycat.properties文件中配置 : </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628150958.png" alt="1577370960657"> </p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151002.png" alt="1577372353498"> </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151006.png" alt="1577372371549"> </p><h4 id="Mycat-web之MyCat性能监控"><a href="#Mycat-web之MyCat性能监控" class="headerlink" title="Mycat-web之MyCat性能监控"></a>Mycat-web之MyCat性能监控</h4><p>在 Mycat-web 上可以进行 Mycat 性能监控，例如：内存分享、流量分析、连接分析、活动线程分析等等。 如下图: </p><p>A. MyCat内存分析: </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151009.png" alt="1577373437531">  </p><p>MyCat的内存分析 , 反映了当前的内存使用情况与历史时间段的峰值、平均值。</p><p>B. MyCat流量分析: </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151013.png" alt="1577373861622"> </p><p>MyCat流量分析统计了历史时间段的流量峰值、当前值、平均值，是MyCat数据传输的重要指标， In代表输入， Out代表输出。</p><p>C. MyCat连接分析</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151017.png" alt="1577374030291"> </p><p>MyCat连接分析, 反映了MyCat的连接数 </p><p>D. MyCat TPS分析</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151021.png" alt="1577374126073"> </p><p>MyCat TPS 是并发性能的重要参数指标, 指系统在每秒内能够处理的请求数量。 MyCat TPS的值越高 , 代表MyCat单位时间内能够处理的请求就越多, 并发能力也就越高。</p><p>E. MyCat活动线程分析反映了MyCat线程的活动情况。</p><p>F. MyCat缓存队列分析, 反映了当前在缓存队列中的任务数量。</p><h4 id="Mycat-web之MySQL性能监控指标"><a href="#Mycat-web之MySQL性能监控指标" class="headerlink" title="Mycat-web之MySQL性能监控指标"></a>Mycat-web之MySQL性能监控指标</h4><p>1). MySQL配置</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151026.png" alt="1577374634946"> </p><p>2). MySQL监控指标</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151033.png" alt="1577374588708"> </p><p>可以通过MySQL服务监控, 检测每一个MySQL节点的运行状态, 包含缓存命中率 、增删改查比例、流量统计、慢查询比例、线程、临时表等相关性能数据。</p><h4 id="Mycat-web之SQL监控"><a href="#Mycat-web之SQL监控" class="headerlink" title="Mycat-web之SQL监控"></a>Mycat-web之SQL监控</h4><p>1). SQL 统计</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151037.png" alt="1577374982024"> </p><p>2). SQL表分析</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151040.png" alt="1577375016852"> </p><p>3). SQL监控</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151044.png" alt="1577375043787">  </p><p>4). 高频SQL</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151047.png" alt="1577375072881"> </p><p>5). 慢SQL统计</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151051.png" alt="1577375100383"> </p><p>6). SQL解析</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151054.png" alt="1577375162928"> </p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> MyCat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyCat </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyCat(六)---读写分离</title>
      <link href="2021/06/22/MyCat(%E5%85%AD)---%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
      <url>2021/06/22/MyCat(%E5%85%AD)---%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="MySQL主从复制原理"><a href="#MySQL主从复制原理" class="headerlink" title="MySQL主从复制原理"></a>MySQL主从复制原理</h4><p>复制是指将主数据库的DDL 和 DML 操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步。</p><p>MySQL支持一台主库同时向多台从库进行复制， 从库同时也可以作为其他从服务器的主库，实现链状复制。</p><p>MySQL主从复制的原理如下 : </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151100.png" alt="image-20200103093716416"> </p><p>从上层来看，复制分成三步：</p><ul><li><p>Master 主库在事务提交时，会把数据变更作为时间 Events 记录在二进制日志文件 Binlog 中。</p></li><li><p>主库推送二进制日志文件 Binlog 中的日志事件到从库的中继日志 Relay Log 。</p></li><li><p>slave重做中继日志中的事件，将改变反映它自己的数据。</p></li></ul><p>MySQL 复制的优点：</p><ul><li>主库出现问题，可以快速切换到从库提供服务。</li><li>可以在从库上执行查询操作，从主库中更新，实现读写分离，降低主库的访问压力。</li><li>可以在从库中执行备份，以避免备份期间影响主库的服务。</li></ul><h4 id="MySQL一主一从搭建"><a href="#MySQL一主一从搭建" class="headerlink" title="MySQL一主一从搭建"></a>MySQL一主一从搭建</h4><p>准备的两台机器: </p><table><thead><tr><th>MySQL</th><th>IP</th><th>端口号</th></tr></thead><tbody><tr><td>Master</td><td>192.168.192.157</td><td>3306</td></tr><tr><td>Slave</td><td>192.168.192.158</td><td>3306</td></tr></tbody></table><h5 id="master"><a href="#master" class="headerlink" title="master"></a>master</h5><p>1） 在master 的配置文件（/usr/my.cnf）中，配置如下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql 服务ID,保证整个集群环境中唯一</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#mysql binlog 日志的存储路径和文件名</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">/var/lib/mysql/mysqlbin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置logbin格式</span></span><br><span class="line"><span class="attr">binlog_format</span>=<span class="string">STATEMENT</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#是否只读,1 代表只读, 0 代表读写</span></span><br><span class="line"><span class="meta">read-only</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#忽略的数据, 指不需要同步的数据库</span></span><br><span class="line"><span class="comment">#binlog-ignore-db=mysql</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#指定同步的数据库</span></span><br><span class="line"><span class="meta">binlog-do-db</span>=<span class="string">db01</span></span><br></pre></td></tr></table></figure><p>2） 执行完毕之后，需要重启Mysql：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart ;</span><br></pre></td></tr></table></figure><p>3） 创建同步数据的账户，并且进行授权操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;192.168.192.158&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;itcast&#x27;</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>4） 查看master状态：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151105.png" alt="image-20200103102209631"> </p><p>字段含义:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File : 从哪个日志文件开始推送日志文件 </span><br><span class="line">Position ： 从哪个位置开始推送日志</span><br><span class="line">Binlog_Ignore_DB : 指定不需要同步的数据库</span><br></pre></td></tr></table></figure><h5 id="slave"><a href="#slave" class="headerlink" title="slave"></a>slave</h5><p>1） 在 slave 端配置文件/usr/my.cnf中，配置如下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql服务端ID,唯一</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#指定binlog日志</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">/var/lib/mysql/mysqlbin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#启用中继日志</span></span><br><span class="line"><span class="meta">relay-log</span>=<span class="string">mysql-relay</span></span><br></pre></td></tr></table></figure><p>2）  执行完毕之后，需要重启Mysql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart;</span><br></pre></td></tr></table></figure><p>3） 执行如下指令 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span> <span class="string">&#x27;192.168.192.157&#x27;</span>, master_user<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>, master_password<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>, master_log_file<span class="operator">=</span><span class="string">&#x27;mysqlbin.000001&#x27;</span>, master_log_pos<span class="operator">=</span><span class="number">413</span>;</span><br></pre></td></tr></table></figure><p>指定当前从库对应的主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置开始同步推送日志。</p><p>4） 开启同步操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure><p> <img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151110.png" alt="image-20200103144903105">  </p><p>5） 停止同步操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure><h5 id="验证主从同步"><a href="#验证主从同步" class="headerlink" title="验证主从同步"></a>验证主从同步</h5><p>1） 在主库中创建数据库，创建表，并插入数据 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">user</span> db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">sex <span class="type">varchar</span>(<span class="number">1</span>),</span><br><span class="line"><span class="keyword">primary</span> key (id)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Trigger&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Dawn&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2） 在从库中查询数据，进行验证 ：</p><p>在从库中，可以查看到刚才创建的数据库：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151115.png" alt="image-20200103103029311">  </p><p>在该数据库中，查询user表中的数据：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151118.png" alt="image-20200103103049675">  </p><h4 id="MyCat一主一从读写分离"><a href="#MyCat一主一从读写分离" class="headerlink" title="MyCat一主一从读写分离"></a>MyCat一主一从读写分离</h4><h5 id="读写分离原理"><a href="#读写分离原理" class="headerlink" title="读写分离原理"></a>读写分离原理</h5><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151122.png" alt="image-20200103140249789"> </p><p>读写分离,简单地说是把对数据库的读和写操作分开,以对应不同的数据库服务器。主数据库提供写操作，从数据库提供读操作，这样能有效地减轻单台数据库的压力。</p><p>通过MyCat即可轻易实现上述功能，不仅可以支持MySQL，也可以支持Oracle和SQL Server。</p><p>MyCat控制后台数据库的读写分离和负载均衡由schema.xml文件datahost标签的balance属性控制。</p><h5 id="读写分离配置"><a href="#读写分离配置" class="headerlink" title="读写分离配置"></a>读写分离配置</h5><p>配置如下： </p><p>1). 检查MySQL的主从复制是否运行正常 .</p><p>2). 修改MyCat 的conf/schema.xml 配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;ITCAST&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db01&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.157:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.158:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3). 修改conf/server.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>ITCAST<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>ITCAST<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>ITCAST<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readOnly&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4). 配置完毕之后, 重启MyCat服务;</p><p>属性含义说明: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">checkSQLschema</span><br><span class="line">当该值设置为true时, 如果我们执行语句&quot;select * from test01.user ;&quot; 语句时, MyCat则会把schema字符去掉 , 可以避免后端数据库执行时报错 ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">balance</span><br><span class="line">负载均衡类型, 目前取值有4种:</span><br><span class="line"></span><br><span class="line">balance=&quot;0&quot; : 不开启读写分离机制 , 所有读操作都发送到当前可用的writeHost上.</span><br><span class="line"></span><br><span class="line">balance=&quot;1&quot; : 全部的readHost 与 stand by writeHost (备用的writeHost) 都参与select 语句的负载均衡,简而言之,就是采用双主双从模式(M1 --&gt; S1 , M2 --&gt; S2, 正常情况下，M2,S1,S2 都参与 select 语句的负载均衡。);</span><br><span class="line">    </span><br><span class="line">    balance=&quot;2&quot; : 所有的读写操作都随机在writeHost , readHost上分发</span><br><span class="line">    </span><br><span class="line">    balance=&quot;3&quot; : 所有的读请求随机分发到writeHost对应的readHost上执行, writeHost不负担读压力 ;balance=3 只在MyCat1.4 之后生效 .</span><br></pre></td></tr></table></figure><h5 id="验证读写分离"><a href="#验证读写分离" class="headerlink" title="验证读写分离"></a>验证读写分离</h5><p>修改balance的值, 查询MyCat中的逻辑表中的数据变化; </p><h4 id="MySQL双主双从搭建"><a href="#MySQL双主双从搭建" class="headerlink" title="MySQL双主双从搭建"></a>MySQL双主双从搭建</h4><h5 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h5><p>一个主机 Master1 用于处理所有写请求，它的从机 Slave1 和另一台主机 Master2 还有它的从机 Slave2 负责所有读请求。当 Master1 主机宕机后，Master2 主机负责写请求，Master1 、Master2 互为备机。架构图如下: </p><p> <img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151128.png" alt="image-20200103170452653"> </p><h5 id="双主双从配置"><a href="#双主双从配置" class="headerlink" title="双主双从配置"></a>双主双从配置</h5><p>准备的机器如下: </p><table><thead><tr><th>编号</th><th>角色</th><th>IP地址</th><th>端口号</th></tr></thead><tbody><tr><td>1</td><td>Master1</td><td>192.168.192.157</td><td>3306</td></tr><tr><td>2</td><td>Slave1</td><td>192.168.192.158</td><td>3306</td></tr><tr><td>3</td><td>Master2</td><td>192.168.192.159</td><td>3306</td></tr><tr><td>4</td><td>Slave2</td><td>192.168.192.160</td><td>3306</td></tr></tbody></table><p><strong>1). 双主机配置</strong></p><p>Master1配置: </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主服务器唯一ID</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#启用二进制日志</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">mysql-bin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 设置不要复制的数据库(可设置多个)</span></span><br><span class="line"><span class="comment"># binlog-ignore-db=mysql</span></span><br><span class="line"><span class="comment"># binlog-ignore-db=information_schema</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置需要复制的数据库</span></span><br><span class="line"><span class="meta">binlog-do-db</span>=<span class="string">db02</span></span><br><span class="line"><span class="meta">binlog-do-db</span>=<span class="string">db03</span></span><br><span class="line"><span class="meta">binlog-do-db</span>=<span class="string">db04</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置logbin格式</span></span><br><span class="line"><span class="attr">binlog_format</span>=<span class="string">STATEMENT</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 在作为从数据库的时候，有写入操作也要更新二进制日志文件</span></span><br><span class="line"><span class="attr">log-slave-updates</span></span><br></pre></td></tr></table></figure><p>Master2配置: </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主服务器唯一ID</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#启用二进制日志</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">mysql-bin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 设置不要复制的数据库(可设置多个)</span></span><br><span class="line"><span class="comment">#binlog-ignore-db=mysql</span></span><br><span class="line"><span class="comment">#binlog-ignore-db=information_schema</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置需要复制的数据库</span></span><br><span class="line"><span class="meta">binlog-do-db</span>=<span class="string">db02</span></span><br><span class="line"><span class="meta">binlog-do-db</span>=<span class="string">db03</span></span><br><span class="line"><span class="meta">binlog-do-db</span>=<span class="string">db04</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置logbin格式</span></span><br><span class="line"><span class="attr">binlog_format</span>=<span class="string">STATEMENT</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 在作为从数据库的时候，有写入操作也要更新二进制日志文件</span></span><br><span class="line"><span class="attr">log-slave-updates</span></span><br></pre></td></tr></table></figure><p><strong>2). 双从机配置</strong></p><p>Slave1配置: </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从服务器唯一ID</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#启用中继日志</span></span><br><span class="line"><span class="meta">relay-log</span>=<span class="string">mysql-relay</span></span><br></pre></td></tr></table></figure><p>Salve2配置:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从服务器唯一ID</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#启用中继日志</span></span><br><span class="line"><span class="meta">relay-log</span>=<span class="string">mysql-relay</span></span><br></pre></td></tr></table></figure><p><strong>3). 双主机、双从机重启 mysql 服务</strong></p><p><strong>4). 主机从机都关闭防火墙</strong></p><p><strong>5). 在两台主机上建立帐户并授权 slave</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#在主机MySQL里执行授权命令</span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;itcast&#x27;</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>查询Master1的状态 : </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151134.png" alt="image-20200104090901765"> </p><p>查询Master2的状态 :</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151137.png" alt="image-20200104090922386"> </p><p><strong>6). 在从机上配置需要复制的主机</strong></p><p>Slave1 复制 Master1，Slave2 复制 Master2</p><p>slave1 指令: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;192.168.192.157&#x27;</span>,</span><br><span class="line">MASTER_USER<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>,</span><br><span class="line">MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.000001&#x27;</span>,MASTER_LOG_POS<span class="operator">=</span><span class="number">409</span>;</span><br></pre></td></tr></table></figure><p>slave2 指令:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;192.168.192.159&#x27;</span>,</span><br><span class="line">MASTER_USER<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>,</span><br><span class="line">MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.000001&#x27;</span>,MASTER_LOG_POS<span class="operator">=</span><span class="number">409</span>;</span><br></pre></td></tr></table></figure><p><strong>7). 启动两台从服务器复制功能 , 查看主从复制的运行状态</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151141.png" alt="image-20200104091917814"> </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151144.png" alt="image-20200104091948213"> </p><p><strong>8). 两个主机互相复制</strong></p><p>Master2 复制 Master1，Master1 复制 Master2</p><p>Master1 执行指令: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;192.168.192.159&#x27;</span>,</span><br><span class="line">MASTER_USER<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>,</span><br><span class="line">MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.000001&#x27;</span>,MASTER_LOG_POS<span class="operator">=</span><span class="number">409</span>;</span><br></pre></td></tr></table></figure><p>Master2 执行指令:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;192.168.192.157&#x27;</span>,</span><br><span class="line">MASTER_USER<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>,</span><br><span class="line">MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.000001&#x27;</span>,MASTER_LOG_POS<span class="operator">=</span><span class="number">409</span>;</span><br></pre></td></tr></table></figure><p><strong>9). 启动两台主服务器复制功能 , 查看主从复制的运行状态</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151148.png" alt="image-20200104092654432"> </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151154.png" alt="image-20200104092741892"> </p><p><strong>10). 验证</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database db03;</span><br><span class="line"></span><br><span class="line">use db03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">sex <span class="type">varchar</span>(<span class="number">1</span>),</span><br><span class="line"><span class="keyword">primary</span> key (id)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Trigger&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Dawn&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Jack Ma&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Coco&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在Master1上创建数据库: </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151202.png" alt="image-20200104095232047"> </p><p>在Master1上创建表 :</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151206.png" alt="image-20200104095521070"> </p><p><strong>11). 停止从服务复制功能</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure><p><strong>12). 重新配置主从关系</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">reset master;</span><br></pre></td></tr></table></figure><h4 id="MyCat双主双从读写分离"><a href="#MyCat双主双从读写分离" class="headerlink" title="MyCat双主双从读写分离"></a>MyCat双主双从读写分离</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>修改&lt;dataHost&gt;的 balance属性，通过此属性配置读写分离的类型 ; </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;ITCAST&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db03&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.147:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.149:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.150:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.151:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1). balance</p><p>1 : 代表 全部的 readHost 与 stand by writeHost 参与 select 语句的负载均衡，简单的说，当双主双从模式(M1-&gt;S1，M2-&gt;S2，并且 M1 与 M2 互为主备)，正常情况下，M2,S1,S2 都参与 select 语句的负载均衡 ;</p><p>2). writeType</p><p>0 : 写操作都转发到第1台writeHost, writeHost1挂了, 会切换到writeHost2上;</p><p>1 : 所有的写操作都随机地发送到配置的writeHost上 ;</p><p>3). switchType</p><p>-1 : 不自动切换</p><p>1 : 默认值, 自动切换</p><p>2 : 表示基于MySQL的主从同步状态决定是否切换, 心跳语句 : show slave status</p><h5 id="读写分离验证"><a href="#读写分离验证" class="headerlink" title="读写分离验证"></a>读写分离验证</h5><p>查询数据 : select * from user;</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151213.png" alt="image-20200104101106144"> </p><p>插入数据 : insert into user(id,name,sex) values(null,’Dawn’,’1’);</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151218.png" alt="image-20200104100956216"> </p><h5 id="可用性验证"><a href="#可用性验证" class="headerlink" title="可用性验证"></a>可用性验证</h5><p>关闭Master1 , 然后再执行写入的SQL语句 , 通过日志查询当前写入操作, 操作的是那台服务器 ;</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> MyCat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyCat </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyCat(七)---高可用集群搭建</title>
      <link href="2021/06/21/Mycat(%E4%B8%83)---%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>2021/06/21/Mycat(%E4%B8%83)---%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="MyCat高可用集群搭建"><a href="#MyCat高可用集群搭建" class="headerlink" title="MyCat高可用集群搭建"></a>MyCat高可用集群搭建</h3><h4 id="MyCat实现读写分离架构"><a href="#MyCat实现读写分离架构" class="headerlink" title="MyCat实现读写分离架构"></a>MyCat实现读写分离架构</h4><p>在上面的章节, 我们已经讲解过了通过MyCat来实现MySQL的读写分离, 从而完成MySQL集群的负载均衡 , 如下面的结构图: </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151225.png" alt="image-20200104144550132"> </p><p>但是以上架构存在问题 , 由于MyCat中间件是单节点的服务, 前端客户端所有的压力过来都直接请求这一台MyCat , 存在单点故障。所以这个时候， 我们就需要考虑MyCat的集群 ；</p><h4 id="MyCat集群架构"><a href="#MyCat集群架构" class="headerlink" title="MyCat集群架构"></a>MyCat集群架构</h4><p>通过MyCat来实现后端MySQL的负载均衡 ， 通过HAProxy再实现MyCat集群的负载均衡 ; </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151230.png" alt="image-20200104151016408"> </p><p>HAProxy 负责将请求分发到 MyCat 上，起到负载均衡的作用，同时 HAProxy 也能检测到 MyCat 是否存活，HAProxy 只会将请求转发到存活的 MyCat 上。如果一台 MyCat 服务器宕机，HAPorxy 转发请求时不会转发到宕机的 MyCat 上，所以 MyCat 依然可用。</p><p><strong>HAProxy介绍:</strong></p><p>HAProxy 是一个开源的、高性能的基于TCP(第四层)和HTTP(第七层)应用的负载均衡软件。 使用HAProxy可以快速、可靠地实现基于TCP与HTTP应用的负载均衡解决方案。</p><p>具有以下优点： </p><p>①. 可靠性和稳定性好, 可以与硬件级的F5负载均衡服务器媲美 ;</p><p>②. 处理能力强, 最高可以通过维护4w-5w个并发连接, 单位时间处理的最大请求数达到2w个 ;</p><p>③. 支持多种负载均衡算法 ;</p><p>④. 有功能强大的监控界面, 通过此页面可以实时了解系统的运行情况 ;</p><p>但是， 上述的架构也是存在问题的， 因为所以的客户端请求都是先到达HAProxy, 由HAProxy再将请求再向下分发, 如果HAProxy宕机的话, 就会造成整个MyCat集群不能正常运行, 依然存在单点故障。</p><h4 id="MyCat的高可用集群"><a href="#MyCat的高可用集群" class="headerlink" title="MyCat的高可用集群"></a>MyCat的高可用集群</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151236.png" alt="image-20200104153537319"> </p><p><strong>图解说明：</strong><br>1). HAProxy 实现了 MyCat 多节点的集群高可用和负载均衡，而 HAProxy 自身的高可用则可以通过Keepalived 来实现。因此，HAProxy 主机上要同时安装 HAProxy 和 Keepalived，Keepalived 负责为该服务器抢占 vip（虚拟 ip），抢占到 vip 后，对该主机的访问可以通过原来的 ip访问，也可以直接通过 vip访问。</p><p>2). Keepalived 抢占 vip 有优先级，在 keepalived.conf 配置中的 priority 属性决定。但是一般哪台主机上的Keepalived服务先启动就会抢占到vip，即使是slave，只要先启动也能抢到（要注意避免Keepalived的资源抢占问题）。</p><p>3). HAProxy 负责将对 vip 的请求分发到 MyCat 集群节点上，起到负载均衡的作用。同时 HAProxy 也能检测到 MyCat 是否存活，HAProxy 只会将请求转发到存活的 MyCat 上。</p><p>4). 如果 Keepalived+HAProxy 高可用集群中的一台服务器宕机，集群中另外一台服务器上的 Keepalived会立刻抢占 vip 并接管服务，此时抢占了 vip 的 HAProxy 节点可以继续提供服务。</p><p>5). 如果一台 MyCat 服务器宕机，HAPorxy 转发请求时不会转发到宕机的 MyCat 上，所以 MyCat 依然可用。</p><p>综上：MyCat 的高可用及负载均衡由 HAProxy 来实现，而 HAProxy 的高可用，由 Keepalived 来实现。</p><p><strong>keepalived介绍:</strong></p><p>Keepalived是一种基于VRRP协议来实现的高可用方案,可以利用其来避免单点故障。 通常有两台甚至多台服务器运行Keepalived，一台为主服务器(Master), 其他为备份服务器, 但是对外表现为一个虚拟IP(VIP), 主服务器会发送特定的消息给备份服务器, 当备份服务器接收不到这个消息时, 即认为主服务器宕机, 备份服务器就会接管虚拟IP, 继续提供服务, 从而保证了整个集群的高可用。<br>VRRP(虚拟路由冗余协议-Virtual Router Redundancy Protocol)协议是用于实现路由器冗余的协议，VRRP 协议将两台或多台路由器设备虚拟成一个设备，对外提供虚拟路由器 IP(一个或多个)，而在路由器组内部，如果实际拥有这个对外 IP 的路由器如果工作正常的话就是 MASTER，或者是通过算法选举产生。MASTER 实现针对虚拟路由器 IP 的各种网络功能，如 ARP 请求，ICMP，以及数据的转发等；其他设备不拥有该虚拟 IP，状态是 BACKUP，除了接收 MASTER 的VRRP 状态通告信息外，不执行对外的网络功能。当主机失效时，BACKUP 将接管原先 MASTER 的网络功能。VRRP 协议使用多播数据来传输 VRRP 数据，VRRP 数据使用特殊的虚拟源 MAC 地址发送数据而不是自身网卡的 MAC 地址，VRRP 运行时只有 MASTER 路由器定时发送 VRRP 通告信息，表示 MASTER 工作正常以及虚拟路由器 IP(组)，BACKUP 只接收 VRRP 数据，不发送数据，如果一定时间内没有接收到 MASTER 的通告信息，各 BACKUP 将宣告自己成为 MASTER，发送通告信息，重新进行 MASTER 选举状态。</p><h3 id="高可用集群搭建"><a href="#高可用集群搭建" class="headerlink" title="高可用集群搭建"></a>高可用集群搭建</h3><h4 id="部署环境规划"><a href="#部署环境规划" class="headerlink" title="部署环境规划"></a>部署环境规划</h4><table><thead><tr><th align="left">名称</th><th align="center">IP</th><th align="center">端口</th><th align="center">用户名/密码</th></tr></thead><tbody><tr><td align="left">MySQL Master</td><td align="center">192.168.192.157</td><td align="center">3306</td><td align="center">root/itcast</td></tr><tr><td align="left">MySQL Slave</td><td align="center">192.168.192.158</td><td align="center">3306</td><td align="center">root/itcast</td></tr><tr><td align="left">MyCat节点1</td><td align="center">192.168.192.157</td><td align="center">8066</td><td align="center">root/123456</td></tr><tr><td align="left">MyCat节点2</td><td align="center">192.168.192.158</td><td align="center">8066</td><td align="center">root/123456</td></tr><tr><td align="left">HAProxy节点1/keepalived主</td><td align="center">192.168.192.159</td><td align="center"></td><td align="center"></td></tr><tr><td align="left">HAProxy节点2/keepalived备</td><td align="center">192.168.192.160</td><td align="center"></td><td align="center"></td></tr></tbody></table><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151241.png" alt="image-20200104153537319"> </p><h4 id="MySQL主从复制搭建"><a href="#MySQL主从复制搭建" class="headerlink" title="MySQL主从复制搭建"></a>MySQL主从复制搭建</h4><h5 id="master"><a href="#master" class="headerlink" title="master"></a>master</h5><p>1） 在master 的配置文件（/usr/my.cnf）中，配置如下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql 服务ID,保证整个集群环境中唯一</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#mysql binlog 日志的存储路径和文件名</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">/var/lib/mysql/mysqlbin</span></span><br><span class="line"><span class="comment">#设置logbin格式</span></span><br><span class="line"><span class="attr">binlog_format</span>=<span class="string">STATEMENT</span></span><br><span class="line"><span class="comment">#是否只读,1 代表只读, 0 代表读写</span></span><br><span class="line"><span class="meta">read-only</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#指定同步的数据库</span></span><br><span class="line"><span class="meta">binlog-do-db</span>=<span class="string">db01</span></span><br><span class="line"><span class="meta">binlog-do-db</span>=<span class="string">db02</span></span><br><span class="line"><span class="meta">binlog-do-db</span>=<span class="string">db03</span></span><br></pre></td></tr></table></figure><p>2） 执行完毕之后，需要重启Mysql：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart ;</span><br></pre></td></tr></table></figure><p>3） 创建同步数据的账户，并且进行授权操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;itcast&#x27;</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>4） 查看master状态：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151247.png" alt="image-20200104171647471">  </p><p>字段含义:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File : 从哪个日志文件开始推送日志文件 </span><br><span class="line">Position ： 从哪个位置开始推送日志</span><br><span class="line">Binlog_Do_DB : 指定需要同步的数据库</span><br></pre></td></tr></table></figure><h5 id="slave"><a href="#slave" class="headerlink" title="slave"></a>slave</h5><p>1） 在 slave 端配置文件中，配置如下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql服务端ID,唯一</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">2</span></span><br><span class="line"><span class="comment">#指定binlog日志</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">/var/lib/mysql/mysqlbin</span></span><br><span class="line"><span class="comment">#启用中继日志</span></span><br><span class="line"><span class="meta">relay-log</span>=<span class="string">mysql-relay</span></span><br></pre></td></tr></table></figure><p>2）  执行完毕之后，需要重启Mysql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart;</span><br></pre></td></tr></table></figure><p>3） 执行如下指令 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span> <span class="string">&#x27;192.168.192.157&#x27;</span>, master_user<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>, master_password<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>, master_log_file<span class="operator">=</span><span class="string">&#x27;mysqlbin.000002&#x27;</span>, master_log_pos<span class="operator">=</span><span class="number">120</span>;</span><br></pre></td></tr></table></figure><p>指定当前从库对应的主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置开始同步推送日志。</p><p>4） 开启同步操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151251.png" alt="image-20200103144903105">  </p><p>5） 停止同步操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure><h5 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create database db01;</span><br><span class="line"></span><br><span class="line">user db01;</span><br><span class="line"></span><br><span class="line"><span class="function">create table <span class="title">user</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">id <span class="keyword">int</span>(<span class="number">11</span>)</span> not <span class="keyword">null</span> auto_increment,</span></span><br><span class="line"><span class="function">name <span class="title">varchar</span><span class="params">(<span class="number">50</span>)</span> not <span class="keyword">null</span>,</span></span><br><span class="line"><span class="function">sex <span class="title">varchar</span><span class="params">(<span class="number">1</span>)</span>,</span></span><br><span class="line"><span class="function">primary <span class="title">key</span> <span class="params">(id)</span></span></span><br><span class="line"><span class="function">)engine</span>=innodb <span class="keyword">default</span> charset=utf8;</span><br><span class="line"></span><br><span class="line"><span class="function">insert into <span class="title">user</span><span class="params">(id,name,sex)</span> <span class="title">values</span><span class="params">(<span class="keyword">null</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span></span>;</span><br><span class="line"><span class="function">insert into <span class="title">user</span><span class="params">(id,name,sex)</span> <span class="title">values</span><span class="params">(<span class="keyword">null</span>,<span class="string">&#x27;Trigger&#x27;</span>,<span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line"><span class="function">insert into <span class="title">user</span><span class="params">(id,name,sex)</span> <span class="title">values</span><span class="params">(<span class="keyword">null</span>,<span class="string">&#x27;Dawn&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="MyCat安装配置"><a href="#MyCat安装配置" class="headerlink" title="MyCat安装配置"></a>MyCat安装配置</h4><h5 id="schema-xml"><a href="#schema-xml" class="headerlink" title="schema.xml"></a>schema.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;ITCAST&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db01&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.157:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.158:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="server-xml"><a href="#server-xml" class="headerlink" title="server.xml"></a>server.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>ITCAST<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>ITCAST<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>两台MyCat服务, 做相同的配置 ;</p><h4 id="HAProxy安装配置"><a href="#HAProxy安装配置" class="headerlink" title="HAProxy安装配置"></a>HAProxy安装配置</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>1). 准备好HAProxy安装包，传到/root目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haproxy-1.5.16.tar.gz</span><br></pre></td></tr></table></figure><p>2). 解压到/usr/local/src目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf haproxy-1.5.16.tar.gz -C /usr/local/src</span><br></pre></td></tr></table></figure><p>3). 进入解压后的目录，查看内核版本，进行编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/haproxy-1.5.16</span><br><span class="line">uname -r</span><br><span class="line">make TARGET=linux2632 PREFIX=/usr/local/haproxy ARCH=x86_64</span><br><span class="line"></span><br><span class="line"># TARGET=linux310，内核版本，使用uname -r查看内核，如：2.6.32-431.el6.x86_64，此时该参数就为linux2632；</span><br><span class="line"># ARCH=x86_64，系统位数；</span><br><span class="line"># PREFIX=/usr/local/haprpxy #/usr/local/haprpxy，为haprpxy安装路径。</span><br></pre></td></tr></table></figure><p>4). 编译完成后，进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install PREFIX=/usr/local/haproxy</span><br></pre></td></tr></table></figure><p>5). 安装完成后，创建目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/data/haproxy/</span><br></pre></td></tr></table></figure><p>6). 创建HAProxy配置文件</p><p>vim /usr/local/haproxy/haproxy.conf</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">global</span></span><br><span class="line"><span class="string">log</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">local0</span> </span><br><span class="line"><span class="string">maxconn</span> <span class="number">4096</span> </span><br><span class="line"><span class="string">chroot</span> <span class="string">/usr/local/haproxy</span> </span><br><span class="line"><span class="string">pidfile</span> <span class="string">/usr/data/haproxy/haproxy.pid</span></span><br><span class="line"><span class="string">uid</span> <span class="number">99</span></span><br><span class="line"><span class="string">gid</span> <span class="number">99</span></span><br><span class="line"><span class="string">daemon</span></span><br><span class="line"><span class="string">node</span> <span class="string">mysql-haproxy-01</span></span><br><span class="line"><span class="string">description</span> <span class="string">mysql-haproxy-01</span></span><br><span class="line"><span class="string">defaults</span></span><br><span class="line"><span class="string">log</span> <span class="string">global</span></span><br><span class="line"><span class="string">mode</span> <span class="string">tcp</span></span><br><span class="line"><span class="string">option</span> <span class="string">abortonclose</span></span><br><span class="line"><span class="string">option</span> <span class="string">redispatch</span></span><br><span class="line"><span class="string">retries</span> <span class="number">3</span></span><br><span class="line"><span class="string">maxconn</span> <span class="number">2000</span></span><br><span class="line"><span class="string">timeout</span> <span class="string">connect</span> <span class="string">50000ms</span></span><br><span class="line"><span class="string">timeout</span> <span class="string">client</span> <span class="string">50000ms</span></span><br><span class="line"><span class="string">timeout</span> <span class="string">server</span> <span class="string">50000ms</span></span><br><span class="line"><span class="string">listen</span> <span class="string">proxy_status</span></span><br><span class="line"><span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:48066</span></span><br><span class="line"><span class="string">mode</span> <span class="string">tcp</span></span><br><span class="line"><span class="string">balance</span> <span class="string">roundrobin</span></span><br><span class="line"><span class="string">server</span> <span class="string">mycat_1</span> <span class="number">192.168</span><span class="number">.192</span><span class="number">.157</span><span class="string">:8066</span> <span class="string">check</span></span><br><span class="line"><span class="string">server</span> <span class="string">mycat_2</span> <span class="number">192.168</span><span class="number">.192</span><span class="number">.158</span><span class="string">:8066</span> <span class="string">check</span></span><br><span class="line"><span class="string">frontend</span> <span class="string">admin_stats</span></span><br><span class="line"><span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8888</span></span><br><span class="line"><span class="string">mode</span> <span class="string">http</span></span><br><span class="line"><span class="string">stats</span> <span class="string">enable</span></span><br><span class="line"><span class="string">option</span> <span class="string">httplog</span></span><br><span class="line"><span class="string">maxconn</span> <span class="number">10</span></span><br><span class="line"><span class="string">stats</span> <span class="string">refresh</span> <span class="string">30s</span></span><br><span class="line"><span class="string">stats</span> <span class="string">uri</span> <span class="string">/admin</span></span><br><span class="line"><span class="string">stats</span> <span class="string">auth</span> <span class="string">admin:123123</span></span><br><span class="line"><span class="string">stats</span> <span class="string">hide-version</span></span><br><span class="line"><span class="string">stats</span> <span class="string">admin</span> <span class="string">if</span> <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure><p><strong>内容解析如下</strong> : </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#global 配置中的参数为进程级别的参数，通常与其运行的操作系统有关</span></span><br><span class="line"><span class="string">global</span></span><br><span class="line"><span class="comment">#定义全局的syslog服务器, 最多可定义2个; local0 是日志设备, 对应于/etc/rsyslog.conf中的配置 , 默认收集info级别日志</span></span><br><span class="line"><span class="string">log</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">local0</span> </span><br><span class="line"><span class="comment">#log 127.0.0.1 local1 notice</span></span><br><span class="line"><span class="comment">#log loghost local0 info</span></span><br><span class="line"><span class="comment">#设定每个haproxy进程所接受的最大并发连接数 ;</span></span><br><span class="line"><span class="string">maxconn</span> <span class="number">4096</span> </span><br><span class="line"><span class="comment">#修改HAproxy工作目录至指定的目录并在放弃权限之前执行chroot操作, 可以提升haproxy的安全级别</span></span><br><span class="line"><span class="string">chroot</span> <span class="string">/usr/local/haproxy</span> </span><br><span class="line"><span class="comment">#进程ID保存文件</span></span><br><span class="line"><span class="string">pidfile</span> <span class="string">/usr/data/haproxy/haproxy.pid</span></span><br><span class="line"><span class="comment">#指定用户ID</span></span><br><span class="line"><span class="string">uid</span> <span class="number">99</span></span><br><span class="line"><span class="comment">#指定组ID</span></span><br><span class="line"><span class="string">gid</span> <span class="number">99</span></span><br><span class="line"><span class="comment">#设置HAproxy以守护进程方式运行</span></span><br><span class="line"><span class="string">daemon</span></span><br><span class="line"><span class="comment">#debug</span></span><br><span class="line"><span class="comment">#quiet</span></span><br><span class="line"><span class="string">node</span> <span class="string">mysql-haproxy-01</span>  <span class="comment">## 定义当前节点的名称，用于 HA 场景中多 haproxy 进程共享同一个 IP 地址时</span></span><br><span class="line"><span class="string">description</span> <span class="string">mysql-haproxy-01</span> <span class="comment">## 当前实例的描述信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#defaults：用于为所有其他配置段提供默认参数，这默认配置参数可由下一个&quot;defaults&quot;所重新设定</span></span><br><span class="line"><span class="string">defaults</span></span><br><span class="line"><span class="comment">#继承global中的log定义</span></span><br><span class="line"><span class="string">log</span> <span class="string">global</span></span><br><span class="line"><span class="comment">#所使用的处理模式(tcp:四层 , http:七层, health:状态检查,只返回OK)</span></span><br><span class="line"><span class="comment">### tcp: 实例运行于纯 tcp 模式，在客户端和服务器端之间将建立一个全双工的连接，且不会对 7 层报文做任何类型的检查，此为默认模式</span></span><br><span class="line"><span class="comment">### http:实例运行于 http 模式，客户端请求在转发至后端服务器之前将被深度分析，所有不与 RFC 模式兼容的请求都会被拒绝</span></span><br><span class="line"><span class="comment">### health：实例运行于 health 模式，其对入站请求仅响应“OK”信息并关闭连接，且不会记录任何日志信息 ，此模式将用于相应外部组件的监控状态检测请求</span></span><br><span class="line"><span class="string">mode</span> <span class="string">tcp</span></span><br><span class="line"><span class="comment">#当服务器负载很高的时候，自动结束掉当前队列处理时间比较长的连接</span></span><br><span class="line"><span class="string">option</span> <span class="string">abortonclose</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当使用了cookie时，haproxy将会将请求的后端服务器的serverID插入到cookie中，以保证会话的session持久性，而此时，后端服务器宕机，但是客户端的cookie不会刷新，设置此参数，将会将客户请求强制定向到另外一个后端server上，以保证服务的正常。</span></span><br><span class="line"><span class="string">option</span> <span class="string">redispatch</span></span><br><span class="line"><span class="string">retries</span> <span class="number">3</span></span><br><span class="line"><span class="comment"># 前端的最大并发连接数（默认为 2000）</span></span><br><span class="line"><span class="string">maxconn</span> <span class="number">2000</span></span><br><span class="line"><span class="comment"># 连接超时(默认是毫秒,单位可以设置 us,ms,s,m,h,d)</span></span><br><span class="line"><span class="string">timeout</span> <span class="string">connect</span> <span class="number">5000</span></span><br><span class="line"><span class="comment"># 客户端超时时间</span></span><br><span class="line"><span class="string">timeout</span> <span class="string">client</span> <span class="number">50000</span></span><br><span class="line"><span class="comment"># 服务器超时时间</span></span><br><span class="line"><span class="string">timeout</span> <span class="string">server</span> <span class="number">50000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#listen: 用于定义通过关联“前端”和“后端”一个完整的代理，通常只对 TCP 流量有用</span></span><br><span class="line"><span class="string">listen</span> <span class="string">proxy_status</span></span><br><span class="line"><span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:48066</span> <span class="comment"># 绑定端口</span></span><br><span class="line"><span class="string">mode</span> <span class="string">tcp</span></span><br><span class="line"><span class="string">balance</span> <span class="string">roundrobin</span> <span class="comment"># 定义负载均衡算法，可用于&quot;defaults&quot;、&quot;listen&quot;和&quot;backend&quot;中,默认为轮询</span></span><br><span class="line"><span class="comment">#格式: server &lt;name&gt; &lt;address&gt; [:[port]] [param*]</span></span><br><span class="line"><span class="comment"># weight : 权重，默认为 1，最大值为 256，0 表示不参与负载均衡</span></span><br><span class="line">        <span class="comment"># backup : 设定为备用服务器，仅在负载均衡场景中的其他 server 均不可以启用此 server</span></span><br><span class="line">        <span class="comment"># check  : 启动对此 server 执行监控状态检查，其可以借助于额外的其他参数完成更精细的设定</span></span><br><span class="line">        <span class="comment"># inter  : 设定监控状态检查的时间间隔，单位为毫秒，默认为 2000，也可以使用 fastinter 和 downinter 来根据服务器端专题优化此事件延迟</span></span><br><span class="line">        <span class="comment"># rise   : 设置 server 从离线状态转换至正常状态需要检查的次数（不设置的情况下，默认值为 2）</span></span><br><span class="line">        <span class="comment"># fall   : 设置 server 从正常状态转换至离线状态需要检查的次数（不设置的情况下，默认值为 3）</span></span><br><span class="line">        <span class="comment"># cookie : 为指定 server 设定 cookie 值，此处指定的值将会在请求入站时被检查，第一次为此值挑选的 server 将会被后续的请求所选中，其目的在于实现持久连接的功能</span></span><br><span class="line">        <span class="comment"># maxconn: 指定此服务器接受的最大并发连接数，如果发往此服务器的连接数目高于此处指定的值，其将被放置于请求队列，以等待其他连接被释放</span></span><br><span class="line"><span class="string">server</span> <span class="string">mycat_1</span> <span class="number">192.168</span><span class="number">.192</span><span class="number">.157</span><span class="string">:8066</span> <span class="string">check</span> <span class="string">inter</span> <span class="string">10s</span></span><br><span class="line"><span class="string">server</span> <span class="string">mycat_2</span> <span class="number">192.168</span><span class="number">.192</span><span class="number">.158</span><span class="string">:8066</span> <span class="string">check</span> <span class="string">inter</span> <span class="string">10s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来匹配接收客户所请求的域名，uri等，并针对不同的匹配，做不同的请求处理</span></span><br><span class="line"><span class="comment"># HAProxy 的状态信息统计页面</span></span><br><span class="line"><span class="string">frontend</span> <span class="string">admin_stats</span></span><br><span class="line"><span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8888</span></span><br><span class="line"><span class="string">mode</span> <span class="string">http</span></span><br><span class="line"><span class="string">stats</span> <span class="string">enable</span></span><br><span class="line"><span class="string">option</span> <span class="string">httplog</span></span><br><span class="line"><span class="string">maxconn</span> <span class="number">10</span></span><br><span class="line"><span class="string">stats</span> <span class="string">refresh</span> <span class="string">30s</span></span><br><span class="line"><span class="string">stats</span> <span class="string">uri</span> <span class="string">/admin</span></span><br><span class="line"><span class="string">stats</span> <span class="string">auth</span> <span class="string">admin:123123</span></span><br><span class="line"><span class="string">stats</span> <span class="string">hide-version</span></span><br><span class="line"><span class="string">stats</span> <span class="string">admin</span> <span class="string">if</span> <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure><p>HAProxy的负载均衡策略: </p><table><thead><tr><th>策略</th><th>含义</th></tr></thead><tbody><tr><td>roundrobin</td><td>表示简单的轮循，即客户端每访问一次，请求轮循跳转到后端不同的节点机器上</td></tr><tr><td>static-rr</td><td>基于权重轮循，根据权重轮循调度到后端不同节点</td></tr><tr><td>leastconn</td><td>加权最少连接，表示最少连接者优先处理</td></tr><tr><td>source</td><td>表示根据请求源IP，这个跟Nginx的IP_hash机制类似，使用其作为解决session问题的一种方法</td></tr><tr><td>uri</td><td>表示根据请求的URL，调度到后端不同的服务器</td></tr><tr><td>url_param</td><td>表示根据请求的URL参数来进行调度</td></tr><tr><td>hdr（name）</td><td>表示根据HTTP请求头来锁定每一次HTTP请求</td></tr><tr><td>rdp-cookie（name）</td><td>表示根据cookie（name）来锁定并哈希每一次TCP请求</td></tr></tbody></table><h5 id="启动访问"><a href="#启动访问" class="headerlink" title="启动访问"></a>启动访问</h5><p>1). 启动HAProxy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/haproxy/sbin/haproxy -f /usr/local/haproxy/haproxy.conf</span><br></pre></td></tr></table></figure><p>2). 查看HAProxy进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep haproxy</span><br></pre></td></tr></table></figure><p>3). 访问</p><p><a href="http://192.168.192.162:8888/admin">http://192.168.192.162:8888/admin</a></p><p>界面: </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151301.png" alt="image-20200202214408231">  </p><h4 id="Keepalived安装配置"><a href="#Keepalived安装配置" class="headerlink" title="Keepalived安装配置"></a>Keepalived安装配置</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151304.png" alt="image-20200203010953404"> </p><h5 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h5><p>1). 上传安装包到Linux</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alt + p --------&gt; put D:/tmp/keepalived-1.4.5.tar.gz</span><br></pre></td></tr></table></figure><p>2). 解压安装包到目录 /usr/local/src</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf keepalived-1.4.5.tar.gz -C /usr/local/src</span><br></pre></td></tr></table></figure><p>3). 安装依赖插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc openssl-devel popt-devel</span><br></pre></td></tr></table></figure><p>4). 进入解压后的目录，进行配置，进行编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/keepalived-1.4.5</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/local/keepalived</span><br></pre></td></tr></table></figure><p>5). 进行编译，完成后进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>6). 运行前配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/src/keepalived-1.4.5/keepalived/etc/init.d/keepalived /etc/init.d/</span><br><span class="line">mkdir /etc/keepalived</span><br><span class="line">cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/</span><br><span class="line">cp /usr/local/src/keepalived-1.4.5/keepalived/etc/sysconfig/keepalived /etc/sysconfig/</span><br><span class="line">cp /usr/local/keepalived/sbin/keepalived /usr/sbin/</span><br></pre></td></tr></table></figure><p>7). 修改配置文件 /etc/keepalived/keepalived.conf</p><p>Master: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">notification_email &#123;</span><br><span class="line">javadct@163.com</span><br><span class="line">&#125;</span><br><span class="line">notification_email_from keepalived@showjoy.com</span><br><span class="line">smtp_server 127.0.0.1</span><br><span class="line">smtp_connect_timeout 30</span><br><span class="line">router_id haproxy01</span><br><span class="line">vrrp_skip_check_adv_addr</span><br><span class="line">vrrp_garp_interval 0</span><br><span class="line">vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">script &quot;/etc/keepalived/haproxy_check.sh&quot;</span><br><span class="line">interval 2</span><br><span class="line">weight 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">#主机配MASTER，备机配BACKUP</span><br><span class="line">state MASTER</span><br><span class="line">#所在机器网卡</span><br><span class="line">interface eth1</span><br><span class="line">virtual_router_id 51</span><br><span class="line">#数值越大优先级越高</span><br><span class="line">priority 120</span><br><span class="line">advert_int 1</span><br><span class="line">authentication &#123;</span><br><span class="line">auth_type PASS</span><br><span class="line">auth_pass 1111</span><br><span class="line">&#125;</span><br><span class="line">## 将 track_script 块加入 instance 配置块</span><br><span class="line">    track_script &#123;</span><br><span class="line">    chk_haproxy ## 检查 HAProxy 服务是否存活</span><br><span class="line">    &#125;</span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">#虚拟IP</span><br><span class="line">192.168.192.200</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BackUP:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">notification_email &#123;</span><br><span class="line">javadct@163.com</span><br><span class="line">&#125;</span><br><span class="line">notification_email_from keepalived@showjoy.com</span><br><span class="line">smtp_server 127.0.0.1</span><br><span class="line">smtp_connect_timeout 30</span><br><span class="line">#标识本节点</span><br><span class="line">router_id haproxy02</span><br><span class="line">vrrp_skip_check_adv_addr</span><br><span class="line">vrrp_garp_interval 0</span><br><span class="line">vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># keepalived 会定时执行脚本并对脚本执行的结果进行分析，动态调整 vrrp_instance 的优先级</span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line"># 检测 haproxy 状态的脚本路径</span><br><span class="line">script &quot;/etc/keepalived/haproxy_check.sh&quot;</span><br><span class="line">#检测时间间隔</span><br><span class="line">interval 2</span><br><span class="line">#如果条件成立，权重+2</span><br><span class="line">weight 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">#主机配MASTER，备机配BACKUP</span><br><span class="line">state BACKUP</span><br><span class="line">#所在机器网卡</span><br><span class="line">interface eth1</span><br><span class="line">virtual_router_id 51</span><br><span class="line">#数值越大优先级越高</span><br><span class="line">priority 100</span><br><span class="line">advert_int 1</span><br><span class="line">authentication &#123;</span><br><span class="line">auth_type PASS</span><br><span class="line">auth_pass 1111</span><br><span class="line">&#125;</span><br><span class="line">## 将 track_script 块加入 instance 配置块</span><br><span class="line">    track_script &#123;</span><br><span class="line">    chk_haproxy ## 检查 HAProxy 服务是否存活</span><br><span class="line">    &#125;</span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">#虚拟IP</span><br><span class="line">192.168.192.200</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8). 编写检测haproxy的shell脚本 haproxy_check.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">A=`ps -C haproxy --no-header | wc -l`</span><br><span class="line"></span><br><span class="line">if [ $A -eq 0 ];then</span><br><span class="line"></span><br><span class="line">  /usr/local/haproxy/sbin/haproxy -f /usr/local/haproxy/haproxy.conf</span><br><span class="line"></span><br><span class="line">  echo &quot;haproxy restart ...&quot; &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">  sleep 1</span><br><span class="line"></span><br><span class="line">  if [ `ps -C haproxy --no-header | wc -l` -eq 0 ];then</span><br><span class="line"></span><br><span class="line">    /etc/init.d/keepalived stop</span><br><span class="line"></span><br><span class="line">    echo &quot;stop keepalived&quot; &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h5 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h5><p>1). 启动Keepalived</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service keepalived start</span><br></pre></td></tr></table></figure><p>2). 登录验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456 -h 192.168.192.200 -P 48066</span><br></pre></td></tr></table></figure><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151310.png" alt="image-20200202193227448"> </p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> MyCat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyCat </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyCat(八)---架构解析</title>
      <link href="2021/06/20/MyCat(%E5%85%AB)---%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/"/>
      <url>2021/06/20/MyCat(%E5%85%AB)---%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="MyCat总体架构介绍"><a href="#MyCat总体架构介绍" class="headerlink" title="MyCat总体架构介绍"></a>MyCat总体架构介绍</h3><h4 id="源码下载及导入"><a href="#源码下载及导入" class="headerlink" title="源码下载及导入"></a>源码下载及导入</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151313.png" alt="image-20200202220149279"> </p><p>导入Idea</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151317.png" alt="image-20200202220220682"> </p><h4 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h4><p>MyCat在逻辑上由几个模块组成: 通信协议、路由解析、结果集处理、数据库连接、监控等模块。如图所示： </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151323.png" alt="image-20200107230122662"> </p><p>1). 通信协议模块： 通信协议模块承担底层的收发数据、线程回调处理工作， MyCat通信协议默认采用Reactor模式，在协议层采用MySQL协议；</p><p>2). 路由解析模块: 负责对传入的SQL语句进行语法解析, 解析语句的条件、类型、关键字等，并进行优化；</p><p>3). SQL执行模块: 负责从连接池中获取连接, 再根据路由解析的结果, 把SQL语句分发到相应的节点执行;</p><p>4). 数据库连接模块: 负责创建、管理、维护后端的连接池。为减少每次建立数据库连接的开销，数据库使用连接池机制对连接声明周期进行管理；</p><p>5). 结果集处理模块: 负责对跨分片的查询结果进行汇聚、排序、截取等；</p><p>6). 监控管理模块: 负责MyCat的连接、内存等资源进行监控和管理。监控主要通过管理指令及监控服务展现一些监控数据； 管理则主要通过轮询事件来检测和释放不适用的资源；</p><h4 id="总体执行流程"><a href="#总体执行流程" class="headerlink" title="总体执行流程"></a>总体执行流程</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151327.png" alt="image-20200107233001248"> </p><h3 id="MyCat网络I-O架构及实现"><a href="#MyCat网络I-O架构及实现" class="headerlink" title="MyCat网络I/O架构及实现"></a>MyCat网络I/O架构及实现</h3><h4 id="BIO、NIO与AIO"><a href="#BIO、NIO与AIO" class="headerlink" title="BIO、NIO与AIO"></a>BIO、NIO与AIO</h4><p>1). BIO</p><p>BIO(同步阻塞I/O) 通常由一个单独的Acceptor线程负责监听客户端的连接, 接收到客户端的连接请求后, 会为每个客户端创建一个新的线程进行处理, 处理完成之后, 再给客户端返回结果, 销毁线程 。</p><p>每个客户端请求接入时， 都需要开启一个线程进行处理， 一个线程只能处理一个客户端连接。 当客户端变多时，会创建大量的处理线程， 每个线程都需要分配栈空间和CPU， 并且频繁的线程上下文切换也会造成性能的浪费。所以该模式， 无法满足高性能、高并发接入的需求。</p><p>2). NIO</p><p>NIO(同步非阻塞I/O)基于Reactor模式作为底层通信模型，Reactor模式可以将事件驱动的应用进行事件分派, 将客户端发送过来的服务请求分派给合适的处理类(handler)。当Socket有流可读或可写入Socket时, 操作系统会通知相应的应用程序进行处理, 应用程序再将流读取到缓冲区或写入操作系统。 这时已经不是一个连接对应一个处理线程了， 而是一个有效的请求对应一个线程， 当没有数据时， 就没有工作线程来处理。</p><p>NIO 的最大优点体现在线程轮询访问Selector, 当read或write到达时则处理, 未到达时则继续轮询。</p><p>3). AIO</p><p>AIO，全程 Asynchronous IO(异步非阻塞的IO), 是一种非阻塞异步的通信模式。在NIO的基础上引入了新的异步通道的概念，并提供了异步文件通道和异步套接字通道的实现。AIO中客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理。</p><p>AIO与NIO的主要区别在于回调与轮询, 客户端不需要关注服务处理事件是否完成, 也不需要轮询, 只需要关注自己的回调函数。</p><h4 id="通信架构"><a href="#通信架构" class="headerlink" title="通信架构"></a>通信架构</h4><p>在MyCat中实现了NIO与AIO两种I/O模式, 可以通过配置文件server.xml进行指定 : </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;usingAIO&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>usingAIO为1代表使用AIO模型 , 为0表示使用NIO模型;</p><p><strong>MyCat的AIO架构</strong></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151332.png" alt="image-20200108103954458"> </p><p>1). MyCatStartUp是整个MyCat服务启动的入口;</p><p>2). 在获取到MyCat的home目录后, 把主要的任务交给MyCatServer , 并调用其startup方法;</p><p>3). 初始化系统配置, 获取配置文件中的usingAIO的配置, 如果配置为1, 说明使用AIO模型 , 进入到AIO的分支, 并创建两个连接, 一个是管理后台连接(9066), 一个server的连接(8066);</p><p>4). 进入AIO分支 , 主要有AIOAcceptor接收客户端请求, 绑定端口, 创建服务端的异步Socket ;在accept方法中完成两件事: ①. FrontedConnection的创建, 这是前段连接的关键; ②. register注册事件, MySQL协议握手包就在此时发送;</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151336.png" alt="image-20200108111012502"> </p><p><strong>MyCat的NIO架构</strong></p><p>如果设置的usingAIO为0 ,那么将走NIOAcceptor通道 , 流程如下: </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151339.png" alt="image-20200108111153230"> </p><p>1). 如果走NIO分支 , 将首先创建NIOAcceptor对象, 并调用其start方法;</p><p>2). NIOAcceptor 负责处理Accept事件, 服务端接收客户端的连接事件, 就是MyCat作为服务端去处理前端业务程序发过来的连接请求, 建立链接后, 调用NIOAcceptor的 NIOReactor.postRegister方法进行注册（并没有注解注册， 而是放入缓冲队列， 避免加锁的竞争）。 </p><p>NIOAcceptor的accept方法 ： </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151345.png" alt="image-20200108112521438"> </p><p>NIOReactor的postRegister方法： </p><p><img src="G:\BaiduNetdiskDownload\MyCat资料\文档\文档\assets\image-20200108112959564.png" alt="image-20200108112959564"> </p><h3 id="Mycat实现MySQL协议"><a href="#Mycat实现MySQL协议" class="headerlink" title="Mycat实现MySQL协议"></a>Mycat实现MySQL协议</h3><h4 id="MySQL协议简介"><a href="#MySQL协议简介" class="headerlink" title="MySQL协议简介"></a>MySQL协议简介</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>MySQL协议处于应用层之下、TCP/IP之上, 在MySQL客户端和服务端之间使用。包含了链接器、MySQL代理、主从复制服务器之间通信，并支持SSL加密、传输数据的压缩、连接和身份验证及数据交互等。其中，握手认证阶段和命令执行阶段是MySQL协议中的两个重要阶段。</p><h5 id="握手认证阶段"><a href="#握手认证阶段" class="headerlink" title="握手认证阶段"></a>握手认证阶段</h5><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151350.png" alt="image-20200109113445831"> </p><p>A. 握手认证阶段是客户端连接服务器的必经之路, 客户端与服务端完成TCP的三次握手以后, 服务端会向客户端发送一个初始化握手包, 握手包中包含了协议版本、MySQLServer版本、线程ID、服务器的权能标识和字符集等信息。</p><p>B. 客户端在接收到服务端的初始化握手包之后， 会发送身份验证包给服务端（AuthPacket）, 该包中包含用户名、密码等信息。</p><p>C. 服务端接收到客户端的登录验证包之后，需要进行逻辑校验，校验该登录信息是否正确。如果信息都符合，则返回一个OKPacket，表示登录成功,否则返回ERR_Packet，表示拒绝。</p><p>Wireshark抓包如下:</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151353.png" alt="image-20200127165109223"> </p><p>报文分析如下： </p><p>1). 初始化握手包</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151356.png" alt="image-20200109133647751"> </p><p>通过抓包工具Wireshark抓取到的握手包信息如下, 握手包格式:</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151401.png" alt="image-20200127162616334">  </p><p>说明: </p><p>Packet Length : 包的长度;</p><p>Packet Number : 包的序号;</p><p>Server Greeting : 消息体, 包含了协议版本、MySQLServer版本、线程ID和字符集等信息。</p><p>2). 登录认证包</p><p>客户端在接收到服务端发来的初始握手包之后， 向服务端发出认证请求， 该请求包含以下信息（由Wireshark抓获） ： </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151405.png" alt="image-20200127163702804"> </p><p>3). OK包或ERROR包</p><p>服务端接收到客户端的登录认证包之后，如果通过认证，则返回一个OKPacket，如果未通过认证，则返回一个ERROR包。</p><p>OK报文如下： </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151420.png" alt="image-20200127163957990"> </p><p>ERROR报文如下 :</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151425.png" alt="image-20200127165156952"> </p><h5 id="命令执行阶段"><a href="#命令执行阶段" class="headerlink" title="命令执行阶段"></a>命令执行阶段</h5><p>在握手认证阶段通过并完成以后, 客户端可以向服务端发送各种命令来请求数据, 此阶段的流程是: 命令请求-&gt;返回结果集。</p><p>Wireshark 捕获的数据包如下： </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151431.png" alt="image-20200127170112968"> </p><p>1). 命令包</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151436.png" alt="image-20200127170235143"> </p><p>2). 结果集包</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151442.png" alt="image-20200127170823882"> </p><h4 id="MySQL协议在MyCat中实现"><a href="#MySQL协议在MyCat中实现" class="headerlink" title="MySQL协议在MyCat中实现"></a>MySQL协议在MyCat中实现</h4><h5 id="握手认证实现"><a href="#握手认证实现" class="headerlink" title="握手认证实现"></a>握手认证实现</h5><p>在MyCat中同时实现了NIO和AIO, 通过配置可以选择NIO和AIO。MyCat Server在启动阶段已经选择好采用NIO还是AIO，因此建立I/O通道后,MyCat服务端一直等待客户端端的连接,当有连接到来的时候,MyCat首先发送握手包。 </p><p>1). 握手包源码实现</p><p>MyCat中的源码中io.mycat.net.FrontendConnection类的实现如下:</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151448.png" alt="image-20200127183259378"> </p><p>握手包信息组装完毕后, 通过FrontedConnection写回客户端。</p><p>2). 认证包源码实现</p><p>客户端接收到握手包后, 紧接着向服务端发起一个认证包, MyCat封装为类 AuthPacket:</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151502.png" alt="image-20200127231628215"> </p><p>客户端发送的认证包转由 FrontendAuthenticator 的Handler来处理, 主要操作就是 拆包, 检查用户名、密码合法性， 检查连接数是够超出限制。源码实现如下： </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151506.png" alt="image-20200127232022594"> </p><p>认证失败， 调用failure方法， 认证成功调用success方法。</p><p>failure方法源码： </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151510.png" alt="image-20200127232344040"> </p><p>success方法源码： </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151514.png" alt="image-20200127232422887"> </p><h5 id="命令执行实现"><a href="#命令执行实现" class="headerlink" title="命令执行实现"></a>命令执行实现</h5><p>命令执行阶段就是SQL命令和SQL语句执行阶段， 在该阶段MyCat主要需要做的事情， 就是对客户端发来的数据包进行拆包， 并判断命令的类型， 并解析SQL语句， 执行响应的SQL语句， 最后把执行结果封装在结果集包中， 返回给客户端。</p><p>从客户端发来的命令交给 FrontendCommandHandler 中的handle方法处理:</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151520.png" alt="image-20200127235140959"> </p><p>处理具体的请求, 返回客户端结果集数据包: </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151527.png" alt="image-20200128000050787"> </p><h3 id="MyCat线程架构与实现"><a href="#MyCat线程架构与实现" class="headerlink" title="MyCat线程架构与实现"></a>MyCat线程架构与实现</h3><h4 id="MyCat线程池实现"><a href="#MyCat线程池实现" class="headerlink" title="MyCat线程池实现"></a>MyCat线程池实现</h4><p>在MyCat中大量用到了线程池， 通过线程池来避免频繁的创建和销毁线程而造成的系统性能的浪费。在MyCat中使用的线程池是JDK中提供的线程池 ThreadPoolExecutor 的子类 NameableExecutor ， 构造方法如下： </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151532.png" alt="image-20200108114506434"> </p><p>父类构造为： </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151536.png" alt="image-20200108114611505"> </p><p>构造参数含义: </p><p>corePoolSize : 核心池大小</p><p>maximumPoolSize : 最大线程数</p><p>keepAliveTime: 线程没有任务执行时, 最多能够存活多久</p><p>timeUnit: 时间单位</p><p>workQueue: 阻塞任务队列</p><p>threadFactory: 线程工厂, 用来创建线程</p><h4 id="MyCat线程架构"><a href="#MyCat线程架构" class="headerlink" title="MyCat线程架构"></a>MyCat线程架构</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151541.png" alt="image-20200108114952672"> </p><p>在MyCat中主要有两大线程池: timerExecutor 和 businessExecutor。</p><p>1). timerExecutor 线程池主要完成系统时间定时更新、处理器定时检查、数据节点定时连接空闲超时检查、数据节点定时心跳检测等任务。</p><p>2). businessExecutor是MyCat最重要的线程资源池, 该资源池的线程使用的范围非常广, 涵盖以下方面: </p><p>A. 后端用原生协议连接数据</p><p>B. JDBC执行SQL语句</p><p>C. SQL拦截</p><p>D. 数据合并服务</p><p>E. 批量SQL作业</p><p>F. 查询结果的异步分发</p><p>G. 基于guava实现异步回调</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151545.png" alt="image-20200108141645417"> </p><h3 id="MyCat内存管理及缓存框架与实现"><a href="#MyCat内存管理及缓存框架与实现" class="headerlink" title="MyCat内存管理及缓存框架与实现"></a>MyCat内存管理及缓存框架与实现</h3><p>这里所提到的内存管理指的是MyCat缓冲区管理, 众所周知设置缓冲区的唯一目的是提高系统的性能, 缓冲区通常是部分常用的数据存放在缓冲池中以便系统直接访问, 避免使用磁盘IO访问磁盘数据, 从而提高性能。</p><h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h4><p>1). 缓冲池组成</p><p>缓冲池的最小单位为chunk, 默认的chunk大小为4096字节(DEFAULT_BUFFER_CHUNK_SIZE), BufferPool的总大小为4096 x processors x 1000(其中processors为处理器数量)。对I/O进程而言, 他们共享一个缓冲池。缓冲池有两种类型： 本地缓存线程（以$_开头的线程）缓冲区和其他缓冲区， 分配buffer时, 优先获取ThreadLocalPool中的buffer, 没有命中时会获取BufferPool中的buffer。</p><p>2). 分配MyCat缓冲池</p><p>分配缓冲池时, 可以指定大小, 也可以用默认值。</p><p>A. allocate(): 先检测是否为本地线程， 当执行线程为本地缓存线程时， localBufferPool取出一个可用的buffer。如果不是， 则从ConcurrentLinkedQueue队列中取出一个buffer进行分配, 如果队列没有可用的buffer, 则创建一个直接缓冲区。</p><p>B. allocate(size): 如果用户指定的size不大于chunkSize, 则调用allocate()进行分配; 反之则调用createTempBuffer(size)创建临时非直接缓冲区。</p><p>3). MyCat缓冲池的回收</p><p>回收时先判断buffer是否有效, 有如下情况时缓冲池不回收。</p><p>A. 不是直接缓冲区</p><p>B. buffer是空的</p><p>C. buffer的容量大于chunkSize</p><h4 id="MyCat缓存架构"><a href="#MyCat缓存架构" class="headerlink" title="MyCat缓存架构"></a>MyCat缓存架构</h4><p>1). 缓存框架选择</p><p>MyCat支持ehcache、mapdb、leveldb缓存, 可通过配置文件cacheserver.properties来进行配置;</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151549.png" alt="image-20200108154627518"> </p><p>2). 缓存内容</p><p>MyCat有路由缓存、表主键到datanode缓存、ER关系缓存。</p><p>A. 路由缓存: 即SQLRouteCache, 根据SQL语句查找路由信息的缓存, 该缓存只是针对select语句, 如果执行了之前已经执行过的某个SQL语句(缓存命中), 那么路由信息就不需要重复计算了, 直接从缓存中获取。</p><p>B. 表主键到datanode缓存: 当分片字段与主键字段不一致时, 直接通过主键值查询时无法定位具体分片的(只能全分片下发), 所以设置该缓存之后, 就可以利用主键值查找到分片名, 缓存的key是ID值, value是节点名。</p><p>C. ER关系缓存: 在ER分片时使用, 而且在insert查询中才会使用缓存, 当字表插入数据时, 根据父子关联字段确定子表分片, 下次可以直接从缓存中获取所在的分片。 </p><p>查看缓存指令： show @@cache；</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151553.png" alt="image-20200108155642414"> </p><h3 id="MyCat连接池架构与实现"><a href="#MyCat连接池架构与实现" class="headerlink" title="MyCat连接池架构与实现"></a>MyCat连接池架构与实现</h3><p>这里我们所讨论的连接池是MyCat的后端连接池， 也就是MyCat后端与各个数据库节点之间的连接架构。</p><p>1). 连接池创建</p><p>MyCat按照每个dataHost创建一个连接池, 根据schema.xml文件的配置取得最小的连接数minCon,  并初始化minCon个连接。在初始化连接时， 还需要判定用户选择的是JDBC还是原生的MySQL协议， 以便于创建对应的连接。</p><p>2). 连接池分配</p><p>分配连接就是从连接池队列中取出一个连接， 在取出一个连接时， MyCat需要根据负载均衡（balance属性）的类型选择不同的数据源， 因为连接和数据源绑在一起，所以需要知道MyCat读写的是那些数据源， 才能分配响应的连接。 </p><p>3). 架构</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151557.png" alt="image-20200108162456464"> </p><h3 id="MyCat主从切换架构与实现"><a href="#MyCat主从切换架构与实现" class="headerlink" title="MyCat主从切换架构与实现"></a>MyCat主从切换架构与实现</h3><h4 id="MyCat主从切换概述"><a href="#MyCat主从切换概述" class="headerlink" title="MyCat主从切换概述"></a>MyCat主从切换概述</h4><p>MyCat实现MySQL读写分离的目的在于降低单节点数据库的访问压力,  原理就是让主数据库执行增删改操作, 从数据库执行查询操作, 利用MySQL数据库的复制机制将Master的数据同步到slave上。</p><p>当master宕机后，slave承载的业务如何切换到master继续提供服务，以及slave宕机后如何将master切换到slave上。手动切换数据源很简单， 但不是运维工作的首选，本节重点就是讲解如何实现自动切换。</p><p>MyCat的读写分离依赖于MySQL的主从同步, 也就是说MyCat没有实现数据的主从同步功能, 但是实现了自动切换功能。</p><p><strong>1). 自动切换</strong></p><p>自动切换是MyCat主从复制的默认配置 , 当主机或从机宕机后, MyCat自动切换到可用的服务器上。 假设写服务器为M， 读服务器为S， 则： </p><p>正常时， 写M读S；</p><p>当M宕机后， 读写S ； 恢复M后， 写S， 读M ；</p><p>当S宕机后， 读写M ； 恢复S后， 写M， 读S ；</p><p><strong>2). 基于MySQL主从同步状态的切换</strong></p><p>这种切换方式与自动切换不同， MyCat检测到主从数据同步延迟时， 会自动切换到拥有最新数据的MySQL服务器上， 防止读到很久以前的数据。</p><p>原理就是通过检查MySQL的主从同步状态（show slave status）中的Seconds_Behind_Master、Slave_IO_Running、Slave_SQL_Running三个字段,来确定当前主从同步的状态以及主从之间的数据延迟。 Seconds_Behind_Master为0表示没有延迟，数值越大，则说明延迟越高。</p><h4 id="MyCat主从切换实现"><a href="#MyCat主从切换实现" class="headerlink" title="MyCat主从切换实现"></a>MyCat主从切换实现</h4><p>基于延迟的切换， 则判断结果集中的Slave_IO_Running、Slave_SQL_Running两个个字段是否都为yes，以及Seconds_Behind_Master 是否小于配置文件中配置的 slaveThreshold的值, 如果有其中任何一个条件不满足, 则切换。</p><p>主要流程如下:</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151603.png" alt="image-20200128005840029"> </p><h3 id="MyCat核心技术"><a href="#MyCat核心技术" class="headerlink" title="MyCat核心技术"></a>MyCat核心技术</h3><h4 id="MyCat分布式事务实现"><a href="#MyCat分布式事务实现" class="headerlink" title="MyCat分布式事务实现"></a>MyCat分布式事务实现</h4><p>MyCat在1.6版本以后已经支持XA分布式事务类型了。具体的使用流程如下：</p><p>1). 在应用层需要设置事务不能自动提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set autocommit=0;</span><br></pre></td></tr></table></figure><p>2). 在SQL中设置XA为开启状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set xa = on;</span><br></pre></td></tr></table></figure><p>3). 执行SQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user(id,name,sex) values(1,&#x27;Tom&#x27;,&#x27;1&#x27;),(2,&#x27;Rose&#x27;,&#x27;2&#x27;),(3,&#x27;Leo&#x27;,&#x27;1&#x27;),(4,&#x27;Lee&#x27;,&#x27;1&#x27;);</span><br></pre></td></tr></table></figure><p>4). 对事务进行提交或回滚</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit/rollback</span><br></pre></td></tr></table></figure><p>完整流程如下: </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151608.png" alt="image-20200129223657058"> </p><h4 id="MyCat-SQL路由实现"><a href="#MyCat-SQL路由实现" class="headerlink" title="MyCat SQL路由实现"></a>MyCat SQL路由实现</h4><p>MyCat的路由是和SQL解析组件息息相关的, SQL路由模块是MyCat数据库中间件最重要的模块之一, 使用MyCat主要是为了分库分表, 而分库分表的核心就是路由。</p><h5 id="路由的作用"><a href="#路由的作用" class="headerlink" title="路由的作用"></a>路由的作用</h5><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151611.png" alt="image-20200113225535847"> </p><p>如图所示， MyCat接收到应用系统发来的查询语句， 要将其发送到后端连接的MySQL数据库去执行， 但是后端有三个数据库服务器，具体要查询那一台数据库服务器呢， 这就是路由需要实现的功能。</p><p>SQL的路由既要保证数据的完整 ， 也不能造成资源的浪费， 还要保证路由的效率。</p><h5 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h5><p>Mycat1.3版本之前模式使用的是Fdbparser的foundationdb的开源SQL解析器，在2015年被apple收购后，从开源变为闭源了。</p><p>目前版本的MyCat采用的是Druid的SQL解析器， 性能比采用Fdbparser整体性能提高20%以上。</p><h4 id="MyCat跨库Join"><a href="#MyCat跨库Join" class="headerlink" title="MyCat跨库Join"></a>MyCat跨库Join</h4><h5 id="全局表"><a href="#全局表" class="headerlink" title="全局表"></a>全局表</h5><p>每个企业级的系统中, 都会存在一些系统的基础信息表, 类似于字典表、省份、城市、区域、语言表等， 这些表与业务表之间存在关系， 但不是业务主从关系，而是一种属性关系。</p><p>当我们对业务表进行分片处理时， 可以将这些基础信息表设置为全局表， 也就是在每个节点中都存在该表。</p><p>全局表的特性如下： </p><p>A. 全局表的insert、update、delete操作会实时地在所有节点同步执行, 保持各个节点数据的一致性</p><p>B. 全局表的查询操作会从任意节点执行,因为所有节点的数据都一致</p><p>C. 全局表可以和任意表进行join操作</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151616.png" alt="image-20200128013501684"> </p><h5 id="ER表"><a href="#ER表" class="headerlink" title="ER表"></a>ER表</h5><p>关系型数据库是基于实体关系模型(Entity Relationship Model)的, MyCat中的ER表便来源于此。 MyCat提出了基于ER关系的数据分片策略 , 子表的记录与其所关联的父表的记录存放在同一个数据分片中, 通过表分组(Table Group)保证数据关联查询不会跨库操作。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151619.png" alt="image-20200129101108379"> </p><h5 id="catlet"><a href="#catlet" class="headerlink" title="catlet"></a>catlet</h5><p>catlet是MyCat为了解决跨分片Join提出的一种创新思路, 也叫做人工智能(HBT)。MyCat参考了数据库中存储过程的实现方式，提出类似的跨库解决方案，用户可以根据系统提供的API接口实现跨分片Join。</p><p>采用这种方案开发时,必须要实现Catlet接口的两个方法 :</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151623.png" alt="image-20200129104415975"> </p><p>route 方法: 路由的方法, 传递系统配置和schema配置等 ;</p><p>processSQL方法: EngineCtx执行SQL并给客户端返回结果集 ;</p><p>当我们自定义Catlet完成之后, 需要将Catlet的实现类进行编译,并将其字节码文件 XXXCatlet.class存放在mycat_home/catlet目录下, 系统会加载相关Class, 而且每隔1分钟扫描一次文件是否更新, 若更新则自动重新加载,因此无需重启服务。</p><p><strong>ShareJoin</strong></p><p>ShareJoin 是Catlet的实现， 是一个简单的跨分片Join， 目前支持两个表的Join，原理就是解析SQL语句， 拆分成单表的语句执行， 单后把各个节点的数据进行汇集。</p><p>要想使用Catlet完成join， 还需要借助于MyCat中的注解， 在执行SQL语句时，使用catlet注解:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!mycat:catlet=demo.catlets.ShareJoin */</span> <span class="keyword">select</span> a.id <span class="keyword">as</span> aid , a.id , b.id <span class="keyword">as</span> bid , b.name <span class="keyword">as</span> name <span class="keyword">from</span> customer a, company b <span class="keyword">where</span> a.company_id<span class="operator">=</span>b.id <span class="keyword">and</span> a.id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="MyCat数据汇聚与排序"><a href="#MyCat数据汇聚与排序" class="headerlink" title="MyCat数据汇聚与排序"></a>MyCat数据汇聚与排序</h4><p>通过MyCat实现数据汇聚和排序,不仅可以减少各分片与客户端之间的数据传输IO, 也可以帮助开发者总复杂的数据处理中解放出来,从而专注于开发业务代码。</p><p>在MySQL中存在两种排序方式： 一种利用有序索引获取有序数据， 另一种通过相应的排序算法将获取到的数据在内存中进行排序。 而MyCat中数据排序采用堆排序法对多个分片返回有序数据，并在合并、排序后再返回给客户端。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151627.png" alt="image-20200129113055429"> </p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> MyCat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyCat </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyCat(九)---案例</title>
      <link href="2021/06/19/MyCat(%E4%B9%9D)---%E6%A1%88%E4%BE%8B/"/>
      <url>2021/06/19/MyCat(%E4%B9%9D)---%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="案例概述"><a href="#案例概述" class="headerlink" title="案例概述"></a>案例概述</h3><h4 id="案例介绍"><a href="#案例介绍" class="headerlink" title="案例介绍"></a>案例介绍</h4><p>本案例将模拟电商项目中的商品管理、订单管理、基础信息管理、日志管理模块，对整个系统中的数据表进行分片操作，将根据不同的业务需求，采用不同的分片方式 。</p><h4 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151634.png" alt="image-20200201153127417"> </p><p>本案例涉及到的模块： </p><p>1). 商品微服务</p><p>2). 订单微服务</p><p>3). 日志微服务</p><h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><ul><li><p>SpringBoot</p></li><li><p>SpringCloud</p></li><li><p>SpringMVC</p></li><li><p>Mybatis</p></li><li><p>SpringDataRedis</p></li><li><p>MySQL</p></li><li><p>Redis</p></li><li><p>Lombok</p></li></ul><h3 id="案例需求"><a href="#案例需求" class="headerlink" title="案例需求"></a>案例需求</h3><p>1). 商品管理</p><p>A. 添加商品</p><p>B. 查询商品</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151639.png" alt="image-20200201194027874"> </p><p>2). 订单管理</p><p>A. 下订单</p><p>B. 查询订单</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151643.png" alt="image-20200201194121792"> </p><p>3). 日志管理</p><p>A. 日志记录</p><p>B. 日志查询</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151646.png" alt="image-20200201194159102"> </p><h3 id="案例环境搭建"><a href="#案例环境搭建" class="headerlink" title="案例环境搭建"></a>案例环境搭建</h3><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>1). 省份表 tb_provinces</p><table><thead><tr><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>provinceid</td><td>varchar(20)</td><td>省份ID</td></tr><tr><td>province</td><td>varchar(50)</td><td>省份名称</td></tr></tbody></table><p>2). 市表 tb_cities</p><table><thead><tr><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>cityid</td><td>varchar(20)</td><td>城市ID</td></tr><tr><td>city</td><td>varchar(50)</td><td>城市名称</td></tr><tr><td>provinceid</td><td>varchar(20)</td><td>省份ID</td></tr></tbody></table><p>3). 区县表 tb_areas</p><table><thead><tr><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>areaid</td><td>varchar(20)</td><td>区域ID</td></tr><tr><td>area</td><td>varchar(50)</td><td>区域名称</td></tr><tr><td>cityid</td><td>varchar(20)</td><td>城市ID</td></tr></tbody></table><p>4). 商品分类表 tb_category</p><table><thead><tr><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>id</td><td>int(20)</td><td>分类ID</td></tr><tr><td>name</td><td>varchar(50)</td><td>分类名称</td></tr><tr><td>goods_num</td><td>int(11)</td><td>商品数量</td></tr><tr><td>is_show</td><td>char(1)</td><td>是否显示</td></tr><tr><td>is_menu</td><td>char(1)</td><td>是否导航</td></tr><tr><td>seq</td><td>int(11)</td><td>排序</td></tr><tr><td>parent_id</td><td>int(20)</td><td>上级ID</td></tr></tbody></table><p>5). 品牌表 tb_brand</p><table><thead><tr><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>品牌id</td></tr><tr><td>name</td><td>varchar(100)</td><td>品牌名称</td></tr><tr><td>image</td><td>varchar(1000)</td><td>品牌图片地址</td></tr><tr><td>letter</td><td>char(1)</td><td>品牌的首字母</td></tr><tr><td>seq</td><td>int(11)</td><td>排序</td></tr></tbody></table><p>6). 商品SPU表 tb_spu</p><table><thead><tr><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>id</td><td>varchar(20)</td><td>主键</td></tr><tr><td>sn</td><td>varchar(60)</td><td>货号</td></tr><tr><td>name</td><td>varchar(100)</td><td>SPU名</td></tr><tr><td>caption</td><td>varchar(100)</td><td>副标题</td></tr><tr><td>brand_id</td><td>int(11)</td><td>品牌ID</td></tr><tr><td>category1_id</td><td>int(20)</td><td>一级分类</td></tr><tr><td>category2_id</td><td>int(10)</td><td>二级分类</td></tr><tr><td>category3_id</td><td>int(10)</td><td>三级分类</td></tr><tr><td>template_id</td><td>int(20)</td><td>模板ID</td></tr><tr><td>freight_id</td><td>int(11)</td><td>运费模板id</td></tr><tr><td>image</td><td>varchar(200)</td><td>图片</td></tr><tr><td>images</td><td>varchar(2000)</td><td>图片列表</td></tr><tr><td>sale_service</td><td>varchar(50)</td><td>售后服务</td></tr><tr><td>introduction</td><td>text</td><td>介绍</td></tr><tr><td>spec_items</td><td>varchar(3000)</td><td>规格列表</td></tr><tr><td>para_items</td><td>varchar(3000)</td><td>参数列表</td></tr><tr><td>sale_num</td><td>int(11)</td><td>销量</td></tr><tr><td>comment_num</td><td>int(11)</td><td>评论数</td></tr><tr><td>is_marketable</td><td>char(1)</td><td>是否上架</td></tr><tr><td>is_enable_spec</td><td>char(1)</td><td>是否启用规格</td></tr><tr><td>is_delete</td><td>char(1)</td><td>是否删除</td></tr><tr><td>status</td><td>char(1)</td><td>审核状态</td></tr></tbody></table><p>7). 商品SKU表 tb_sku</p><table><thead><tr><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>id</td><td>varchar(20)</td><td>商品id</td></tr><tr><td>sn</td><td>varchar(100)</td><td>商品条码</td></tr><tr><td>name</td><td>varchar(200)</td><td>SKU名称</td></tr><tr><td>price</td><td>int(20)</td><td>价格（分）</td></tr><tr><td>num</td><td>int(10)</td><td>库存数量</td></tr><tr><td>alert_num</td><td>int(11)</td><td>库存预警数量</td></tr><tr><td>image</td><td>varchar(200)</td><td>商品图片</td></tr><tr><td>images</td><td>varchar(2000)</td><td>商品图片列表</td></tr><tr><td>weight</td><td>int(11)</td><td>重量（克）</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>update_time</td><td>datetime</td><td>更新时间</td></tr><tr><td>spu_id</td><td>varchar(20)</td><td>SPUID</td></tr><tr><td>category_id</td><td>int(10)</td><td>类目ID</td></tr><tr><td>category_name</td><td>varchar(200)</td><td>类目名称</td></tr><tr><td>brand_name</td><td>varchar(100)</td><td>品牌名称</td></tr><tr><td>spec</td><td>varchar(200)</td><td>规格</td></tr><tr><td>sale_num</td><td>int(11)</td><td>销量</td></tr><tr><td>comment_num</td><td>int(11)</td><td>评论数</td></tr><tr><td>status</td><td>char(1)</td><td>商品状态 1-正常，2-下架，3-删除</td></tr><tr><td>version</td><td>int(255)</td><td></td></tr></tbody></table><p>8). 订单表 tb_order</p><table><thead><tr><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>id</td><td>varchar(200)</td><td>订单id</td></tr><tr><td>total_num</td><td>int(11)</td><td>数量合计</td></tr><tr><td>total_money</td><td>int(11)</td><td>金额合计</td></tr><tr><td>pre_money</td><td>int(11)</td><td>优惠金额</td></tr><tr><td>post_fee</td><td>int(11)</td><td>邮费</td></tr><tr><td>pay_money</td><td>int(11)</td><td>实付金额</td></tr><tr><td>pay_type</td><td>varchar(1)</td><td>支付类型，1、在线支付、0 货到付款</td></tr><tr><td>create_time</td><td>datetime</td><td>订单创建时间</td></tr><tr><td>update_time</td><td>datetime</td><td>订单更新时间</td></tr><tr><td>pay_time</td><td>datetime</td><td>付款时间</td></tr><tr><td>consign_time</td><td>datetime</td><td>发货时间</td></tr><tr><td>end_time</td><td>datetime</td><td>交易完成时间</td></tr><tr><td>close_time</td><td>datetime</td><td>交易关闭时间</td></tr><tr><td>shipping_name</td><td>varchar(20)</td><td>物流名称</td></tr><tr><td>shipping_code</td><td>varchar(20)</td><td>物流单号</td></tr><tr><td>username</td><td>varchar(50)</td><td>用户名称</td></tr><tr><td>buyer_message</td><td>varchar(1000)</td><td>买家留言</td></tr><tr><td>buyer_rate</td><td>char(1)</td><td>是否评价</td></tr><tr><td>receiver_contact</td><td>varchar(50)</td><td>收货人</td></tr><tr><td>receiver_mobile</td><td>varchar(12)</td><td>收货人手机</td></tr><tr><td>receiver_province</td><td>varchar(200)</td><td>收货人省份</td></tr><tr><td>receiver_city</td><td>varchar(200)</td><td>收货人市</td></tr><tr><td>receiver_area</td><td>varchar(200)</td><td>收货人区/县</td></tr><tr><td>receiver_address</td><td>varchar(200)</td><td>收货人具体街道地址</td></tr><tr><td>source_type</td><td>char(1)</td><td>订单来源：1:web，2：app，3：微信公众号，4：微信小程序 5 H5手机页面</td></tr><tr><td>transaction_id</td><td>varchar(30)</td><td>交易流水号</td></tr><tr><td>order_status</td><td>char(1)</td><td>订单状态</td></tr><tr><td>pay_status</td><td>char(1)</td><td>支付状态 0:未支付 1:已支付</td></tr><tr><td>consign_status</td><td>char(1)</td><td>发货状态 0:未发货 1:已发货 2:已送达</td></tr><tr><td>is_delete</td><td>char(1)</td><td>是否删除</td></tr></tbody></table><p>9). 订单明细表 tb_order_item</p><table><thead><tr><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>id</td><td>varchar(200)</td><td>ID</td></tr><tr><td>category_id1</td><td>int(11)</td><td>1级分类</td></tr><tr><td>category_id2</td><td>int(11)</td><td>2级分类</td></tr><tr><td>category_id3</td><td>int(11)</td><td>3级分类</td></tr><tr><td>spu_id</td><td>varchar(200)</td><td>SPU_ID</td></tr><tr><td>sku_id</td><td>varchar(200)</td><td>SKU_ID</td></tr><tr><td>order_id</td><td>varchar(200)</td><td>订单ID</td></tr><tr><td>name</td><td>varchar(200)</td><td>商品名称</td></tr><tr><td>price</td><td>int(20)</td><td>单价</td></tr><tr><td>num</td><td>int(10)</td><td>数量</td></tr><tr><td>money</td><td>int(20)</td><td>总金额</td></tr><tr><td>pay_money</td><td>int(11)</td><td>实付金额</td></tr><tr><td>image</td><td>varchar(200)</td><td>图片地址</td></tr><tr><td>weight</td><td>int(11)</td><td>重量</td></tr><tr><td>post_fee</td><td>int(11)</td><td>运费</td></tr><tr><td>is_return</td><td>char(1)</td><td>是否退货</td></tr></tbody></table><p>10). 订单日志表 tb_order_log </p><table><thead><tr><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>id</td><td>varchar(20)</td><td>ID</td></tr><tr><td>operater</td><td>varchar(50)</td><td>操作员</td></tr><tr><td>operate_time</td><td>datetime</td><td>操作时间</td></tr><tr><td>order_id</td><td>bigint(20)</td><td>订单ID</td></tr><tr><td>order_status</td><td>char(1)</td><td>订单状态</td></tr><tr><td>pay_status</td><td>char(1)</td><td>付款状态</td></tr><tr><td>consign_status</td><td>char(1)</td><td>发货状态</td></tr><tr><td>remarks</td><td>varchar(100)</td><td>备注</td></tr></tbody></table><p>11). 操作日志表 tb_operatelog</p><table><thead><tr><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>id</td><td>bigint(20)</td><td>ID</td></tr><tr><td>model_name</td><td>varchar(200)</td><td>模块名</td></tr><tr><td>model_value</td><td>varchar(200)</td><td>模块值</td></tr><tr><td>return_value</td><td>varchar(200)</td><td>返回值</td></tr><tr><td>return_class</td><td>varchar(200)</td><td>返回值类型</td></tr><tr><td>operate_user</td><td>varchar(20)</td><td>操作用户</td></tr><tr><td>operate_time</td><td>varchar(20)</td><td>操作时间</td></tr><tr><td>param_and_value</td><td>varchar(500)</td><td>请求参数名及参数值</td></tr><tr><td>operate_class</td><td>varchar(200)</td><td>操作类</td></tr><tr><td>operate_method</td><td>varchar(200)</td><td>操作方法</td></tr><tr><td>cost_time</td><td>bigint(20)</td><td>执行方法耗时, 单位 ms</td></tr></tbody></table><p>12). 字典表 tb_dictionary</p><table><thead><tr><th>Field</th><th>Type</th><th>Comment</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>主键ID , 自增</td></tr><tr><td>codeid</td><td>int(11)</td><td>码表ID</td></tr><tr><td>codetype</td><td>varchar(2)</td><td>码值类型</td></tr><tr><td>codename</td><td>varchar(50)</td><td>名称</td></tr><tr><td>codevalue</td><td>varchar(50)</td><td>码值</td></tr><tr><td>description</td><td>varchar(100)</td><td>描述</td></tr><tr><td>createtime</td><td>datetime</td><td>创建时间</td></tr><tr><td>updatetime</td><td>datetime</td><td>修改时间</td></tr><tr><td>createuser</td><td>int(11)</td><td>创建人</td></tr><tr><td>updateuser</td><td>int(11)</td><td>修改人</td></tr></tbody></table><h4 id="工程预览"><a href="#工程预览" class="headerlink" title="工程预览"></a>工程预览</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151707.png" alt="image-20200201201704741"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-starter-parent</span><br><span class="line">    |- v_parent--------------------&gt; 父工程, 统一管理依赖版本</span><br><span class="line">        |- v_common ----------------&gt; 通用工程, 存放通用的工具类及组件</span><br><span class="line">        |- v_model -----------------&gt; 实体类</span><br><span class="line">        |- v_eureka ----------------&gt; 注册中心</span><br><span class="line">        |- v_feign_api -------------&gt; feign远程调用的客户端接口</span><br><span class="line">        |- v_gateway ---------------&gt; 网关工程</span><br><span class="line">        |- v_manage_web ------------&gt; 模拟前端工程</span><br><span class="line">        |- v_service_goods ---------&gt; 商品微服务</span><br><span class="line">        |- v_service_log -----------&gt; 日志微服务</span><br><span class="line">        |- v_service_order ---------&gt; 订单微服务</span><br></pre></td></tr></table></figure><h4 id="工程层级关系"><a href="#工程层级关系" class="headerlink" title="工程层级关系"></a>工程层级关系</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151710.png" alt="image-20200205010155489"> </p><h4 id="父工程搭建"><a href="#父工程搭建" class="headerlink" title="父工程搭建"></a>父工程搭建</h4><p>工程名: v_parent</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springBoot项目需要集成自父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--依赖包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MySQL数据库驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis分页插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.51<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基础工程搭建"><a href="#基础工程搭建" class="headerlink" title="基础工程搭建"></a>基础工程搭建</h4><p>1). v_model</p><p>该基础工程中存放的是与数据库对应的实体类 ;</p><p>A. pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>B. 导入实体类</p><p>2). v_common</p><p>该基础工程中存放的是通用的组件及工具类 , 比如 分页实体类, 结果实体类, 状态码 等</p><p>直接导入资料中提供的基础组件和工具类 ;</p><p>3). v_feign_api</p><p>该工程中, 主要存放的是Feign远程调用的客户端接口;</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Feign起步依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>v_common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>v_model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Eureka-Server搭建"><a href="#Eureka-Server搭建" class="headerlink" title="Eureka Server搭建"></a>Eureka Server搭建</h4><p>1). pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2). 引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3). application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8161</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#是否将自己注册到eureka中</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#是否从eureka中获取信息</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="GateWay-网关搭建"><a href="#GateWay-网关搭建" class="headerlink" title="GateWay 网关搭建"></a>GateWay 网关搭建</h4><p>1). pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2). 引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GateWayApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3). application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8161/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">v_goods_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://goods</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/goods/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">v_order_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://order</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure><p>4). Cors配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.CorsWebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.pattern.PathPatternParser;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource(<span class="keyword">new</span> PathPatternParser());</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, buildConfig());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> CorsConfiguration <span class="title">buildConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line"><span class="comment">//在生产环境上最好指定域名，以免产生跨域安全问题</span></span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> corsConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="功能开发"><a href="#功能开发" class="headerlink" title="功能开发"></a>功能开发</h3><h4 id="商品管理模块"><a href="#商品管理模块" class="headerlink" title="商品管理模块"></a>商品管理模块</h4><p>需求 : </p><p>1). 根据ID查询商品SPU信息;</p><p>2). 根据条件查询商品SPU列表;</p><p>3). 根据ID查询商品SKU信息;</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151722.png" alt="image-20200216225916691"> </p><p>概念: </p><p>1). SPU = Standard Product Unit  （标准产品单位）</p><p>概念 : SPU 是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。<br>通俗点讲，属性值、特性相同的货品就可以称为一个 SPU</p><p>例如：华为P30 就是一个 SPU</p><p>2). SKU=stock keeping unit( 库存量单位)</p><p>SKU  即库存进出计量的单位， 可以是以件、盒、托盘等为单位。<br>SKU  是物理上不可分割的最小存货单元。在使用时要根据不同业态，不同管理模式来处理。在服装、鞋类商品中使用最多最普遍。</p><p>例如：红色 64G 全网通 的华为P30 就是一个 SKU</p><h5 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h5><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- Eureka客户端依赖 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--MySQL数据库驱动--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--mybatis分页插件--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- redis 使用--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- fastJson依赖 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- Feign依赖 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>v_common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>v_model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>v_feign_api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">goods</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/v_shop?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">2143</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span> <span class="comment">#当遇到同样名字的时候，是否允许覆盖注册</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8161/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;cn.itcast.feign&quot;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.goods.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GoodsApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h5><p>1). mapper接口定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpuMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbSpu <span class="title">findById</span><span class="params">(String spuId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TbSpu&gt; <span class="title">search</span><span class="params">(Map&lt;String,Object&gt; searchMap)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkuMapper</span>  </span>&#123;</span><br><span class="line">    <span class="comment">//根据ID查询SKU</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbSku <span class="title">findById</span><span class="params">(String skuId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2). mapper映射配置文件</p><p>SpuMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.itcast.goods.mapper.SpuMapper&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;spuResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cn.itcast.model.TbSpu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sn&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sn&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;caption&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;caption&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandId&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;category1_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;category1Id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;category2_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;category2Id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;category3_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;category3Id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;template_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;templateId&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;freight_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;freightId&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;image&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;image&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;images&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;images&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sale_service&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;saleService&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;spec_items&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;specItems&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;para_items&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;paraItems&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sale_num&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;saleNum&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;comment_num&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;commentNum&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_marketable&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isMarketable&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_enable_spec&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isEnableSpec&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_delete&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isDelete&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;spuResultMap&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">            *</span><br><span class="line">        from</span><br><span class="line">            tb_spu</span><br><span class="line">        where</span><br><span class="line">            id = #&#123;spuId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;search&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;spuResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_spu</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and name like &#x27;%$&#123;name&#125;%&#x27;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;caption != null and caption != &#x27;&#x27;&quot;</span> &gt;</span></span><br><span class="line">                and caption like &#x27;%$&#123;caption&#125;%&#x27;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandId != null&quot;</span>&gt;</span></span><br><span class="line">                and brand_id = #&#123;brandId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null and status != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and status = #&#123;status&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SkuMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.itcast.goods.mapper.SkuMapper&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;skuResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cn.itcast.model.TbSku&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sn&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sn&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;num&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;num&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;alert_num&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;alertNum&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;image&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;image&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;images&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;images&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;weight&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;weight&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;spu_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;spuId&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;category_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;categoryId&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;category_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;categoryName&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;spec&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;spec&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sale_num&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;saleNum&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;comment_num&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;commentNum&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;version&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;version&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;skuResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_sku where id = #&#123;skuId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><p>1). 接口定义 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkuService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID查询SKU</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> skuId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbSku <span class="title">findById</span><span class="params">(String skuId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpuService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TbSpu <span class="title">findById</span><span class="params">(String id)</span></span>;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 多条件分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Page&lt;TbSpu&gt; <span class="title">findPage</span><span class="params">(Map&lt;String, Object&gt; searchMap, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2).接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkuServiceImpl</span> <span class="keyword">implements</span> <span class="title">SkuService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SkuMapper skuMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbSku <span class="title">findById</span><span class="params">(String skuId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> skuMapper.findById(skuId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpuServiceImpl</span> <span class="keyword">implements</span> <span class="title">SpuService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpuMapper spuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbSpu <span class="title">findById</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  spuMapper.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件+分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchMap 查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 页大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;TbSpu&gt; <span class="title">findPage</span><span class="params">(Map&lt;String,Object&gt; searchMap, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        PageHelper.startPage(page,size);</span><br><span class="line">        <span class="keyword">return</span> (Page&lt;TbSpu&gt;) spuMapper.search(searchMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;*&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sku&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkuController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SkuService skuService;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 根据ID查询数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;TbSku&gt; <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span></span>&#123;</span><br><span class="line">        TbSku sku = skuService.findById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,sku);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;*&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/spu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpuController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpuService spuService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 根据ID查询数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;TbSpu&gt; <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span></span>&#123;</span><br><span class="line">        TbSpu spu = spuService.findById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,spu);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 分页搜索实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/search/&#123;page&#125;/&#123;size&#125;&quot; )</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result&lt;TbSpu&gt; <span class="title">findPage</span><span class="params">(<span class="meta">@RequestBody</span> Map searchMap, <span class="meta">@PathVariable</span>  Integer page, <span class="meta">@PathVariable</span>  Integer size)</span></span>&#123;</span><br><span class="line">        com.github.pagehelper.Page&lt;TbSpu&gt; pageList = spuService.findPage(searchMap, page, size);</span><br><span class="line">        PageResult pageResult=<span class="keyword">new</span> PageResult&lt;TbSpu&gt;(pageList.getTotal(),pageList.getResult());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;TbSpu&gt;(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,pageResult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h4><p>需求:</p><p>1). 下单业务分析</p><p>2). 根据条件分页查询订单</p><p>表结构: </p><p>tb_order , tb_order_item , tb_order_log</p><h5 id="创建工程-1"><a href="#创建工程-1" class="headerlink" title="创建工程"></a>创建工程</h5><p>1).pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span></span></span><br><span class="line"><span class="tag">     &lt;<span class="attr">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>v_common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>v_model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>v_feign_api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- Eureka客户端依赖 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- springboot - Mybatis 起步依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--MySQL数据库驱动--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--mybatis分页插件--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- redis 使用--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- fastJson依赖 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- Feign依赖 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2). application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">order</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/v_shop?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">2143</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span> <span class="comment">#当遇到同样名字的时候，是否允许覆盖注册</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8161/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span>   <span class="comment">#配置全局的feign的调用超时时间  如果 有指定的服务配置 默认的配置不会生效</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">60000</span> <span class="comment"># 指定的是 消费者 连接服务提供者的连接超时时间 是否能连接  单位是毫秒</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">20000</span>  <span class="comment"># 指定的是调用服务提供者的 服务 的超时时间（）  单位是毫秒</span></span><br></pre></td></tr></table></figure><p>3). 引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="下单业务分析"><a href="#下单业务分析" class="headerlink" title="下单业务分析"></a>下单业务分析</h5><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151735.png" alt="image-20200217102815624"></p><h5 id="查询订单"><a href="#查询订单" class="headerlink" title="查询订单"></a>查询订单</h5><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151740.png" alt="image-20200217141007643"> </p><h6 id="Mapper-1"><a href="#Mapper-1" class="headerlink" title="Mapper"></a>Mapper</h6><p>1). mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TbOrder&gt; <span class="title">search</span><span class="params">(Map&lt;String,Object&gt; searchMap)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2). mapper映射配置文件</p><p>OrderMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.itcast.order.mapper.OrderMapper&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cn.itcast.model.TbOrder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total_num&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;totalNum&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total_money&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;totalMoney&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pre_money&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;preMoney&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;post_fee&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;postFee&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pay_money&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;payMoney&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pay_type&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;payType&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pay_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;payTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;consign_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;consignTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;end_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;endTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;close_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span> <span class="attr">property</span>=<span class="string">&quot;closeTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;shipping_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;shippingName&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;shipping_code&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;shippingCode&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;buyer_message&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;buyerMessage&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;buyer_rate&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;buyerRate&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;receiver_contact&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;receiverContact&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;receiver_mobile&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;receiverMobile&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;receiver_province&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;receiverProvince&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;receiver_city&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;receiverCity&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;receiver_area&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;receiverArea&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;receiver_address&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;receiverAddress&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;source_type&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sourceType&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;transaction_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;transactionId&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;order_status&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderStatus&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pay_status&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;payStatus&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;consign_status&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;consignStatus&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_delete&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;CHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isDelete&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;search&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.itcast.model.TbOrder&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            o.id ,</span><br><span class="line">            o.`create_time` createTime,</span><br><span class="line">            o.username ,</span><br><span class="line">            o.`total_money` totalMoney,</span><br><span class="line">            o.`total_num` totalNum,</span><br><span class="line">            o.`pay_type` payType,</span><br><span class="line">            o.`pay_status` payStatus,</span><br><span class="line"></span><br><span class="line">            p.`province` receiverProvince</span><br><span class="line">        FROM</span><br><span class="line">            tb_order o , tb_provinces p</span><br><span class="line">        WHERE</span><br><span class="line">            o.receiver_province = p.provinceid</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;orderId != null and orderId != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and o.id = #&#123;orderId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;payType != null and payType != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and o.pay_type = #&#123;payType&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and o.username = #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;payStatus != null and payStatus != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and o.order_status = #&#123;payStatus&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="Service-1"><a href="#Service-1" class="headerlink" title="Service"></a>Service</h6><p>service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 新增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> order</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(TbOrder order)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 多条件分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Page&lt;TbOrder&gt; <span class="title">findPage</span><span class="params">(Map&lt;String, Object&gt; searchMap, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderItemMapper orderItemMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IdWorker idWorker;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> order</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(TbOrder order)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取购物车的相关数据(redis)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.统计计算:总金额,总数量</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.填充订单数据并保存到tb_order</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.填充订单项数据并保存到tb_order_item</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.记录订单日志</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//6.扣减库存并增加销量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.删除购物车数据(redis)</span></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件+分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchMap 查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 页大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;TbOrder&gt; <span class="title">findPage</span><span class="params">(Map&lt;String,Object&gt; searchMap, <span class="keyword">int</span> page, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">        PageHelper.startPage(page,size);</span><br><span class="line">        <span class="keyword">return</span> (Page&lt;TbOrder&gt;)orderMapper.search(searchMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin(value = &#123;&quot;*&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@OperateLog</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> TbOrder order)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取登录人名称</span></span><br><span class="line">        orderService.add(order);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;提交成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 分页搜索实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/search/&#123;page&#125;/&#123;size&#125;&quot; )</span></span><br><span class="line">    <span class="meta">@OperateLog</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findPage</span><span class="params">(<span class="meta">@RequestBody</span> Map searchMap, <span class="meta">@PathVariable</span>  Integer page, <span class="meta">@PathVariable</span>  Integer size)</span></span>&#123;</span><br><span class="line">        Page&lt;TbOrder&gt; pageList = orderService.findPage(searchMap, page, size);</span><br><span class="line">        PageResult pageResult=<span class="keyword">new</span> PageResult(pageList.getTotal(),pageList.getResult());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,pageResult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志模块"><a href="#日志模块" class="headerlink" title="日志模块"></a>日志模块</h4><p>表结构: </p><p>tb_operatelog</p><p>需求: </p><p>1). 记录日志</p><p>2). 查询日志</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151748.png" alt="image-20200205224758890"> </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151752.png" alt="image-20200218031150324"> </p><h5 id="创建工程-2"><a href="#创建工程-2" class="headerlink" title="创建工程"></a>创建工程</h5><p>1). pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>v_common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>v_model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>v_feign_api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Eureka客户端依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--MySQL数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mybatis分页插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- fastJson依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Feign依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2). application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/v_shop?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">2143</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span> <span class="comment">#当遇到同样名字的时候，是否允许覆盖注册</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8161/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3). 引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;cn.itcast.log.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LogApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IdWorker <span class="title">idworker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IdWorker(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分布式ID生成</strong></p><p>snowflake是 Twitter 开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0 ;</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151758.png" alt="image-20200218010603410"> </p><p>使用方式: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IdWorker idWorker=<span class="keyword">new</span> IdWorker(<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//0-31 , 0-31</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">long</span> id = idWorker.nextId();</span><br><span class="line">System.out.println(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Mapper-2"><a href="#Mapper-2" class="headerlink" title="Mapper"></a>Mapper</h5><p>mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OperateLogMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(TbOperatelog operationLog)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TbOperatelog&gt; <span class="title">search</span><span class="params">(Map searchMap)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OperateLogMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.itcast.log.mapper.OperateLogMapper&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;operateLogResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;cn.itcast.model.TbOperatelog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;model_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modelName&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;model_value&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modelValue&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;return_value&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;returnValue&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;return_class&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;returnClass&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;operate_user&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;operateUser&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;operate_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;operateTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;param_and_value&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;paramAndValue&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;operate_class&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;operateClass&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;operate_method&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;operateMethod&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;cost_time&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;costTime&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;cn.itcast.model.TbOperatelog&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_operatelog (id, model_name, model_value, </span><br><span class="line">      return_value, return_class, operate_user, </span><br><span class="line">      operate_time, param_and_value, operate_class, </span><br><span class="line">      operate_method, cost_time)</span><br><span class="line">    values (#&#123;id&#125;, #&#123;modelName&#125;, #&#123;modelValue&#125;, </span><br><span class="line">      #&#123;returnValue&#125;, #&#123;returnClass&#125;, #&#123;operateUser&#125;, </span><br><span class="line">      #&#123;operateTime&#125;, #&#123;paramAndValue&#125;, #&#123;operateClass&#125;, </span><br><span class="line">      #&#123;operateMethod&#125;, #&#123;costTime&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;search&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;operateLogResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_operatelog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;operateUser != null and operateUser != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and operate_user = #&#123;operateUser&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;operateMethod != null and operateMethod != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and operate_method = #&#123;operateMethod&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;returnClass != null and returnClass != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and return_class = #&#123;returnClass&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;costTime != null and costTime != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                and cost_time = #&#123;costTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Service-2"><a href="#Service-2" class="headerlink" title="Service"></a>Service</h5><p>接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface OperateLogService &#123;</span><br><span class="line">    public void insert(TbOperatelog operationLog);</span><br><span class="line"></span><br><span class="line">    public Page&lt;TbOperatelog&gt; findPage(Map searchMap, Integer pageNum , Integer pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperateLogServiceImpl</span> <span class="keyword">implements</span> <span class="title">OperateLogService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OperateLogMapper operateLogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(TbOperatelog operationLog)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> id = idworker.nextId();</span><br><span class="line">        operationLog.setId(id);</span><br><span class="line">        operateLogMapper.insert(operationLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;TbOperatelog&gt; <span class="title">findPage</span><span class="params">(Map searchMap, Integer pageNum , Integer pageSize)</span></span>&#123;</span><br><span class="line">        System.out.println(searchMap);</span><br><span class="line"></span><br><span class="line">        PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">        List&lt;TbOperatelog&gt; list = operateLogMapper.search(searchMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (Page&lt;TbOperatelog&gt;) list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Controller-2"><a href="#Controller-2" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/operateLog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperateLogController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OperateLogService operateLogService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/search/&#123;page&#125;/&#123;size&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findList</span><span class="params">(<span class="meta">@RequestBody</span> Map dataMap, <span class="meta">@PathVariable</span> Integer page, <span class="meta">@PathVariable</span>  Integer size)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Page&lt;TbOperatelog&gt; pageList = operateLogService.findPage(dataMap, page, size);</span><br><span class="line">        PageResult pageResult=<span class="keyword">new</span> PageResult(pageList.getTotal(),pageList.getResult());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,pageResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> TbOperatelog operatelog)</span></span>&#123;</span><br><span class="line">        operateLogService.insert(operatelog);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="AOP记录日志"><a href="#AOP记录日志" class="headerlink" title="AOP记录日志"></a>AOP记录日志</h5><p>在需要记录操作日志的微服务中, 引入AOP记录日志的类 : </p><p>1). 自定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OperateLog &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2). AOP通知类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperateAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OperateLogFeign operateLogFeign;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around(&quot;execution(* cn.itcast.goods.controller.*.*(..)) &amp;&amp; @annotation(operateLog)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">insertLogAround</span><span class="params">(ProceedingJoinPoint pjp , OperateLog operateLog)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot; *********************************** 记录日志 [start]  ****************************** &quot;</span>);</span><br><span class="line"></span><br><span class="line">TbOperatelog op = <span class="keyword">new</span> TbOperatelog();</span><br><span class="line"></span><br><span class="line">DateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">op.setOperateTime(sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">op.setOperateUser(<span class="string">&quot;10000&quot;</span>);</span><br><span class="line"></span><br><span class="line">op.setOperateClass(pjp.getTarget().getClass().getName());</span><br><span class="line">op.setOperateMethod(pjp.getSignature().getName());</span><br><span class="line"></span><br><span class="line">String paramAndValue = <span class="string">&quot;&quot;</span>;</span><br><span class="line">Object[] args = pjp.getArgs();</span><br><span class="line"><span class="keyword">if</span>(args != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line"><span class="keyword">if</span>(arg <span class="keyword">instanceof</span> String || arg <span class="keyword">instanceof</span> Integer || arg <span class="keyword">instanceof</span> Long)&#123;</span><br><span class="line">paramAndValue += arg +<span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">paramAndValue += JSON.toJSONString(arg)+<span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">op.setParamAndValue(paramAndValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start_time = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="comment">//放行</span></span><br><span class="line">Object object = pjp.proceed();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end_time = System.currentTimeMillis();</span><br><span class="line">op.setCostTime(end_time - start_time);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(object != <span class="keyword">null</span>)&#123;</span><br><span class="line">op.setReturnClass(object.getClass().getName());</span><br><span class="line">op.setReturnValue(object.toString());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">op.setReturnClass(<span class="string">&quot;java.lang.Object&quot;</span>);</span><br><span class="line">op.setParamAndValue(<span class="string">&quot;void&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">operateLogFeign.add(op);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot; *********************************** 记录日志 [end]  ****************************** &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MyCat分片"><a href="#MyCat分片" class="headerlink" title="MyCat分片"></a>MyCat分片</h3><p>当前数据库的情况 :</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151808.png" alt="image-20200209111951501"> </p><p>由于当前项目是一个电商项目，项目上线后，随着项目的运营，业务系统的数据库中的数据与日俱增，特别是订单、日志等数据，如果数据量过大，这个时候就需要考虑通过MyCat分库分表。</p><h4 id="分片分析"><a href="#分片分析" class="headerlink" title="分片分析"></a>分片分析</h4><p>1). 垂直拆分</p><p>数据量过大，需要考虑扩容，可以通过MyCat来实现数据库表的垂直拆分，将同一块业务的数据库表拆分到同一个数据库服务中。拆分方式如下： </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151816.png" alt="image-20200209110344132"> </p><p>2). 全局表</p><p>按照上述的方式进行表结构的拆分，可以解决扩容的问题，但是存在另一个问题：由于省、市、区县、数据字典表，在订单及商品等模块中都需要用到，还会涉及到多表连接查询，那么这个时候涉及到跨库的join操作，可以使用全局表来解决。结构图如下： </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151819.png" alt="image-20200209111118652"> </p><p>3). 水平拆分</p><p>即使我们在上述的方案中使用垂直拆分，将系统中的表结构拆分到了三个数据库服务器中，但是对于当前这个比较繁忙的业务系统来说，每天都会产生大量的用户操作日志，长年累月，这张表的数据在单台服务器中已经存储不下了，这个时候，我们就可以使用MyCat的水平拆分来解决这个问题。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151824.png" alt="image-20200209171203841"> </p><h4 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h4><table><thead><tr><th align="left">名称</th><th align="center">IP</th><th align="center">端口</th><th align="center">用户名/密码</th></tr></thead><tbody><tr><td align="left">MyCat-Server</td><td align="center">192.168.192.157</td><td align="center">8066</td><td align="center">root/123456</td></tr><tr><td align="left">MySQL-1</td><td align="center">192.168.192.158</td><td align="center">3306</td><td align="center">root/itcast</td></tr><tr><td align="left">MySQL-2</td><td align="center">192.168.192.159</td><td align="center">3306</td><td align="center">root/itcast</td></tr><tr><td align="left">MySQL-3</td><td align="center">192.168.192.160</td><td align="center">3306</td><td align="center">root/itcast</td></tr><tr><td align="left">MySQL-4</td><td align="center">192.168.192.161</td><td align="center">3306</td><td align="center">root/itcast</td></tr></tbody></table><h4 id="schema-xml"><a href="#schema-xml" class="headerlink" title="schema.xml"></a>schema.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;V_SHOP&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_areas&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3,dn4&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;areaid&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_provinces&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3,dn4&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;provinceid&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_cities&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3,dn4&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;cityid&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_dictionary&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3,dn4&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_brand&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_category&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_sku&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_spu&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_order&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_order_item&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_order_log&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_operatelog&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn3,dn4&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;log-sharding-by-murmur&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;v_goods&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;v_order&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host3&quot;</span> <span class="attr">database</span>=<span class="string">&quot;v_log&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn4&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;host4&quot;</span> <span class="attr">database</span>=<span class="string">&quot;v_log&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.158:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.159:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host3&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.160:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;host4&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM4&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.192.161:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;itcast&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="分片配置"><a href="#分片配置" class="headerlink" title="分片配置"></a>分片配置</h4><p>1). 配置Mycat的schema.xml</p><p>2). 配置rule.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;log-sharding-by-murmur&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>log-murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;log-murmur&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMurmurHash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;seed&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;virtualBucketTimes&quot;</span>&gt;</span>160<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3). 配置server.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>GO0bnFVWrAuFgr1JMuMZkvfDNyTpoiGU7n/Wlsa151CirHQnANVk3NzE3FErx8v6pAcO0ctX3xFecmSr+976QA==<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>V_SHOP<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readOnly&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;benchmark&quot;</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;usingDecrypt&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 表级 DML 权限设置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  &lt;privileges check=&quot;true&quot;&gt;</span></span><br><span class="line"><span class="comment">   &lt;schema name=&quot;ITCAST&quot; dml=&quot;1111&quot; &gt;</span></span><br><span class="line"><span class="comment">    &lt;table name=&quot;TB_TEST&quot; dml=&quot;1110&quot;&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">   &lt;/schema&gt;</span></span><br><span class="line"><span class="comment">  &lt;/privileges&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4). 在各个MySQL数据库实例中创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MySQL-1 : v_goods</span><br><span class="line">MySQL-2 : v_order</span><br><span class="line">MySQL-3 : v_log</span><br><span class="line">MySQL-4 : v_log</span><br></pre></td></tr></table></figure><p>5). 导出本地的SQL脚本 , 在MyCat中执行SQL脚本 , 创建数据表 ,并导入数据</p><p>6). 连接测试</p><h4 id="微服务连接MyCat"><a href="#微服务连接MyCat" class="headerlink" title="微服务连接MyCat"></a>微服务连接MyCat</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.192.157:8066/V_SHOP?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="配置MyCat-Web监控"><a href="#配置MyCat-Web监控" class="headerlink" title="配置MyCat-Web监控"></a>配置MyCat-Web监控</h4><p>1). 启动Zookeeper</p><p>2). 启动MyCat-Web</p><p>3). 访问 </p><p><a href="http://192.168.192.157:8082/mycat">http://192.168.192.157:8082/mycat</a></p><p>界面: </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210628151830.png" alt="image-20200219231604626"> </p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> MyCat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyCat </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL语句</title>
      <link href="2021/06/01/SQL%E8%AF%AD%E5%8F%A5/"/>
      <url>2021/06/01/SQL%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 直接将查询结果导入或复制到新创建的表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> n <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> m;</span><br><span class="line"></span><br><span class="line"># 删除一个存在表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> m;</span><br><span class="line"></span><br><span class="line"># 更改存在表的名称</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n RENAME m;</span><br><span class="line"></span><br><span class="line"># 添加列</span><br><span class="line"><span class="keyword">ALTER</span>  <span class="keyword">TABLE</span>  table_name  <span class="keyword">ADD</span>  列名  <span class="type">INT</span>（<span class="number">11</span>）</span><br><span class="line"></span><br><span class="line"># 删除列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> col;</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable(col1, col2) <span class="keyword">VALUES</span>(val1, val2);</span><br><span class="line"></span><br><span class="line"># 修改数据</span><br><span class="line">UPDATE mytable <span class="keyword">SET</span> col <span class="operator">=</span> val <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"># DESTINCT:去重。相同值只会出现一次。它作用于所有列，也就是说<span class="operator">*</span><span class="operator">*</span>所有列的值都相同才算相同</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> col1, col2 <span class="keyword">FROM</span> mytable;</span><br><span class="line"></span><br><span class="line"># 添加索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">ADD</span> INDEX i_age (age)</span><br></pre></td></tr></table></figure><p><strong>模糊查询通常使用拼接字符串形式：</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">like</span> concat(‘<span class="operator">%</span>’，#&#123;xxx&#125;,<span class="string">&#x27;%&#x27;</span>)</span><br></pre></td></tr></table></figure><p>WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤</p><p>除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> col</span><br><span class="line"><span class="keyword">HAVING</span> num <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>UNION</strong> ：组合查询</p><ul><li><p>使用 <strong>UNION</strong> 来组合两个查询，如果第一个查询返回 M 行，第二个查询返回 N 行，那么组合查询的结果一般为 M+N 行。</p></li><li><p>每个查询必须包含相同的列、表达式和聚集函数。</p></li><li><p>默认会去除相同行，如果需要保留相同行，使用 UNION ALL</p></li><li><p>只能包含一个 ORDER BY 子句，并且必须位于语句的最后。</p></li></ul><p>**IFNULL(expr1,expr2)**：如果第一个参数不为空，则返回第一个参数，否则返回第二个参数。</p><p>**ISNULL(expr)**：判断是否是空，是空则返回1，否则返回0。</p><p>**IF(expr1,expr2,expr3)**：如果第一个表达式的值为TRUE（不为0或null），则返回第二个参数的值，否则返回第三个参数的值。</p><h4 id="SQL的执行顺序"><a href="#SQL的执行顺序" class="headerlink" title="SQL的执行顺序"></a>SQL的执行顺序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)     <span class="keyword">SELECT</span></span><br><span class="line">(<span class="number">2</span>)     <span class="keyword">DISTINCT</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">3</span>)     <span class="keyword">FROM</span> <span class="operator">&lt;</span>left_table<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">4</span>)     <span class="operator">&lt;</span>join_type<span class="operator">&gt;</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>right_table<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">5</span>)     <span class="keyword">ON</span> <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">6</span>)     <span class="keyword">WHERE</span> <span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">7</span>)     <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">8</span>)     <span class="keyword">HAVING</span> <span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">9</span>)     <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>order_by_condition<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">10</span>)    LIMIT <span class="operator">&lt;</span>limit_number<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="case-when-then-else-end"><a href="#case-when-then-else-end" class="headerlink" title="case when then else end"></a>case when then else end</h3><p>语句用于查询满足多种条件的情况，类似java中的if…else，还有的就是用于进行行转列的查询，这个是放在select 子句后面的，是充当的是字段的作用。</p><p>具体用法就是：分为两种，一种是简单的函数形式，另一种就是表达式的形式。</p><p>简单的函数形式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> 字段 <span class="keyword">when</span> 值 <span class="keyword">then</span> 结果 <span class="keyword">else</span> 其他情况 <span class="keyword">end</span>；</span><br></pre></td></tr></table></figure><p>表达式的形式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> 字段<span class="operator">=</span>值（这里写表达式，例如 score<span class="operator">=</span><span class="number">80</span>） <span class="keyword">then</span> 结果 <span class="keyword">else</span> 其他情况 <span class="keyword">end</span>；</span><br></pre></td></tr></table></figure><blockquote><p>注意：<strong>THEN后边的值与ELSE后边的值类型应一致，否则会报错</strong></p></blockquote><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># 聚合函数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(id) <span class="keyword">AS</span> total <span class="keyword">FROM</span> n;   # 总数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(age) <span class="keyword">AS</span> all_age <span class="keyword">FROM</span> n;   # 总和</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">avg</span>(age) <span class="keyword">AS</span> all_age <span class="keyword">FROM</span> n;   # 平均值</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">max</span>(age) <span class="keyword">AS</span> all_age <span class="keyword">FROM</span> n;   # 最大值</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">min</span>(age) <span class="keyword">AS</span> all_age <span class="keyword">FROM</span> n;   # 最小值</span><br><span class="line"># 数学函数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">abs</span>(<span class="number">-5</span>);   # 绝对值</span><br><span class="line"><span class="keyword">SELECT</span> bin(<span class="number">15</span>), oct(<span class="number">15</span>), hex(<span class="number">15</span>);   # 二进制，八进制，十六进制</span><br><span class="line"><span class="keyword">SELECT</span> pi();   # 圆周率<span class="number">3.141593</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ceil</span>(<span class="number">5.5</span>);   # 大于x的最小整数值<span class="number">6</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">floor</span>(<span class="number">5.5</span>);   # 小于x的最大整数值<span class="number">5</span></span><br><span class="line"><span class="keyword">SELECT</span> greatest(<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>);   # 返回集合中最大的值<span class="number">9</span></span><br><span class="line"><span class="keyword">SELECT</span> least(<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>);    # 返回集合中最小的值<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">mod</span>(<span class="number">5</span>,<span class="number">3</span>);    # 余数<span class="number">2</span></span><br><span class="line"><span class="keyword">SELECT</span> rand();    # 返回０到１内的随机值，每次不一样</span><br><span class="line"><span class="keyword">SELECT</span> rand(<span class="number">5</span>);   # 提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</span><br><span class="line"><span class="keyword">SELECT</span> round(<span class="number">1415.1415</span>);   # 四舍五入<span class="number">1415</span></span><br><span class="line"><span class="keyword">SELECT</span> round(<span class="number">1415.1415</span>, <span class="number">3</span>);   # 四舍五入三位数<span class="number">1415.142</span></span><br><span class="line"><span class="keyword">SELECT</span> round(<span class="number">1415.1415</span>, <span class="number">-1</span>);    # 四舍五入整数位数<span class="number">1420</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">truncate</span>(<span class="number">1415.1415</span>, <span class="number">3</span>);    # 截短为<span class="number">3</span>位小数<span class="number">1415.141</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">truncate</span>(<span class="number">1415.1415</span>, <span class="number">-1</span>);   # 截短为<span class="number">-1</span>位小数<span class="number">1410</span></span><br><span class="line"><span class="keyword">SELECT</span> sign(<span class="number">-5</span>);    # 符号的值负数<span class="number">-1</span></span><br><span class="line"><span class="keyword">SELECT</span> sign(<span class="number">5</span>);    # 符号的值正数<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sqrt</span>(<span class="number">9</span>);   # 平方根<span class="number">3</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sqrt</span>(<span class="number">9</span>);   # 平方根<span class="number">3</span></span><br><span class="line"># 字符串函数</span><br><span class="line"><span class="keyword">SELECT</span> concat(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;le&#x27;</span>);   # 连接字符串<span class="operator">-</span>apple</span><br><span class="line"><span class="keyword">SELECT</span> concat_ws(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;le&#x27;</span>);   # 连接用<span class="string">&#x27;,&#x27;</span>分割字符串<span class="operator">-</span>a,p,p,le</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">insert</span>(<span class="string">&#x27;chinese&#x27;</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="string">&#x27;IN&#x27;</span>);    # 将字符串<span class="string">&#x27;chinese&#x27;</span>从<span class="number">3</span>位置开始的<span class="number">2</span>个字符替换为<span class="string">&#x27;IN&#x27;</span><span class="operator">-</span>chINese</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">left</span>(<span class="string">&#x27;chinese&#x27;</span>, <span class="number">4</span>);   # 返回字符串<span class="string">&#x27;chinese&#x27;</span>左边的<span class="number">4</span>个字符<span class="operator">-</span>chin</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">right</span>(<span class="string">&#x27;chinese&#x27;</span>, <span class="number">3</span>);   # 返回字符串<span class="string">&#x27;chinese&#x27;</span>右边的<span class="number">3</span>个字符<span class="operator">-</span>ese</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>(<span class="string">&#x27;chinese&#x27;</span>, <span class="number">3</span>);   # 返回字符串<span class="string">&#x27;chinese&#x27;</span>第三个字符之后的子字符串<span class="operator">-</span>inese</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>(<span class="string">&#x27;chinese&#x27;</span>, <span class="number">-3</span>);   # 返回字符串<span class="string">&#x27;chinese&#x27;</span>倒数第三个字符之后的子字符串<span class="operator">-</span>ese</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">substring</span>(<span class="string">&#x27;chinese&#x27;</span>, <span class="number">3</span>, <span class="number">2</span>);   # 返回字符串<span class="string">&#x27;chinese&#x27;</span>第三个字符之后的两个字符<span class="operator">-</span><span class="keyword">in</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">trim</span>(<span class="string">&#x27; chinese &#x27;</span>);    # 切割字符串<span class="string">&#x27; chinese &#x27;</span>两边的空字符<span class="operator">-</span><span class="string">&#x27;chinese&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> ltrim(<span class="string">&#x27; chinese &#x27;</span>);    # 切割字符串<span class="string">&#x27; chinese &#x27;</span>两边的空字符<span class="operator">-</span><span class="string">&#x27;chinese &#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> rtrim(<span class="string">&#x27; chinese &#x27;</span>);    # 切割字符串<span class="string">&#x27; chinese &#x27;</span>两边的空字符<span class="operator">-</span><span class="string">&#x27; chinese&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> repeat(<span class="string">&#x27;boy&#x27;</span>, <span class="number">3</span>);    # 重复字符<span class="string">&#x27;boy&#x27;</span>三次<span class="operator">-</span><span class="string">&#x27;boyboyboy&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> reverse(<span class="string">&#x27;chinese&#x27;</span>);    # 反向排序<span class="operator">-</span><span class="string">&#x27;esenihc&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> length(<span class="string">&#x27;chinese&#x27;</span>);   # 返回字符串的长度<span class="number">-7</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">upper</span>(<span class="string">&#x27;chINese&#x27;</span>), <span class="built_in">lower</span>(<span class="string">&#x27;chINese&#x27;</span>);    # 大写小写 CHINESE    chinese</span><br><span class="line"><span class="keyword">SELECT</span> ucase(<span class="string">&#x27;chINese&#x27;</span>), lcase(<span class="string">&#x27;chINese&#x27;</span>);    # 大写小写 CHINESE    chinese</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">position</span>(<span class="string">&#x27;i&#x27;</span> <span class="keyword">IN</span> <span class="string">&#x27;chinese&#x27;</span>);    # 返回<span class="string">&#x27;i&#x27;</span>在<span class="string">&#x27;chinese&#x27;</span>的第一个位置<span class="number">-3</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">position</span>(<span class="string">&#x27;e&#x27;</span> <span class="keyword">IN</span> <span class="string">&#x27;chinese&#x27;</span>);    # 返回<span class="string">&#x27;i&#x27;</span>在<span class="string">&#x27;chinese&#x27;</span>的第一个位置<span class="number">-5</span></span><br><span class="line"><span class="keyword">SELECT</span> strcmp(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;abd&#x27;</span>);    # 比较字符串，第一个参数小于第二个返回负数<span class="operator">-</span> <span class="number">-1</span></span><br><span class="line"><span class="keyword">SELECT</span> strcmp(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;abb&#x27;</span>);    # 比较字符串，第一个参数大于第二个返回正数<span class="operator">-</span> <span class="number">1</span></span><br><span class="line"># 时间函数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">current_date</span>, <span class="built_in">current_time</span>, now();    # <span class="number">2018</span><span class="number">-01</span><span class="number">-13</span>   <span class="number">12</span>:<span class="number">33</span>:<span class="number">43</span>    <span class="number">2018</span><span class="number">-01</span><span class="number">-13</span> <span class="number">12</span>:<span class="number">33</span>:<span class="number">43</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">hour</span>(<span class="built_in">current_time</span>), <span class="keyword">minute</span>(<span class="built_in">current_time</span>), <span class="keyword">second</span>(<span class="built_in">current_time</span>);    # <span class="number">12</span>  <span class="number">31</span>   <span class="number">34</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">year</span>(<span class="built_in">current_date</span>), <span class="keyword">month</span>(<span class="built_in">current_date</span>), week(<span class="built_in">current_date</span>);   # <span class="number">2018</span>    <span class="number">1</span>   <span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> quarter(<span class="built_in">current_date</span>);   # <span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> monthname(<span class="built_in">current_date</span>), dayname(<span class="built_in">current_date</span>);   # January  Saturday</span><br><span class="line"><span class="keyword">SELECT</span> dayofweek(<span class="built_in">current_date</span>), dayofmonth(<span class="built_in">current_date</span>), dayofyear(<span class="built_in">current_date</span>);    # <span class="number">7</span>   <span class="number">13</span>  <span class="number">13</span></span><br><span class="line"># 控制流函数</span><br><span class="line"><span class="keyword">SELECT</span> if(<span class="number">3</span><span class="operator">&gt;</span><span class="number">2</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;f&#x27;</span>), if(<span class="number">3</span><span class="operator">&lt;</span><span class="number">2</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;f&#x27;</span>);    # t f</span><br><span class="line"><span class="keyword">SELECT</span> ifnull(<span class="keyword">NULL</span>, <span class="string">&#x27;t&#x27;</span>), ifnull(<span class="number">2</span>, <span class="string">&#x27;t&#x27;</span>);    # t <span class="number">2</span></span><br><span class="line"><span class="keyword">SELECT</span> isnull(<span class="number">1</span>), isnull(<span class="number">1</span><span class="operator">/</span><span class="number">0</span>);    # <span class="number">0</span> <span class="number">1</span> 是<span class="keyword">null</span>返回<span class="number">1</span>，不是<span class="keyword">null</span>返回<span class="number">0</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">nullif</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>), <span class="built_in">nullif</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);    # <span class="keyword">null</span> a 参数相同或成立返回<span class="keyword">null</span>，不同或不成立则返回第一个参数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="number">2</span></span><br><span class="line">       <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;first&#x27;</span></span><br><span class="line">       <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">&#x27;second&#x27;</span></span><br><span class="line">       <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="string">&#x27;third&#x27;</span></span><br><span class="line">       <span class="keyword">ELSE</span> <span class="string">&#x27;other&#x27;</span></span><br><span class="line">       <span class="keyword">END</span> ;     # <span class="keyword">second</span></span><br><span class="line"># 系统信息函数</span><br><span class="line"><span class="keyword">SELECT</span> database();    # 当前数据库名<span class="operator">-</span>test</span><br><span class="line"><span class="keyword">SELECT</span> connection_id();   # 当前用户id<span class="number">-306</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>();    # 当前用户<span class="operator">-</span>root<span class="variable">@localhost</span></span><br><span class="line"><span class="keyword">SELECT</span> version();   # 当前mysql版本</span><br><span class="line"><span class="keyword">SELECT</span> found_rows();    # 返回上次查询的检索行数</span><br></pre></td></tr></table></figure><h5 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 增加用户</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mysql.user(Host, <span class="keyword">User</span>, Password) <span class="keyword">VALUES</span> (<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, Password(<span class="string">&#x27;test&#x27;</span>));    # 在用户表中插入用户信息，直接操作<span class="keyword">User</span>表不推荐</span><br><span class="line"># 删除用户</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> mysql.user <span class="keyword">WHERE</span> <span class="keyword">User</span><span class="operator">=</span><span class="string">&#x27;test&#x27;</span> <span class="keyword">AND</span> Host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES ;</span><br><span class="line"># 更改用户密码</span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">UPDATE mysql.user <span class="keyword">SET</span> Password<span class="operator">=</span>Password(<span class="string">&#x27;t&#x27;</span>) <span class="keyword">WHERE</span> <span class="keyword">User</span><span class="operator">=</span><span class="string">&#x27;test&#x27;</span> <span class="keyword">AND</span> Host<span class="operator">=</span><span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES ;</span><br><span class="line"># 用户授权</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> test<span class="variable">@localhost</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"># 授予用<span class="string">&#x27;test&#x27;</span>密码登陆成功的test<span class="variable">@localhost</span>用户操作所有数据库的所有表的所有的权限</span><br><span class="line">FLUSH PRIVILEGES ;   # 刷新系统权限表,使授予权限生效</span><br><span class="line"># 撤销用户授权</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;   # 取消该用户的删除权限</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> SQL语句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux定时备份MySQL数据库文件</title>
      <link href="2021/05/23/Linux%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BDMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6/"/>
      <url>2021/05/23/Linux%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BDMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>记录一下定时备份数据库的方法</strong></p><p>Linux里有一个 <strong>crontab</strong> 命令被用来提交和管理用户的需要周期性执行的任务，就像Windows里的定时任务一样，用这个就可以设置定时任务去执行相应的操作。</p><p>所以，我们通过创建一个shell文件，把执行的命令放在里面，然后再用crontab去定时执行就可以达到我们想要的效果了。</p></blockquote><h5 id="创建一个文件夹存放备份文件"><a href="#创建一个文件夹存放备份文件" class="headerlink" title="创建一个文件夹存放备份文件"></a>创建一个文件夹存放备份文件</h5><p>这里我是放在/home/deployer路径下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/deployer</span><br><span class="line">mkdir backup</span><br></pre></td></tr></table></figure><h5 id="创建备份的shell文件"><a href="#创建备份的shell文件" class="headerlink" title="创建备份的shell文件"></a>创建备份的shell文件</h5><p><code>touch back_sql.sh</code></p><p>编辑这个脚本：<code>vim back_mysql.sh</code></p><p>如果没有vim在安装一下：<code>yum -y install vim*</code></p><p><strong>脚本内容格式如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">/usr/local/mysql/bin/mysqldump(这个路径是你mysqldump所在路径) -u用户名 -p密码 数据库名 &gt; /home/backup/数据库名_$(date +%Y%m%d_%H%M%S).sql</span><br></pre></td></tr></table></figure><p>如果你要备份成<strong>压缩文件</strong>的话，可以写成下面这个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/usr/local/mysql/bin/mysqldump -u用户名 -p密码 数据库名 | gzip &gt; /home/backup/数据库名_$(date +%Y%m%d_%H%M%S).sql.gz</span><br></pre></td></tr></table></figure><p>这个是我的sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/home/server/mysql/bin/mysqldump -uroot -p123456 xh_wx &gt; /home/deployer/backup/xh_wx_$(date +%Y%m%d).sql</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 添加好后记得保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:wq          -保存文件，退出 vim</span><br><span class="line">:wq!        -强制保存文件，退出 vim</span><br><span class="line">:q            -不保存文件，退出 vim</span><br><span class="line">:q!          -不保存文件，强制退出 vim</span><br></pre></td></tr></table></figure><h5 id="修改脚本权限"><a href="#修改脚本权限" class="headerlink" title="修改脚本权限"></a>修改脚本权限</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 back_sql.sh</span><br><span class="line">或者</span><br><span class="line">chmod u+x back_sql.sh</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>测试一下这个shell是否能执行，输入文件名即可直接执行<code> ./back_mysql.sh</code></p><p>执行后去backup文件夹里看看，是否有导出来的文件</p><h5 id="在crontab中设置定时任务"><a href="#在crontab中设置定时任务" class="headerlink" title="在crontab中设置定时任务"></a>在crontab中设置定时任务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">先检查一下是否安装：如果已安装则请略过</span><br><span class="line">安装命令</span><br><span class="line">yum -y install vixie-cron</span><br><span class="line">yum -y install crontabs</span><br><span class="line"></span><br><span class="line">在CentOS系统中加入开机自动启动: </span><br><span class="line">chkconfig --level 345 crond on</span><br></pre></td></tr></table></figure><p>输入命令进入crontab任务设置 : <code>crontab -e</code></p><p>在里面添加以下命令:  <code>00 02 * * * /home/deployer/backup/back_sql.sh</code> </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605175725.png" alt="image-20210605175724982"></p><p>然后保存退出</p><blockquote><p>  “ 00 02 * * * ”是crontab的时间规则，即<strong>执行周期</strong>，我写的这句解析后就是<strong>每天的 02:00</strong> 执行一次该目录下的那个bk_mysql.sh文件.      执行周期可以按照自己的需求来设定</p><p>  crontab的格式很灵活，每天每小时，具体哪一天都可以设置。在这里就不展开说明了</p></blockquote><p>运行一段时间的效果，这是我服务器上的备份文件</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605180027.png" alt="image-20210605180027697"></p>]]></content>
      
      
      <categories>
          
          <category> 问题随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化</title>
      <link href="2021/05/14/Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>2021/05/14/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="redis持久化的意义"><a href="#redis持久化的意义" class="headerlink" title="redis持久化的意义"></a>redis持久化的意义</h3><p>redis的数据全部在内存中，如果突然<strong>宕机</strong>，数据就会全部丢失，因此必须有一种机制来保证redis的数据在遇到突发状况的时候不会丢失，或者只丢失少量，于是必须根据一些策略来把redis内存中的数据写到<strong>磁盘</strong>中，这样当redis服务重启中，就可以根据磁盘中的数据来恢复数据到内存中。</p><h3 id="redis持久化机制"><a href="#redis持久化机制" class="headerlink" title="redis持久化机制"></a>redis持久化机制</h3><p><strong>redis有两种持久化机制：AOF和RDB</strong></p><h4 id="1-RDB"><a href="#1-RDB" class="headerlink" title="(1) RDB"></a>(1) RDB</h4><p>RDB是一次的<strong>全量备份</strong>，即周期性的把redis当前内存中的全量数据写入到一个<strong>快照</strong>文件中。redis是单线程程序，这个线程要同时负责多个客户端的读写请求，还要负责周期性的把当前内存中的数据写到快照文件中RDB中，数据写到RDB文件是<strong>IO操作</strong>，IO操作会严重影响redis的性能，甚至在持久化的过程中，读写请求会<strong>阻塞</strong>，为了解决这些问题，redis需要同时进行读写请求和持久化操作，这样又会导致另外的问题，持久化的过程中，内存中的数据还在改变，假如redis正在进行持久化一个大的数据结构，在这个过程中客户端发送一个删除请求，把这个大的数据结构删掉了，这时候持久化的动作还没有完成，那么redis该怎么办呢？</p><p>redis使用操作系统的<strong>多进程COW机制</strong>(Copy On Write)机制来实现快照的持久化，在持久化过程中调用 <code>glibc</code>(Linux下的C函数库) 的函数<code>fork()</code>产生一个子进程，<strong>快照持久化完全交给子进程来处理</strong>，父进程继续处理客户端的读写请求。子进程刚刚产生时，和父进程<strong>共享</strong>内存里面的代码段和数据段，这是Linux操作系统的机制，为了节约内存资源，所以尽可能让父子进程共享内存，这样在进程分离的一瞬间，内存的增长几乎没有明显变化。</p><p>子进程对当前内存中的数据进行持久化，并<strong>不会</strong>修改当前的数据结构，如果父进程收到了读写请求，那么会把处理的那一部分数据复制一份到内存，对复制后的数据进行修改，所以<strong>即使对某个数据进行了修改，redis持久化到RDB中的数据也是未修改的数据</strong>，这也是把RDB文件称为”快照”文件的原因，子进程所看到的数据在它被创建的一瞬间就固定下来了，<strong>父进程修改的某个数据只是该数据的复制品</strong>。</p><p>实际上，内存中的全量数据由一个个的”<strong>数据段页面</strong>“组成，每个数据段页面的大小为4K，客户端要修改的数据在哪个页面中，就会复制一份这个页面到内存中，这个复制的过程称为”<strong>页面分离</strong>“，在持久化过程中，随着分离出的页面越来越多，内存就会持续增长，但是不会超过原内存的2倍，因为在一次持久化的过程中，几乎不会出现所有的页面都会分离的情况，读写请求针对的只是原数据中的小部分，大部分redis数据还是”<strong>冷数据</strong>“。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210528140151.webp" alt="Image"></p><h4 id="2-AOF"><a href="#2-AOF" class="headerlink" title="(2) AOF"></a>(2) AOF</h4><p>AOF日志存储的是redis服务器的<strong>顺序指令序列</strong>，即对内存中数据进行修改的指令记录。当redis收到客户端修改指令后，先进行参数<strong>校验</strong>，如果校验通过，先把该指令存储到AOF日志文件中，也就是先存到磁盘，然后再执行该修改指令。</p><p>当redis宕机后重启后，可以读取该AOF文件中的指令，进行数据恢复，恢复的过程就是把记录的指令再<strong>顺序</strong>执行一次，这样就可以恢复到宕机之前的状态。</p><p>redis在长期运行过程中，AOF日志会越来越大，如果redis服务重启后根据很大的AOF文件来顺序执行指令，将会非常耗时，导致redis服务长时间无法对外提供服务，所以需要对AOF文件进行”瘦身”。”瘦身”的过程称作<strong>AOF重写</strong>(rewrite)。</p><p><code>AOF Rewrite</code> 的原理是，主进程fork一个子进程，对当前内存中的数据进行遍历，转换成一系列的redis操作指令，并序列化到一个新的AOF日志中，然后把序列化操作期间新收到的操作指令追加到新的AOF文件中，追加完毕后就立即<strong>替换</strong>旧的AOF文件，这样就完成了”瘦身”工作，即AOF Rewrite。</p><p>redis把操作指令追加到AOF文件这个过程，并不是直接写到AOF文件中，而是先写到操作系统的内存缓存中，这个内存缓存是由操作系统内核分配的，然后操作系统内核会<strong>异步</strong>地把内存缓存中的redis操作指令刷写到AOF文件中。</p><p>一个新问题是，假如内存缓存中的redis指令还没有来得及刷写到AOF文件中就宕机了，那么这部分未刷写的指令就会丢失，不过，<code>glibc</code>函数库提供了 <code>fsync()</code> 函数，该函数可以将指定文件的内容强制从内存缓存中刷写到磁盘上。fsync操作的<strong>周期</strong>对redis的性能有很大影响，如何配置将在本文后续的内容中给出建议。</p><blockquote><p>AOF过程<br><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210528140155.webp" alt="Image"></p></blockquote><blockquote><p>AOF Rewrite过程<br><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210528140200.webp" alt="Image"></p></blockquote><h4 id="3-redis-4-x-混合持久化"><a href="#3-redis-4-x-混合持久化" class="headerlink" title="(3) redis-4.x 混合持久化"></a>(3) redis-4.x 混合持久化</h4><p>重启redis时，我们很少使用RDB来恢复内存状态，因为会丢失大量数据。我们通常使用AOF日志重放，但是重放AOF日志性能相对RDB来说要慢很多，这样在redis实例很大的情况下，启动需要花费很长的时间。redis-4.0为了解决这个问题，带来了一个新的持久化选项——<strong>混合持久化</strong>。将RDB文件的内容和增量的AOF日志文件存在一起。这里的AOF日志不再是全量<br>的日志，而是自持久化开始到持久化结束的这段时间发生的<strong>增量AOF日志</strong>，通常这部分AOF日志很小。</p><blockquote><p>redis-4.x混合持久化机制<br><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210528140203.webp" alt="Image"></p></blockquote><p>redis重启的时候，可以<strong>先加载RDB的内容</strong>，然后<strong>再重放增量AOF日志</strong>，就可以完全替代之前的AOF全量文件重放，恢复效率因此大幅得到提升。</p><h3 id="redis-持久化机制对比"><a href="#redis-持久化机制对比" class="headerlink" title="redis 持久化机制对比"></a>redis 持久化机制对比</h3><h4 id="1-RDB的优缺点"><a href="#1-RDB的优缺点" class="headerlink" title="(1) RDB的优缺点"></a>(1) RDB的优缺点</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li><p>RDB会生成多个数据文件，每个数据文件都代表了某一个时刻中redis的数据，这种多个数据文件的方式，非常适合做<strong>冷备</strong>，可以将这种完整的数据文件发送到一些远程的安全存储上去。</p></li><li><p>当进行RDB持久化时，对redis服务处理<strong>读写请求的影响非常小</strong>，可以让redis保持<strong>高性能</strong>，因为redis主进程只需要fork一个子进程，让子进程执行磁盘IO操作来进行RDB持久化即可。生成一次RDB文件的过程就是把当前时刻内存中的数据一次性写入文件中，而AOF则需要先把当前内存中的小量数据转换为操作指令，然后把指令写到内存缓存中，然后再刷写入磁盘。</p></li><li><p>相对于AOF持久化机制来说，直接基于RDB数据文件来重启和恢复redis的数据会更加<strong>快速</strong>。AOF，存放的是指令日志，做数据恢复的时候，要回放和执行所有的指令日志，从而恢复内存中的所有数据。而RDB，就是一份数据文件，恢复的时候，<strong>直接加载到内存中</strong>即可。</p></li></ul><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul><li><p>如果想要在redis故障时，尽可能少的丢失数据，那么RDB没有AOF好。一般来说，RDB数据快照文件，都是每隔5分钟，或者更长时间生成一次，这个时候就得接受一旦redis进程宕机，那么会丢失最近5分钟的数据。这个问题，也是RDB最大的缺点，就是不适合做<strong>第一优先</strong>的恢复方案，如果你依赖RDB做第一优先恢复方案，会导致数据丢失的比较多。</p></li><li><p>RDB每次在fork子进程来执行RDB快照数据文件生成的时候，如果数据文件特别大，可能会导致对客户端提供的服务暂停数毫秒，甚至数秒。所以一般不要让生成RDB文件的<strong>间隔</strong>太长，否则每次生成的RDB文件太大了，对redis本身的性能会有影响。</p></li></ul><h4 id="2-AOF的优缺点"><a href="#2-AOF的优缺点" class="headerlink" title="(2) AOF的优缺点"></a>(2) AOF的优缺点</h4><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ul><li><p>AOF可以更好的保护数据<strong>不丢失</strong>，一般AOF会每隔1秒，通过一个后台线程执行一次fsync操作，最多丢失1秒钟的数据。</p></li><li><p>AOF日志文件以append-only模式写入，所以没有任何磁盘寻址的开销，写入性能非常高，而且文件<strong>不容易破损</strong>，即使文件尾部破损，也很容易修复。</p></li><li><p>AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。因为在rewrite的时候，会对其中的指令进行压缩，会创建出一份需要恢复数据的最小日志出来。</p></li><li><p>AOF日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的<strong>紧急恢复</strong>。比如某人不小心用<code>flushall</code>命令清空了所有数据，只要这个时候后台<code>rewrite</code>还没有发生，那么就可以立即拷贝AOF文件，将最后一条<code>flushall</code>命令给删了，然后再将该AOF文件放回去，就可以通过恢复机制，自动恢复所有数据。</p></li></ul><h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ul><li><p>对于同一份数据来说，AOF日志文件通常比RDB数据快照文件更大。</p></li><li><p>AOF的<strong>写性能</strong>比RDB的写性能低，因为AOF一般会配置成每秒fsync一次日志文件，当然，每秒一次fsync，性能也还是很高的，只不过比起<br>RDB来说性能低，如果要保证一条数据都不丢，也是可以的，AOF的fsync设置成每写入一条数据，fsync一次，但是这样，redis的性能会大大下降。</p></li><li><p>基于AOF文件做<strong>恢复</strong>的速度不如基于RDB文件做恢复的速度。</p></li></ul><h4 id="3-混合持久化的优缺点"><a href="#3-混合持久化的优缺点" class="headerlink" title="(3) 混合持久化的优缺点"></a>(3) 混合持久化的优缺点</h4><h5 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h5><p>结合了RDB和AOF的优点，使得数据恢复的效率大幅提升</p><h5 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h5><p>兼容性不好，redis-4.x新增，虽然最终的文件也是.aof格式的文件，但在4.0之前版本都不识别该aof文件，同时由于前部分是RDB格式，阅读性较差。</p><h4 id="如何选择redis持久化机制"><a href="#如何选择redis持久化机制" class="headerlink" title="如何选择redis持久化机制"></a>如何选择redis持久化机制</h4><p>RDB和AOF到底该如何选择</p><ul><li><p>不要仅仅使用RDB，因为那样会导致你丢失很多数据</p></li><li><p>也不要仅仅使用AOF，一是数据恢复慢，二是可靠性也不如RDB，毕竟RDB文件中存储的就是某一时刻实实在在的数据，而AOF只是操作指令，把数据转换为操作指令不一定是百分百没问题的。</p></li><li><p>综合使用AOF和RDB两种持久化机制，用AOF来保证数据不丢失，作为数据恢复的第一选择; 用RDB来做不同程度的冷备，在AOF文件都丢失或损坏不可用的时候，还可以使用RDB来进行快速的数据恢复</p></li><li><h5 id="redis重启的时候，先加载RDB的内容，然后再重放增量AOF日志，"><a href="#redis重启的时候，先加载RDB的内容，然后再重放增量AOF日志，" class="headerlink" title="redis重启的时候，先加载RDB的内容，然后再重放增量AOF日志，"></a>redis重启的时候，先加载RDB的内容，然后再重放增量AOF日志，</h5></li></ul><h4 id="5-AOF和RDB同时工作"><a href="#5-AOF和RDB同时工作" class="headerlink" title="(5) AOF和RDB同时工作"></a>(5) AOF和RDB同时工作</h4><ul><li><h5 id="redis在写RDB文件的时候不会执行AOF-rewrite-redis在执行AOF-rewrite的时候不会生成新的RDB"><a href="#redis在写RDB文件的时候不会执行AOF-rewrite-redis在执行AOF-rewrite的时候不会生成新的RDB" class="headerlink" title="redis在写RDB文件的时候不会执行AOF rewrite; redis在执行AOF rewrite的时候不会生成新的RDB;"></a>redis在写RDB文件的时候不会执行AOF rewrite; redis在执行AOF rewrite的时候不会生成新的RDB;</h5></li><li><p>如果redis正在生成新的RDB文件，此时用户执行<code>bgrewriteaof</code>命令手动重写AOF文件，那么等RDB快照生成之后，才会去执行AOF rewrite；</p></li><li><p>同时有RDB文件和AOF日志文件，那么redis重启的时候，会<strong>优先使用AOF</strong>进行数据恢复，因为其中的日志更完整。</p></li></ul><hr><h3 id="redis-持久化机制的配置"><a href="#redis-持久化机制的配置" class="headerlink" title="redis 持久化机制的配置"></a>redis 持久化机制的配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">######################### 通用 #########################</span><br><span class="line"></span><br><span class="line"># 持久化文件(包括RDB文件和AOF文件)的存储目录，默认.</span><br><span class="line">dir dir /home/hadoop/data/redis/6379</span><br><span class="line"></span><br><span class="line">######################### RDB #########################</span><br><span class="line"></span><br><span class="line"># RDB文件的文件名称，默认dump.rdb</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># 生成RDB文件的策略，默认为以下3种，意思是：</span><br><span class="line"># 每隔60s(1min)，如果有超过10000个key发生了变化，就写一份新的RDB文件</span><br><span class="line"># 每隔300s(5min)，如果有超过10个key发生了变化，就写一份新的RDB文件</span><br><span class="line"># 每隔900s(15min)，如果有超过1个key发生了变化，就写一份新的RDB文件</span><br><span class="line"># 配置多种策略可以同时生效，无论满足哪一种条件都会写一份新的RDB文件</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"># 是否开启RDB文件压缩，该功能可以节约磁盘空间，默认为yes</span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"># 在写入文件和读取文件时是否开启rdb文件检查，检查是否有无损坏</span><br><span class="line"># 如果在启动时检查发现文件损坏，则停止启动，默认yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line">######################### AOF #########################</span><br><span class="line"></span><br><span class="line"># 是否开启AOF机制，默认为no</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"># AOF文件的名称，默认为appendonly.aof</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line"># fsync的策略，默认为everysec</span><br><span class="line"># everysec：每秒fsync一次</span><br><span class="line"># no：redis不主动fsync，完全交由操作系统决定</span><br><span class="line"># always：1条指令fsync一次</span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line"># AOF文件rewrite策略</span><br><span class="line"># 当上一次重写后的AOF文件的增长比例达到100%</span><br><span class="line"># 比如上一次重写AOF文件后，新文件大小为128M</span><br><span class="line"># 当新文件再次增长了100%，达到了256M</span><br><span class="line"># 并且增长了100%后的文件的大小大于64M，那么开始重写AOF文件</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"># 是否加载破损的AOF文件，默认为yes，如果设置为no</span><br><span class="line"># 那么redis启动时如果发现AOF文件破损，就会报错并且拒绝启动redis服务。</span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line">######################### 混合持久化 #########################</span><br><span class="line"></span><br><span class="line"># 是否开启混合持久化机制，默认为no</span><br><span class="line">aof-use-rdb-preamble no</span><br></pre></td></tr></table></figure><blockquote><p>建议配置：把<code>appendonly</code>设置为yes，根据需要修改dir，其他均保持默认即可。</p></blockquote><h4 id="其他相关命令"><a href="#其他相关命令" class="headerlink" title="其他相关命令"></a>其他相关命令</h4><ul><li>手动生成新的RDB文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 阻塞主进程，直到生成新的RDB文件</span><br><span class="line">save </span><br><span class="line"># 异步生成RDB文件，fork子进程去生成新的RDB文件，主进程不阻塞</span><br><span class="line">bgsave</span><br></pre></td></tr></table></figure><ul><li>手动重写AOF文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgrewriteaof</span><br></pre></td></tr></table></figure><ul><li>停止redis服务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安全停止redis服务，在停止之前会生成一份新的RDB文件</span><br><span class="line">redis-cli SHUTDOWN</span><br><span class="line"># 不安全，会造成数据丢失</span><br><span class="line">kill -9 redis_pid</span><br></pre></td></tr></table></figure><ul><li>检查持久化文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 检查AOF文件</span><br><span class="line">redis-check-aof /your/path/appendonly.aof</span><br><span class="line"># 检查RDB文件</span><br><span class="line">redis-check-rdb /your/path/dump.rdb</span><br></pre></td></tr></table></figure><ul><li>修复AOF文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果redis在append数据到AOF文件时，机器宕机了，可能会导致AOF文件破损，使用以下命令修复AOF文件</span><br><span class="line">$REDIS_HOME/bin/redis-check-aof --fix</span><br></pre></td></tr></table></figure><p>查看持久化信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看持久化信息</span><br><span class="line">info Persistence</span><br><span class="line"># 查看状态信息</span><br><span class="line">info stats</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的索引</title>
      <link href="2021/05/12/MySQL%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95/"/>
      <url>2021/05/12/MySQL%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h3><ul><li><p>帮助MySQL<strong>高效获取数据</strong>的<strong>数据结构</strong>。更通俗的说，数据库索引好比是一本书前面的目录，能<strong>加快数据库的查询速度</strong>。</p></li><li><p>一般来说索引本身也很大，不可能全部存储在内存中，因此<strong>索引往往是存储在磁盘上的文件中的</strong>（可能存储在单独的索引文件中，也可能和数据一起存储在数据文件中）</p></li></ul><h3 id="索引的优势和劣势"><a href="#索引的优势和劣势" class="headerlink" title="索引的优势和劣势"></a>索引的优势和劣势</h3><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ol><li><p><strong>可以 提高数据检索的效率，降低数据库的IO成本</strong>，类似于书的目录。</p></li><li><p>通过<strong>索引列对数据进行排序</strong>，降低数据排序的成本，降低了CPU的消耗。</p><ul><li><p>被索引的列会自动进行排序，包括【单列索引】和【组合索引】，只是组合索引的排序要复杂一些。</p></li><li><p>如果按照索引列的顺序进行排序，对应order by语句来说，效率就会提高很多。</p></li></ul></li></ol><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ul><li><strong>索引会占据磁盘空间</strong></li><li><strong>索引虽然会提高查询效率，但是会降低更新表的效率</strong>。比如每次对表进行增删改操作，MySQL不仅要保存数据，还有保存或者更新对应的索引文件。</li></ul><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p>索引列中的值必须是唯一的，不允许有空值。</p><h4 id="普通索引（NORMAL）"><a href="#普通索引（NORMAL）" class="headerlink" title="普通索引（NORMAL）"></a>普通索引（NORMAL）</h4><p>MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值。</p><h4 id="唯一索引（UNIQUE）"><a href="#唯一索引（UNIQUE）" class="headerlink" title="唯一索引（UNIQUE）"></a>唯一索引（UNIQUE）</h4><p>索引列中的值必须是唯一的，但是允许为空值。</p><h4 id="全文索引（FULLTEXT）"><a href="#全文索引（FULLTEXT）" class="headerlink" title="全文索引（FULLTEXT）"></a>全文索引（FULLTEXT）</h4><p>只能在文本类型<strong>CHAR,VARCHAR,TEXT</strong>类型字段上创建全文索引。字段长度比较大时，如果创建普通索引，在进行like模糊查询时效率比较低，这时可以创建全文索引。 MyISAM和InnoDB中都可以使用全文索引。</p><h4 id="空间索引（SPATIAL）"><a href="#空间索引（SPATIAL）" class="headerlink" title="空间索引（SPATIAL）"></a>空间索引（SPATIAL）</h4><p>MySQL在5.7之后的版本支持了空间索引，而且支持OpenGIS几何数据模型。MySQL在空间索引这方面遵循OpenGIS几何数据模型规则。</p><p>了解即可</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>在文本类型如CHAR,VARCHAR,TEXT类列上创建索引时，可以指定索引列的长度，但是数值类型不能指定。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> index index1(email) <span class="operator">/</span><span class="operator">/</span>普通索引</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> index index2(email(<span class="number">6</span>)) <span class="operator">/</span><span class="operator">/</span>前缀索引</span><br></pre></td></tr></table></figure><h4 id="其他（按照索引列数量分类）"><a href="#其他（按照索引列数量分类）" class="headerlink" title="其他（按照索引列数量分类）"></a>其他（按照索引列数量分类）</h4><h5 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h5><h5 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h5><p>组合索引的使用，需要遵循<strong>最左匹配原则</strong>。一般情况下在条件允许的情况下使用组合索引替代多个单列索引使用。</p><h3 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h3><blockquote><p>Innnodb中支持的只有Hash结构和B+结构，如果没有特别说明的话，一般是使用B+结构的</p></blockquote><blockquote><p>下面的分析依次是Hash  –&gt;  普通二叉树  –&gt;  平衡二叉树  –&gt;  B树 –&gt;  B+树</p></blockquote><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>Hash表，在Java中的HashMap，TreeMap就是Hash表结构，以键值对的方式存储数据。我们使用Hash表存储表数据Key可以存储索引列，Value可以存储行记录或者行磁盘地址。Hash表在<strong>等值查询时效率很高</strong>，时间复杂度为O(1)；但是<strong>不支持范围快速查找</strong>，范围查找时还是只能通过扫描全表方式。</p><p>字段值所对应的数组下标是<strong>哈希算法</strong>随机算出来的，所以可能出现<strong>哈希冲突</strong>。</p><p><strong>hash索引检索一次到位，而不需要想B+树那样从根节点访问到叶子节点。不过在有大量重复值得情况下，hash索引的效率极低，因为要频发地处理Hash冲突。</strong></p><blockquote><p>那Hash表在哪些场景比较适合 :</p><p>等值查询的场景，就只有KV（Key，Value）的情况，例如Redis、Memcached等这些NoSQL的中间件。</p></blockquote><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210526171318.png" alt="在这里插入图片描述"></p><p><strong>二叉树特点</strong>：</p><p>每个节点最多有2个分叉，左子树和右子树数据顺序左小右大。</p><p><strong>缺陷</strong></p><p>这个特点就是为了保证每次查找都可以这折半而减少IO次数，但是二叉树就很考验第一个根节点的取值，因为很容易在这个特点下出现我们并发想发生的情况“<strong>树不分叉了</strong>”，这就很难受很不稳定。</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210526171606.png" alt="在这里插入图片描述" style="zoom: 67%;" /><p><strong>显然这种情况不稳定的我们再选择设计上必然会避免这种情况的</strong></p><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><p>平衡二叉树是采用<strong>二分法</strong>思维，平衡二叉查找树除了具备二叉树的特点，最主要的特征是树的左右两个子树的层级最多相差1。在插入删除数据时通过<strong>左旋/右旋</strong>操作保持二叉树的平衡，<strong>不会出现左子树很高、右子树很矮的情况</strong>。</p><p>使用平衡二叉查找树查询的性能接近于二分查找法，时间复杂度是 O(log2n)。查询id=6，只需要两次IO。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210526172315.png" alt="在这里插入图片描述"></p><p><strong>平衡二叉树存在的问题</strong></p><ul><li><p>时间复杂度和树高相关。树有多高就需要检索多少次，每个节点的读取，都对应一次磁盘 IO 操作。树的高度就等于每次查询数据时磁盘 IO 操作的次数。</p></li><li><p>平衡二叉树不支持范围查询快速查找，范围查询时需要从根节点多次遍历，查询效率不高。</p></li></ul><h4 id="B树：改造二叉树"><a href="#B树：改造二叉树" class="headerlink" title="B树：改造二叉树"></a>B树：改造二叉树</h4><p>MySQL的数据是存储在磁盘文件中的，查询处理数据时，需要先把磁盘中的数据加载到内存中，磁盘IO 操作非常耗时，所以我们优化的重点就是尽量减少磁盘 IO 操作。访问二叉树的每个节点就会发生一次IO，如果想要减少磁盘IO操作，就需要尽量降低树的高度。那如何降低树的高度呢？</p><p>假如key为bigint=8字节，每个节点有两个指针，每个指针为4个字节，一个节点占用的空间16个字节（8+4*2=16）。</p><p>因为在MySQL的InnoDB存储引擎一次IO会读取的一页（<strong>默认一页16K</strong>）的数据量，而二叉树一次IO有效数据量只有16字节，空间利用率极低。为了最大化利用一次IO空间，一个简单的想法是在每个节点存储多个元素，在每个节点尽可能多的存储数据。每个节点可以存储1000个索引（16k/16=1000），这样就将二叉树改造成了多叉树，通过增加树的叉树，将树从高瘦变为矮胖。构建1百万条数据，树的高度只需要2层就可以（1000*1000=1百万），也就是说只需要2次磁盘IO就可以查询到数据。磁盘IO次数变少了，查询数据的效率也就提高了</p><p>这种数据结构我们称为B树，B树是一种多叉平衡查找树，如下图主要特点：</p><ul><li><p>B树的节点中存储着多个元素，每个内节点有多个分叉。</p></li><li><p>节点中的元素包含键值和数据，节点中的键值从大到小排列。也就是说，在所有的节点都储存数据。</p></li><li><p>父节点当中的元素不会出现在子节点中。</p></li><li><p>所有的叶子结点都位于同一层，叶节点具有相同的深度，叶节点之间没有指针连接。<br><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527095233.png" alt="在这里插入图片描述"></p></li></ul><blockquote><p>举个例子，在b树中查询数据的情况：</p><p>假如我们查询值等于10的数据。查询路径磁盘块1-&gt;磁盘块2-&gt;磁盘块5。</p><p>第一次磁盘IO：将磁盘块1加载到内存中，在内存中从头遍历比较，10&lt;15，走左路，到磁盘寻址磁盘块2。</p><p>第二次磁盘IO：将磁盘块2加载到内存中，在内存中从头遍历比较，7&lt;10，到磁盘中寻址定位到磁盘块5。</p><p>第三次磁盘IO：将磁盘块5加载到内存中，在内存中从头遍历比较，10=10，找到10，取出data，如果data存储的行记录，取出data，查询结束。如果存储的是磁盘地址，还需要根据磁盘地址到磁盘中取出数据，查询终止。</p><p>相比二叉平衡查找树，在整个查找过程中，虽然数据的比较次数并没有明显减少，但是磁盘IO次数会大大减少。同时，由于我们的比较是在内存中进行的，比较的耗时可以忽略不计。B树的高度一般2至3层就能满足大部分的应用场景，所以使用B树构建索引可以很好的提升查询的效率。</p></blockquote><p><strong>缺点</strong>：</p><ol><li><p>B树<strong>不支持范围查询的快速查找</strong>，你想想这么一个情况如果我们想要查找10和35之间的数据，查找到15之后，需要回到根节点重新遍历查找，需要从根节点进行多次遍历，查询效率有待提高。</p></li><li><p>如果data存储的是行记录，行的大小随着列数的增多，所占空间会变大。这时，一个页中可存储的数据量就会变少，树相应就会变高，磁盘IO次数就会变大。</p></li></ol><h4 id="B-树：改造B树"><a href="#B-树：改造B树" class="headerlink" title="B+树：改造B树"></a>B+树：改造B树</h4><p>B+树，作为B树的升级版，在B树基础上，MySQL在B树的基础上继续改造，使用B+树构建索引。B+树和B树最主要的区别在于<strong>非叶子节点是否存储数据</strong>的问题</p><ul><li>B树：非叶子节点和叶子节点都会存储数据。</li><li>B+树：只有<strong>叶子节点才会存储数据</strong>，非叶子节点至存储键值。叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表。<img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527102321.png" alt="在这里插入图片描述"  /></li></ul><p>B+树的最底层叶子节点包含了所有的索引项。从图上可以看到，B+树在查找数据的时候，由于数据都存放在最底层的叶子节点上，所以每次查找都需要检索到叶子节点才能查询到数据。所以在需要查询数据的情况下每次的磁盘的IO跟树高有直接的关系，但是从另一方面来说，由于数据都被放到了叶子节点，所以放索引的磁盘块锁存放的索引数量是会跟这增加的，所以相对于B树来说，B+树的树高理论上情况下是比B树要矮的。也存在索引覆盖查询的情况，在索引中数据满足了当前查询语句所需要的全部数据，此时只需要找到索引即可立刻返回，不需要检索到最底层的叶子节点。</p><blockquote><p>等值查询：<br>假如我们查询值等于9的数据。查询路径磁盘块1-&gt;磁盘块2-&gt;磁盘块6。</p><p>第一次磁盘IO：将磁盘块1加载到内存中，在内存中从头遍历比较，9&lt;15，走左路，到磁盘寻址磁盘块2。</p><p>第二次磁盘IO：将磁盘块2加载到内存中，在内存中从头遍历比较，7&lt;9&lt;12，到磁盘中寻址定位到磁盘块6。</p><p>第三次磁盘IO：将磁盘块6加载到内存中，在内存中从头遍历比较，在第三个索引中找到9，取出data，如果data存储的行记录，取出data，查询结束。如果存储的是磁盘地址，还需要根据磁盘地址到磁盘中取出数据，查询终止。（这里需要区分的是在InnoDB中Data存储的为行数据，而MyIsam中存储的是磁盘地址。）</p><p>过程如图：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527102708.png" alt="在这里插入图片描述"></p></blockquote><blockquote><p>范围查询：<br>假如我们想要查找9和26之间的数据。查找路径是磁盘块1-&gt;磁盘块2-&gt;磁盘块6-&gt;磁盘块7。</p><p>首先查找值等于9的数据，将值等于9的数据缓存到结果集。这一步和前面等值查询流程一样，发生了三次磁盘IO。</p><p>查找到15之后，底层的叶子节点是一个有序列表，我们从磁盘块6，键值9开始向后遍历筛选所有符合筛选条件的数据。</p><p>第四次磁盘IO：根据磁盘6后继指针到磁盘中寻址定位到磁盘块7，将磁盘7加载到内存中，在内存中从头遍历比较，9&lt;25&lt;26，9&lt;26&lt;=26，将data缓存到结果集。</p><p>主键具备唯一性（后面不会有&lt;=26的数据），不需再向后查找，查询终止。将结果集返回给用户。<br><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527102750.png" alt="在这里插入图片描述"></p></blockquote><p><strong>可以看到B+树可以保证等值和范围查询的快速查找，MySQL的索引就采用了B+树的数据结构。</strong></p><blockquote><p>B+ 树简介一个很好的博客：<a href="https://blog.csdn.net/qq_26222859/article/details/80631121">https://blog.csdn.net/qq_26222859/article/details/80631121</a> </p></blockquote><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li><p>Hash不支持范围查询，二叉树树高很高，只有B树跟B+有的一比。</p></li><li><p>B树一个节点可以存储多个元素，相对于完全平衡二叉树整体的树高降低了，磁盘IO效率提高了。</p></li><li><p>而B+树是B树的升级版，只是把非叶子节点冗余一下，这么做的好处是为了提高范围查找的效率。提高了的原因也无非是会有指针指向下一个节点的叶子节点。</p></li><li><p>Mysql选用B+树这种数据结构作为索引，可以提高查询索引时的磁盘IO效率，并且可以提高范围查询的效率，并且B+树里的元素也是有序的。</p></li></ul><h3 id="InnoDB索引的实现"><a href="#InnoDB索引的实现" class="headerlink" title="InnoDB索引的实现"></a>InnoDB索引的实现</h3><h4 id="主键索引（聚簇索引）"><a href="#主键索引（聚簇索引）" class="headerlink" title="主键索引（聚簇索引）"></a>主键索引（聚簇索引）</h4><p>每个InnoDB表都有一个聚簇索引 ，聚簇索引使用B+树构建，叶子节点存储的数据是整行记录。一般情况下，聚簇索引等同于主键索引，当一个表没有创建主键索引时，InnoDB会自动创建一个ROWID字段来构建聚簇索引。InnoDB创建索引的具体规则如下：</p><blockquote><ul><li>在表上定义主键PRIMARY KEY，InnoDB将主键索引用作聚簇索引。</li><li>如果表没有定义主键，InnoDB会选择第一个不为NULL的唯一索引列用作聚簇索引。</li><li>如果以上两个都没有，InnoDB 会使用一个6 字节长整型的隐式字段 ROWID字段构建聚簇索引。该ROWID字段会在插入新行时自动递增。</li></ul></blockquote><p>除聚簇索引之外的所有索引都称为辅助索引。在中InnoDB，辅助索引中的叶子节点存储的数据是该行的主键值都。 在检索时，InnoDB使用此主键值在聚簇索引中搜索行记录。</p><p>这里以user_innodb为例，user_innodb的id列为主键，age列为普通索引。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527110808.png" alt="在这里插入图片描述"></p><p>InnoDB的数据和索引存储在一个文件t_user_innodb.ibd中。InnoDB的数据组织方式，是聚簇索引。</p><p>主键索引的叶子节点会存储数据行，辅助索引只会存储主键值。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527133202.png" alt="在这里插入图片描述"></p><p><strong>等值查询数据：</strong></p><p><code>select * from user_innodb where id = 28;</code></p><ol><li><p>先在主键树中从根节点开始检索，将根节点加载到内存，比较28&lt;75，走左路。（1次磁盘IO）</p></li><li><p>将左子树节点加载到内存中，比较16&lt;28&lt;47，向下检索。（1次磁盘IO）</p></li><li><p>检索到叶节点，将节点加载到内存中遍历，比较16&lt;28，18&lt;28，28=28。查找到值等于28的索引项，直接可以获取整行数据。将改记录返回给客户端。（1次磁盘IO）</p></li></ol><p>磁盘IO数量：3次。<br><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527133248.png" alt="在这里插入图片描述"></p><h4 id="辅助索引"><a href="#辅助索引" class="headerlink" title="辅助索引"></a>辅助索引</h4><p>除聚簇索引之外的所有索引都称为辅助索引，InnoDB的辅助索引只会<strong>存储主键值而非磁盘地址</strong>。</p><blockquote><p>MyIsam是存储磁盘地址</p></blockquote><p>以表user_innodb的age列为例，age索引的索引结果如下图。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527133305.png" alt="在这里插入图片描述"></p><p>底层叶子节点的按照（age，id）的顺序排序，先按照age列从小到大排序，age列相同时按照id列从小到大排序。</p><p>使用辅助索引需要检索两遍索引：首先检索辅助索引获得主键，然后使用主键到主索引中检索获得记录。</p><p>画图分析等值查询的情况：</p><p><code>select * from t_user_innodb where age=19;</code></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527133452.png" alt="在这里插入图片描述"></p><p>根据在辅助索引树中获取的主键id，到主键索引树检索数据的过程称为<strong>回表</strong>查询。</p><p><strong>磁盘IO数：辅助索引3次+获取记录回表3次</strong></p><h4 id="组合索引-1"><a href="#组合索引-1" class="headerlink" title="组合索引"></a>组合索引</h4><p>还是以自己创建的一个表为例：表 abc_innodb，id为主键索引，创建了一个联合索引idx_abc(a,b,c)。</p><p><code>select * from abc_innodb order by a, b, c, id;</code></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527133542.png" alt="在这里插入图片描述"></p><p>组合索引的数据结构：</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527133654.png" alt="在这里插入图片描述" style="zoom:67%;" /><p><strong>组合索引的查询过程：</strong></p><p><code>select * from abc_innodb where a = 13 and b = 16 and c = 4;</code></p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527133812.png" alt="在这里插入图片描述" style="zoom:67%;" /><h5 id="最左匹配原则："><a href="#最左匹配原则：" class="headerlink" title="最左匹配原则："></a>最左匹配原则：</h5><p>最左前缀匹配原则和联合索引的<strong>索引存储结构和检索方式</strong>是有关系的。</p><p>在组合索引树中，最底层的叶子节点按照第一列a列从左到右递增排列，但是b列和c列是无序的，b列只有在a列值相等的情况下小范围内递增有序，而c列只能在a，b两列相等的情况下小范围内递增有序。</p><p>就像上面的查询，B+树会先比较a列来确定下一步应该搜索的方向，往左还是往右。如果a列相同再比较b列。但是如果查询条件没有a列，B+树就不知道第一步应该从哪个节点查起。</p><p>可以说创建的idx_abc(a,b,c)索引，相当于创建了(a)、（a,b）（a,b,c）三个索引。、</p><p><strong>组合索引的最左前缀匹配原则：使用组合索引查询时，mysql会一直向右匹配直至遇到范围查询(&gt;、&lt;、between、like)就停止匹配。</strong><br>**如果查询条件是<code>b a c </code>顺序的话也可以命中索引，因为优化器会自动调整a，b，c的顺序 **</p><h5 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h5><p>覆盖索引并不是说是索引结构，覆盖索引是一种很常用的优化手段。<strong>因为在使用辅助索引的时候，我们只可以拿到主键值，相当于获取数据还需要再根据主键查询主键索引再获取到数据。但是试想下这么一种情况，在上面abc_innodb表中的组合索引查询时，如果我只需要abc字段的，那是不是意味着我们查询到组合索引的叶子节点就可以直接返回了，而不需要回表。这种情况就是覆盖索引。</strong></p><p>可以看一下执行计划：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527134227.png" alt="在这里插入图片描述"></p><p><strong>未使用到覆盖索引：</strong></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527134234.png" alt="在这里插入图片描述"></p><h5 id="避免回表"><a href="#避免回表" class="headerlink" title="避免回表"></a>避免回表</h5><p><strong>在InnoDB的存储引擎中，使用辅助索引查询的时候，因为辅助索引叶子节点保存的数据不是当前记录的数据而是当前记录的主键索引，索引如果需要获取当前记录完整数据就必然需要根据主键值从主键索引继续查询。这个过程我们成位回表</strong>。想想回表必然是会消耗性能影响性能。那如何避免呢？</p><p>使用索引覆盖，举个例子：现有User表（id(PK),name(key),sex,address,hobby…）</p><p>如果在一个场景下，select id,name,sex from user where name =’zhangsan’;这个语句在业务上频繁使用到，而user表的其他字段使用频率远低于它，在这种情况下，如果我们在建立 name 字段的索引的时候，不是使用单一索引，而是使用联合索引（name，sex）这样的话再执行这个查询语句是不是根据辅助索引查询到的结果就可以获取当前语句的完整数据。这样就可以有效地避免了回表再获取sex的数据。</p><blockquote><p>回表大概就是我们有个主键为ID的索引，和一个普通name字段的索引，我们在普通字段上搜索：</p><p><code>select * from tableName where name = &#39;tom&#39;</code></p><p>执行的流程是先查询到name索引上的“tom”，然后找到他的id是2，最后去主键索引，找到id为2对应的值。</p><p>回到主键索引树搜索的过程，就是回表。不过也有方法避免回表，那就是覆盖索引。</p></blockquote><h5 id="联合索引的使用"><a href="#联合索引的使用" class="headerlink" title="联合索引的使用"></a>联合索引的使用</h5><p>联合索引，在建立索引的时候，尽量在多个单列索引上判断下是否可以使用联合索引。联合索引的使用不仅可以节省空间，还可以更容易的使用到索引覆盖。试想一下，索引的字段越多，是不是更容易满足查询需要返回的数据呢。比如联合索引（a_b_c），是不是等于有了索引：a，a_b，a_b_c三个索引，这样是不是节省了空间，当然节省的空间并不是三倍于（a，a_b，a_b_c）三个索引，因为索引树的数据没变，但是索引data字段的数据确实真实的节省了。</p><p>联合索引的创建原则，<strong>在创建联合索引的时候因该把频繁使用的列、区分度高的列放在前面，频繁使用代表索引利用率高，区分度高代表筛选粒度大，这些都是在索引创建的需要考虑到的优化场景</strong>，也可以在常需要作为查询返回的字段上增加到联合索引中，<strong>如果在联合索引上增加一个字段而使用到了覆盖索引，那建议这种情况下使用联合索引</strong>。</p><blockquote><p>总结：</p><ol><li><p>考虑当前是否已经存在多个可以合并的单列索引，如果有，那么将当前多个单列索引创建为一个联合索引。</p></li><li><p>当前索引存在频繁使用作为返回字段的列，这个时候就可以考虑当前列是否可以加入到当前已经存在索引上，使其查询语句可以使用到覆盖索引。</p></li></ol></blockquote><h3 id="B-树索引"><a href="#B-树索引" class="headerlink" title="B+树索引"></a>B+树索引</h3><h4 id="一个B-树的节点中到底存多少个元素最合适？"><a href="#一个B-树的节点中到底存多少个元素最合适？" class="headerlink" title="一个B+树的节点中到底存多少个元素最合适？"></a>一个B+树的节点中到底存多少个元素最合适？</h4><p><strong>B+树中一个节点为一页或页的倍数最为合适</strong>。</p><p>因为如果一个节点的大小小于1页，那么读取这个节点的时候其实也会读出1页，造成资源的浪费。</p><p>如果一个节点的大小大于1页，比如1.2页，那么读取这个节点的时候会读出2页，也会造成资源的浪费。</p><p>所以为了不造成浪费，所以最后把一个节点的大小控制在1页、2页、3页、4页等倍数页大小最为合适。</p><h4 id="页的概念"><a href="#页的概念" class="headerlink" title="页的概念"></a>页的概念</h4><p>首先Mysql的基本存储结构是<strong>页</strong>(记录都存在页里边)：</p><p>一页16KB</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527140531.jpeg" style="zoom:67%;" /><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527160640.jpeg" style="zoom:67%;" /><ul><li><strong>各个数据页可以组成一个双向链表</strong></li></ul><ul><li><p><strong>而每个数据页中的记录又可以组成一个单向链表</strong></p></li><li><p>每个数据页都会为存储在它里边儿的记录生成一个<strong>页目录</strong>，在通过<strong>主键查找某条记录的时候可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录</strong></p></li></ul><ul><li>以其他列(非主键)作为搜索条件：只能从最小记录开始依次遍历单链表中的每条记录。</li></ul><p>所以说，如果我们写 select * from user where username=’tom’这样没有进行任何优化的sql语句，默认会这样做：</p><ul><li>需要遍历双向链表，找到所在的页，定位到记录所在的页</li></ul><ul><li>从所在的页内中查找相应的记录</li></ul><ul><li>由于不是根据主键查询，只能遍历所在页的单链表了</li></ul><p>很明显，在数据量很大的情况下这样查找会很慢！看起来跟回表有点点像。</p><p><strong>最左匹配原则</strong>：</p><ul><li>索引可以简单如一个列 (a)，也可以复杂如多个列 (a,b,c,d)，即联合索引。</li><li>如果是联合索引，那么key也由多个列组成，同时，索引只能用于查找key是否存在（相等），遇到范围查询 (&gt;、&lt;、between、like左匹配)等就不能进一步匹配了，后续退化为线性查找。</li><li>因此，列的排列顺序决定了可命中索引的列数。</li></ul><p><strong>例子</strong></p><ol><li><p>如有索引 (a,b,c,d)，查询条件 a=1 and b=2 and c&gt;3 and d=4，<strong>索引会从左到右依次命中，直到碰到范围查询</strong>，即会在每个节点依次命中a、b、c，无法命中d。(c已经是范围查询了，d肯定是排不了序了)</p></li><li><p>b = 2 如果建立(a,b)顺序的索引，是匹配不到(a,b)索引的；但是如果查询条件是a = 1 and b = 2或者a=1(又或者是b = 2 and b = 1)就可以，因为</p></li></ol><h4 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a><strong>聚簇索引和非聚簇索引</strong></h4><h5 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h5><blockquote><p>聚簇索引并不是一种单独的索引类型，而是一种数据存储方式。具体细节依赖于其实现方式。</p><p>简单来说就是<strong>跟数据行绑定的索引就叫聚簇索引</strong>，而其他跟绑定的数据为主键的为非聚簇索引</p></blockquote><ul><li>聚簇索引就是按照每张表的主键构造一颗B+树，同时叶子节点中存放的就是整张表的行记录数据，也将聚集索引的叶子节点称为数据页。这个特性决定了索引组织表中数据也是索引的一部分，每张表只能拥有一个聚簇索引。</li><li>Innodb通过<strong>默认主键聚集数据</strong>，如果没有定义主键，innodb会选择非空的唯一索引代替。如果没有这样的索引，innodb会隐式的定义一个主键来作为聚簇索引。</li></ul><p><strong>聚簇索引的优缺点</strong></p><ul><li><p>优点：</p><ol><li>数据访问更快，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引中获取数据比非聚簇索引更快</li><li>聚簇索引对于主键的排序查找和范围查找速度非常快</li></ol></li><li><p>缺点</p><ol><li>插入速度严重依赖于插入顺序，按照主键的<strong>顺序插入</strong>是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个<strong>自增的ID列为主键</strong></li><li>更新主键的代价很高，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义主键为不可更新</li></ol></li></ul><h5 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h5><p><strong>也就是辅助索引</strong></p><p>　　在<strong>聚簇索引之上创建的索引称之为辅助索引</strong>，辅助索引访问数据总是需要<strong>二次查找</strong>。<strong>辅助索引叶子节点存储的不再是行的物理位置，而是主键值</strong>。通过辅助索引首先找到的是主键值，再通过主键值找到数据行的数据页，再通过数据页中的Page Directory找到数据行。</p><p>　　Innodb辅助索引的叶子节点并<strong>不包含行记录的全部数据</strong>，叶子节点除了包含键值外，还包含了相应行数据的聚簇索引键。</p><p>　　辅助索引的存在不影响数据在聚簇索引中的组织，所以一张表可以有多个辅助索引。在innodb中有时也称辅助索引为二级索引。</p><p><strong>非聚簇索引查询可以通过覆盖索引的方式提高查询速度，避免回表操作</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>同时要创建出好的索引要顾及到很多的方面：</p><ul><li>最左前缀匹配原则。这是非常重要、非常重要、非常重要（重要的事情说三遍）的原则，MySQL会一直向右匹配直到遇到范围查询 （&gt;,&lt;,BETWEEN,LIKE）就停止匹配。</li><li>对字符串进行索引，应该定制一个前缀长度，可以节省大量的索引空间。</li><li>避免创建过多的索引，索引会额外占用磁盘空间，降低写操作效率。</li><li>尽量选择区分度高的列作为索引，区分度的公式是 COUNT(DISTINCT col)/COUNT(*)。表示字段不重复的比率，比率越大我们扫描的记录数就越少。</li><li>索引列不能参与计算，尽量保持列“干净”。比如， FROM_UNIXTIME(create_time)=’2016-06-06’ 就不能使用索引，原因很简单，B+树中存储的都是数据表中的字段值，但是进行检索时，需要把所有元素都应用函数才能比较，显然这样的代价太大。所以语句要写成 ： create_time=UNIX_TIMESTAMP(‘2016-06-06’)。</li><li>尽可能的扩展索引，不要新建立索引。比如表中已经有了a的索引，现在要加（a,b）的索引，那么只需要修改原来的索引即可。</li><li>单个多列组合索引和多个单列索引的检索查询效果不同，因为在执行SQL时，<del>MySQL只能使用一个索引，会从多个单列索引中选择一个限制最为严格的索引</del>(经指正，在MySQL5.0以后的版本中，有“合并索引”的策略，翻看了《高性能MySQL 第三版》，书作者认为：<strong>还是应该建立起比较好的索引，而不应该依赖于“合并索引”</strong>这么一个策略)。</li><li>“合并索引”策略简单来讲，就是使用多个单列索引，然后将这些结果用“union或者and”来合并起来</li></ul><p>​                                                                                                                                                                                                        </p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 索引 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的事务</title>
      <link href="2021/05/12/MySQL%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/"/>
      <url>2021/05/12/MySQL%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h3><p>事务是由一条或者多条DML语句组成逻辑执行单元，这系列操作要么全部执行成功，要么全部执行失败。通常一个事务对应一个完整的业务(<strong>例如银行账户转账业务，该业务就是一个最小的工作单元</strong>)</p><h4 id="事务的特性（ACID）"><a href="#事务的特性（ACID）" class="headerlink" title="事务的特性（ACID）"></a>事务的特性（ACID）</h4><p><strong>原子性(atomicity)： 事务的最小工作单元，要么全成功，要么全失败。</strong></p><p><strong>一致性(consistency)： 事务开始和结束后，数据库的完整性不会被破坏。（最重要）</strong></p><p><strong>隔离性(isolation)： 不同事务之间互不影响，四种隔离级别为RU（读未提交）、RC（读已提交）、RR（可重复读）、SERIALIZABLE （串行化）。隔离级别由低到高，性能由高到低。隔离级别总是和性能相违背。</strong></p><p><strong>持久性(durability)： 事务提交后，对数据的修改是永久性的，即使系统故障也不会丢失。</strong></p><h5 id="ACID之间的关系："><a href="#ACID之间的关系：" class="headerlink" title="ACID之间的关系："></a>ACID之间的关系：</h5><blockquote><ul><li><p>只有满足<strong>一致性</strong>，事务的结果才是正确的。</p></li><li><p>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</p></li><li><p>事务满足持久化是为了能应对数据库崩溃的情况。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210525150701.jpeg" alt="在这里插入图片描述"></p></li></ul></blockquote><h4 id="Innodb的隔离性有哪些"><a href="#Innodb的隔离性有哪些" class="headerlink" title="Innodb的隔离性有哪些"></a>Innodb的隔离性有哪些</h4><ul><li><strong>未提交读（READ UNCOMMITTED）</strong></li></ul><p>事务中的修改，即使没有提交，对其他事务也是可见的。</p><ul><li><strong>提交读（READ COMMITTED）</strong></li></ul><p>一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其他事务是不可见的。</p><p>又称为<strong>不可重复读</strong>，一个事务因为读取到另一个事务已提交的修改数据，导致在当前事务的不同时间读取同一条数据获取的结果不一致。</p><ul><li><strong>可重复读（REPEATABLE READ）</strong></li></ul><p>保证在同一个事务中多次读取同样数据的结果是一样的。</p><p>在当前事务中，不论读取多少次，数据任然是第一次读取的值，不会因为在第一次读取之后，其他事务再修改提交此数据而产生改变。</p><ul><li><strong>串行化（SERIALIZABLE）</strong></li></ul><p>强制事务串行执行。</p><p>所有的数据库的读或者写操作都为串行执行，读加读锁，写加写锁。当前隔离级别下只支持单个请求同时执行，所有的操作都需要队列执行。所以种隔离级别下所有的数据是最稳定的，但是性能也是最差的。</p><h4 id="每个隔离性会造成什么问题"><a href="#每个隔离性会造成什么问题" class="headerlink" title="每个隔离性会造成什么问题"></a>每个隔离性会造成什么问题</h4><ul><li>脏读：</li></ul><p><strong>（针对未提交数据）</strong>如果一个事务中对数据进行了更新，但<strong>事务还没有提交</strong>，另一个事务可以“看到”该事务没有提交的更新结果，这样造成的问题就是，如果第一个事务回滚，那么，第二个事务在此之前所“看到”的数据就是一笔脏数据。</p><ul><li>不可重复读</li></ul><p><strong>（针对其他提交前后，读取数据本身的对比）</strong>不可重复读取是指同一个事务在整个事务过程中对同一笔数据进行读取，每次读取结果都不同。如果事务1在事务2的更新操作之前读取一次数据，在事务2的更新操作之后再读取同一笔数据一次，两次结果是不同的，所以，Read Uncommitted也无法避免不可重复读取的问题。</p><ul><li>幻读</li></ul><p>（<strong>针对其他提交前后，读取数据条数的对比）</strong> 幻读是指同样一笔查询在整个事务过程中多次执行后，查询所得的结果集是不一样的。幻读针对的是多笔记录。在Read Uncommitted隔离级别下， 不管事务2的插入操作是否提交，事务1在插入操作之前和之后执行相同的查询，取得的结果集是不同的，所以，Read Uncommitted同样无法避免幻读的问题。</p><blockquote><p><strong>不可重复读的重点是修改:同样的条件, 你读取过的数据, 再次读取出来发现值不一样了</strong></p><p><strong>幻读的重点在于新增或者删除 (数据条数变化)</strong></p><p>比如：</p><p>select * from tableName where id = 1 ； 前后前次读取该id=1的数据字段值值不一致，不可重复读；</p><p>select * from tableName where id &gt; 3 ;   前后两次读取数据条数不一致，幻读；</p></blockquote><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th align="left">幻读</th></tr></thead><tbody><tr><td>未提交读</td><td>√</td><td>√</td><td align="left">√</td></tr><tr><td>提交读</td><td>×</td><td>√</td><td align="left">√</td></tr><tr><td>可重复读</td><td>×</td><td>×</td><td align="left">√（在MySQL中，加入临键锁可以防止）</td></tr><tr><td>可串行化</td><td>×</td><td>×</td><td align="left">×</td></tr></tbody></table><h3 id="事务怎么保证ACID"><a href="#事务怎么保证ACID" class="headerlink" title="事务怎么保证ACID"></a>事务怎么保证ACID</h3><h4 id="事务怎么保证一致性"><a href="#事务怎么保证一致性" class="headerlink" title="事务怎么保证一致性"></a>事务怎么保证一致性</h4><p>这个问题分为两个层面来说。</p><p>从数据库层面，<strong>数据库通过原子性、隔离性、持久性来保证一致性</strong>。也就是说ACID四大特性之中，C(一致性)是目的，A(原子性)、I(隔离性)、D(持久性)是手段，是为了保证一致性，数据库提供的手段。数据库必须要实现AID三大特性，才有可能实现一致性。例如，原子性无法保证，显然一致性也无法保证。</p><p>但是，如果你在事务里故意写出违反约束的代码，一致性还是无法保证的。例如，你在转账的例子中，你的代码里故意不给B账户加钱，那一致性还是无法保证。因此，还必须从应用层角度考虑。</p><p>从应用层面，通过代码判断数据库数据是否有效，然后决定回滚还是提交数据！</p><h4 id="事务怎么保证原子性"><a href="#事务怎么保证原子性" class="headerlink" title="事务怎么保证原子性"></a>事务怎么保证原子性</h4><p><strong>是利用Innodb的undo log。</strong></p><p>undo-log名为回滚日志，是实现原子性的关键，当事务回滚时能够撤销所有已经执行成功的SQL语句，他需要记录你要回滚的相应日志信息。实际上就是记录SQL操作的相反SQL操作，SQL为insert，undolog中记录一条delete。rollback操作实际就是执行undolog的SQL起到覆盖作用。</p><p>例如</p><ul><li>(1)当你delete一条数据的时候，就需要记录这条数据的信息，回滚的时候，insert这条旧数据</li><li>(2)当你update一条数据的时候，就需要记录之前的旧值，回滚的时候，根据旧值执行update操作</li><li>(3)当年insert一条数据的时候，就需要这条记录的主键，回滚的时候，根据主键执行delete操作</li></ul><p>undo log记录了这些回滚需要的信息，当事务执行失败或调用了rollback，导致事务需要回滚，便可以利用undo log中的信息将数据回滚到修改之前的样子。</p><h4 id="事务怎么保证持久性"><a href="#事务怎么保证持久性" class="headerlink" title="事务怎么保证持久性"></a>事务怎么保证持久性</h4><blockquote><p>在Mysql中，为了解决CPU和磁盘速度不一致问题，Mysql是将磁盘上的数据加载到内存，对内存进行操作，然后再回写磁盘。好，假设此时宕机了，在内存中修改的数据全部丢失了，持久性就无法保证。</p></blockquote><p><strong>是利用Innodb中的redolog。</strong></p><p>正如上面所说，MySQL是先把磁盘上的数据加载到内存当中。当做数据修改的时候，不仅在内存中操作，还会在redolog中记录这次的操作。<strong>当事务提交的时候，会将redolog日志进行刷盘</strong>（redolog一部分在内存中（redolog buffer ），一部分在磁盘中）。当数据库宕机重启的时候，会将redolog中的内容回复到数据库中。在根据binlog和undolog内容决定回滚数据还是提交事务。</p><p><strong>为什么要采用redolog刷盘，而不是每次提交事务进行数据刷盘？</strong></p><p>MySQL加载的内存中<strong>Buffer pool</strong> 的数据最小单位是页。一页有16K大小。只修改一个页的几个字节，就要将整个页面刷入磁盘，太浪费性能和资源。而且一个事务中的SQL可能牵涉到多个数据页的修改，而这次数据页可能也不是相邻的。也就是刷盘的时候要进行随机IO，速度会比较慢。</p><p>而redo log 体积小，毕竟只记录了哪一页修改了啥，因此体积小，刷盘快。redo log是一直向<strong>末尾进行追加</strong>，输入顺序IO，效率快（这个刷盘指的是redo log内存中的数据刷盘到磁盘中的redolog。若MySQL服务器正常，则redolog不会对数据库进行操作，只有当mysql出现宕机重启，才会触发redolog写入数据库中。）</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210526134616.png" alt="在这里插入图片描述" style="zoom:67%;" /><blockquote><p>MySQL会预读数据，能把一些“可能要访问”的页提前加入缓冲池buffer poll，避免未来的磁盘IO操作；管理算法是<strong>LRU</strong></p><p>具体详解：<a href="https://blog.csdn.net/suo082407128/article/details/102580630">https://blog.csdn.net/suo082407128/article/details/102580630</a></p></blockquote><h5 id="Redo-log刷盘机制"><a href="#Redo-log刷盘机制" class="headerlink" title="Redo log刷盘机制"></a>Redo log刷盘机制</h5><blockquote><p>redo log日志在磁盘的大小是固定的，即记录满了以后就从头循环写。</p><p>参数：innodb_flush_log_at_trx_commit </p><p>innodb事物提交的重要参数，取值只有0、1、2，默认为1，动态参数。</p><p>该参数是用来控制提交操作和高性能的，如果需要更高的性能，在crash时可能存在数据丢失风险，也就是不具备ACID的持久性。</p><p>0：log每秒写入磁盘。crash时可能会丢失数据（因为那些已提交完成的事物还没有落盘）</p><p>1：默认值是1，<strong>在事务提交时刷脏数据到盘</strong></p><p>2：log每秒写入磁盘，且在每次提交时写入磁盘。此状态时也不会丢失数据。</p></blockquote><h5 id="Buffer-Pool的刷盘机制"><a href="#Buffer-Pool的刷盘机制" class="headerlink" title="Buffer Pool的刷盘机制"></a>Buffer Pool的刷盘机制</h5><blockquote><p>1、当innodb中的脏页比例超过innodb_max_dirty_pages_pct_lwm的值时（默认值为75），这个时候就会开始刷新脏页到磁盘。</p><p>2、当innodb中的脏页比例超过innodb_max_dirty_pages_pct_lwm的值，而且还超过innodb_max_dirty_pages_pct时</p><p>innodb就会进入勤快刷新模式(agressively flush）这个模式下innodb会把脏页更快的刷新到磁盘。</p><p>3、还有一种情况叫做sharp checkpoint ,当innodb要重用它之前的redo文件时，就会把innodb_buffer_pool中所有与这</p><p>个文件有关的页面都要刷新到磁盘；这样做就有可能引起磁盘的IO风暴了，轻者影响性能，重者影响可用性。</p><p>可以简单的理解为：<strong>每秒都会进行一次刷盘（checkpoint：定期将db buffer的内容刷盘）。当脏页数据太快的时候，会触发innodb的勤快刷新模式。</strong></p><p>参考文章：</p><p><a href="https://blog.csdn.net/molaifeng/article/details/113820047">https://blog.csdn.net/molaifeng/article/details/113820047</a></p><p><a href="https://www.cnblogs.com/JiangLe/p/7419835.html?utm_source=itdadao&amp;utm_medium=referral">https://www.cnblogs.com/JiangLe/p/7419835.html?utm_source=itdadao&amp;utm_medium=referral</a></p><p><a href="https://www.jianshu.com/p/06d09aa71a15">https://www.jianshu.com/p/06d09aa71a15</a></p></blockquote><h4 id="事务怎么保证隔离性"><a href="#事务怎么保证隔离性" class="headerlink" title="事务怎么保证隔离性"></a>事务怎么保证隔离性</h4><p>RC,RR–MVCC</p><p>因为READ UNCOMMITIED总是读取最新的数据行，而不是符合当前事务版本的数据行。</p><p>而SERIALIZABLE则会对所有读取的行都加锁。</p><hr><h3 id="MVCC是什么"><a href="#MVCC是什么" class="headerlink" title="MVCC是什么"></a>MVCC是什么</h3><h4 id="MVCC的概念"><a href="#MVCC的概念" class="headerlink" title="MVCC的概念"></a>MVCC的概念</h4><p>多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。</p><p>而未提交读隔离级别总是读取最新的数据行，无需使用 MVCC。</p><p>可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p><p><strong>MVCC是一种用来解决读-写冲突的无锁并发控制</strong>，其基本思想是为每次事务生成一个新版本的数据，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照。 这样在读操作不用阻塞写操作，写操作不用阻塞读操作的同时，避免了脏读和不可重复读。</p><p><strong>MVCC 在mysql 中的实现依赖的是 undo log 与 read view 。</strong></p><blockquote><p><strong>名词解释：</strong></p><p><strong>版本号</strong></p><ul><li>系统版本号：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。</li><li>事务版本号：事务开始时的系统版本号。</li></ul><p><strong>隐藏的列</strong></p><p>MVCC 在每行记录后面都保存着两个隐藏的列，用来存储两个版本号：</p><ul><li><code>trx_id</code>：每次一个事务对某条记录进行修改时，都会把该事务的<code>事务id</code>赋值给<code>trx_id</code>隐藏列；</li><li><code>roll_pointer</code>：每次对一个记录进行修改时，都会把旧版本写入<code>undo</code>日志中，然后把这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息；</li></ul><p><strong>创建版本号</strong>：指示创建一个数据行的快照时的系统版本号；</p><p><strong>删除版本号</strong>：如果该快照的删除版本号大于当前事务版本号表示该快照有效，否则表示该快照已经被删除了。</p></blockquote><h4 id="MVCC是怎么保证隔离级别的"><a href="#MVCC是怎么保证隔离级别的" class="headerlink" title="MVCC是怎么保证隔离级别的"></a>MVCC是怎么保证隔离级别的</h4><p>以下实现过程针对可重复读隔离级别：</p><p><strong>SELECT</strong></p><p>InnoDB 会根据以下两个条件检查每行记录：</p><ul><li><p>InnoDB只查找版本早于当前事务版本的数据行（也就是，行的事务编号小于或等于当前事务的事务编号），这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的。</p></li><li><p>删除的行要事务ID判断，读取到事务开始之前状态的版本，只有符合上述两个条件的记录，才能返回作为查询结果。</p></li></ul><p><strong>INSERT</strong></p><p>InnoDB为新插入的每一行保存当前事务编号作为行版本号。</p><p><strong>DELETE</strong></p><p>InnoDB为删除的每一行保存当前事务编号作为行删除标识。</p><p><strong>UPDATE</strong></p><p>InnoDB为插入一行新记录，保存当前事务编号作为行版本号，同时保存当前事务编号到原来的行作为行删除标识。</p><p>保存这两个额外事务编号，使大多数读操作都可以不用加锁。这样设计使得读数据操作很简单，性能很好，并且也能保证只会读取到符合标准的行。不足之处是每行记录都需要额外的存储空间，需要做更多的行检查工作，以及一些额外的维护工作。</p><h4 id="MVCC-在mysql-中的实现"><a href="#MVCC-在mysql-中的实现" class="headerlink" title="MVCC 在mysql 中的实现"></a><strong>MVCC 在mysql 中的实现</strong></h4><p>MVCC 在mysql 中的实现依赖的是 undo log 与 read view 。</p><p>undo log根据行为的不同，undo log分为两种： <strong>insert undo log</strong> 和 <strong>update undo log</strong></p><ul><li> insert undo log</li></ul><p>insert 操作中产生的undo log，因为insert操作记录只对当前事务本身可见，对于其他事务此记录不可见，所以 insert undo log 可以在事务提交后直接删除而不需要进行purge操作。</p><p>purge的主要任务是将数据库中已经 mark del 的数据删除，另外也会批量回收undo pages</p><p>数据库 Insert时的数据初始状态：此时回滚指针是null;</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210526145228.jpeg" alt="在这里插入图片描述" style="zoom:67%;" /><ul><li><p>update undo log：</p><p>update 或 delete 操作中产生的 undo log。 因为会对已经存在的记录产生影响，为了提供 MVCC机制，因此update undo log 不能在事务提交时就进行删除，而是将事务提交时放到入 history list 上，等待 purge 线程进行最后的删除操作。</p><ol><li>数据第一次被修改时：</li></ol><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210526145233.jpeg" alt="在这里插入图片描述" style="zoom:67%;" /><ol start="2"><li><p>当另一个事务第二次修改当前数据：</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210526145237.jpeg" alt="在这里插入图片描述" style="zoom:67%;" /></li></ol></li><li><p>为了保证事务并发操作时，在写各自的undo log时不产生冲突，InnoDB采用回滚段的方式来维护undo log的并发写入和持久化。回滚段实际上是一种 Undo 文件组织方式</p></li></ul><h4 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h4><p>对于 RU(READ UNCOMMITTED) 隔离级别下，所有事务直接读取数据库的最新值即可，和 SERIALIZABLE 隔离级别，所有请求都会加锁，同步执行。所以这对这两种情况下是不需要使用到 Read View 的版本控制。</p><p>对于 RC(READ COMMITTED) 和 RR(REPEATABLE READ) 隔离级别的实现就是通过上面的版本控制来完成。两种隔离界别下的核心处理逻辑就是判断所有版本中哪个版本是当前事务可见的处理。针对这个问题InnoDB在设计上增加了ReadView的设计，ReadView中主要包含当前系统中还有<strong>哪些活跃的读写事务，把它们的事务id放到一个列表中，我们把这个列表命名为为m_ids。</strong></p><p>对于查询时的版本链数据是否看见的判断逻辑：</p><ul><li><p>如果被访问版本的 trx_id 属性值小于 m_ids 列表中最小的事务id，表明生成该版本的事务在生成 ReadView 前已经提交，所以该版本可以被当前事务访问。</p></li><li><p>如果被访问版本的 trx_id 属性值大于 m_ids 列表中最大的事务id，表明生成该版本的事务在生成 ReadView 后才生成，所以该版本不可以被当前事务访问。</p></li><li><p>如果被访问版本的 trx_id 属性值在 m_ids 列表中最大的事务id和最小事务id之间，那就需要判断一下 trx_id 属性值是不是在 m_ids 列表中，如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。</p></li></ul><blockquote><p><strong>这个ReadView可以理解为一个读视图。</strong></p><p><strong>当隔离级别为RR时：只会在第一次快照读的时候生成ReadView,之后执行的快照读都是用第一次生成的readView，在该级别的事务中，两次相同的select查询返回的结果是相同的，无关其他事务已经提交的修改结果。（保证可重复读）。当时进行update，insert，delete，以及select…for update 操作时，更新一次readView视图。（保证其他事务修改记录不会丢失）</strong></p><p><strong>当隔离级别为RC是：每次进行快照读的时候都会生成一个ReadView，所以其他事务已经提交的数据能够看到。这时执行相同的select语句返回的结果可能不是相同的，因为两次执行之间可能存在别的事务提交了当前查询列的修改，第二次select时刷新到最新的一个ReadView。（造成不可重复读）</strong></p></blockquote><h4 id="MVCC总结："><a href="#MVCC总结：" class="headerlink" title="MVCC总结："></a><strong>MVCC总结：</strong></h4><p>所谓的MVCC（Multi-Version Concurrency Control ，多版本并发控制）指的就是在使用 READ COMMITTD 、REPEATABLE READ 这两种隔离级别的事务在执行普通的 SEELCT 操作时访问记录的版本链的过程，这样子可以使不同事务的 读-写 、 写-读 操作并发执行，从而提升系统性能。</p><p>在 MySQL 中， READ COMMITTED 和 REPEATABLE READ 隔离级别的的一个非常大的区别就是它们生成 ReadView 的时机不同。在 <strong>READ COMMITTED 中每次快照读都会生成一个实时的 ReadView</strong>，做到保证每次提交后的数据是处于当前的可见状态。而 <strong>REPEATABLE READ 中，在当前事务第一次查询时生成当前的 ReadView</strong>，并且当前的 ReadView 会一直沿用到当前事务提交，以此来保证可重复读（REPEATABLE READ）。</p><h5 id="快照读和当前读"><a href="#快照读和当前读" class="headerlink" title="快照读和当前读"></a>快照读和当前读</h5><p>在可重复读级别中，通过MVCC机制，虽然让数据变得可重复读，但我们读到的数据可能是历史数据，是不及时的数据，不是数据库当前的数据！这在一些对于数据的时效特别敏感的业务中，就很可能出问题。</p><p>对于这种读取历史数据的方式，我们叫它快照读 (snapshot read)，而读取数据库当前版本数据的方式，叫当前读 (current read)。很显然，在MVCC中：</p><p><strong>快照读</strong></p><p>MVCC 的 SELECT 操作是快照中的数据，不需要进行加锁操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table ….;</span><br></pre></td></tr></table></figure><p><strong>当前读</strong></p><p>MVCC 其它会对数据库进行修改的操作（INSERT、UPDATE、DELETE）需要进行加锁操作，从而读取最新的数据。可以看到 MVCC 并不是完全不用加锁，而只是避免了 SELECT 的加锁操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INSERT;</span><br><span class="line">UPDATE;</span><br><span class="line">DELETE;</span><br><span class="line">在进行 SELECT 操作时，可以强制指定进行加锁操作。以下第一个语句需要加 S 锁，第二个需要加 X 锁。</span><br><span class="line"></span><br><span class="line">- select * from table where ? lock in share mode;  共享锁  允许多个线程读取数据，不允许修改数据（仅可读）</span><br><span class="line">- select * from table where ? for update;  排他锁 只允许一个线程读写。其他线程阻塞   </span><br><span class="line">S锁 和 X锁 都是悲观锁</span><br></pre></td></tr></table></figure><p>事务的隔离级别实际上都是定义的当前读的级别，MySQL为了减少锁处理（包括等待其它锁）的时间，提升并发能力，引入了快照读的概念，使得select不用加锁。而update、insert这些“当前读”的隔离性，就需要通过加锁来实现了。</p><h4 id="RR隔离级别下解决幻读–临键锁"><a href="#RR隔离级别下解决幻读–临键锁" class="headerlink" title="RR隔离级别下解决幻读–临键锁"></a><strong>RR隔离级别下解决幻读–临键锁</strong></h4><p><strong>Record Lock  行锁</strong><br>单个行记录上的锁我们通常讲的行锁，它的实质是通过对索引的加锁实现；只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁。在事务隔离级别为读已提交下，仅采用Record Lock。</p><p>如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。</p><p><strong>Gap Lock  间隙锁</strong><br>锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT c FROM t WHERE c BETWEEN 10 and 20 FOR UPDATE;</span><br></pre></td></tr></table></figure><p><strong>Next-Key Lock  临键锁</strong><br>它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。例如一个索引包含以下值：10, 11, 13, and 20，那么就需要锁定以下区间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(-∞, 10]</span><br><span class="line">(10, 11]</span><br><span class="line">(11, 13]</span><br><span class="line">(13, 20]</span><br><span class="line">(20, +∞)</span><br></pre></td></tr></table></figure><p><strong>在 InnoDB 存储引擎中，SELECT 操作的幻读问题通过 MVCC 的快照读得到了解决，</strong></p><p><strong>而 UPDATE、DELETE 的幻读问题通过 Record Lock 解决，INSERT 的不可重复读问题是通过 Next-Key Lock（Record Lock + Gap Lock）解决的。间隙锁的引入，可能会导致同样的语句锁住更大的范围，这其实是影响了并发度的。 我们总是牺牲性能来换取安全稳定。</strong></p><h6 id="串行化是怎么加锁的"><a href="#串行化是怎么加锁的" class="headerlink" title="串行化是怎么加锁的"></a>串行化是怎么加锁的</h6><p>串行化就相当于给操作的记录上一个共享锁（读写锁），即当读某条记录时就占用这条记录的读锁，此时其它事务一样可以申请到这条记录的读锁来读取，但是不能写（读锁被占的话，写锁就不能被占；读锁可以被多个事务同时占有）</p><h3 id="MySQL中锁"><a href="#MySQL中锁" class="headerlink" title="MySQL中锁"></a>MySQL中锁</h3><h4 id="MySQL锁概述"><a href="#MySQL锁概述" class="headerlink" title="MySQL锁概述"></a><strong>MySQL锁概述</strong></h4><p>相对其他数据库而言，MySQL的锁机制比较简单，其最 显著的特点是不同的存储引擎支持不同的锁机制。比如，MyISAM和MEMORY存储引擎采用的是表级锁（table-level locking）；BDB存储引擎采用的是页面锁（page-level locking），但也支持表级锁；InnoDB存储引擎既支持行级锁（row-level locking），也支持表级锁，但默认情况下是采用行级锁。<br>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。<br>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。<br>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般<br>从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适！仅从锁的角度 来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有 并发查询的应用，如一些在线事务处理（OLTP）系统。</p><h4 id="死锁和死锁检测"><a href="#死锁和死锁检测" class="headerlink" title="死锁和死锁检测"></a><strong>死锁和死锁检测</strong></h4><p>在并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁</p><p>当出现死锁以后，有两种策略：</p><p>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数innodb_lock_wait_timeout来设置<br>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数innodb_deadlock_detect设置为on，表示开启这个逻辑</p><h5 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a><strong>乐观锁和悲观锁</strong></h5><p>乐观锁不是数据库自带的，需要我们自己去实现。乐观锁是指操作数据库时(更新操作)，想法很乐观，认为这次的操作不会导致冲突，在操作数据时，并不进行任何其他的特殊处理（也就是不加锁），而在进行更新后，再去判断是否有冲突了。通常实现是这样的：在表中的数据进行操作时(更新)，先给数据表加一个版本(version)字段，每操作一次，将那条记录的版本号加1。也就是先查询出那条记录，获取出version字段,如果要对那条记录进行操作(更新),则先判断此刻version的值是否与刚刚查询出来时的version的值相等，如果相等，则说明这段期间，没有其他程序对其进行操作，则可以执行更新，将version字段的值加1；如果更新时发现此刻的version值与刚刚获取出来的version的值不相等，则说明这段期间已经有其他程序对其进行操作了，则不进行更新操作。</p><p>与乐观锁相对应的就是悲观锁了。悲观锁就是在操作数据时，认为此操作会出现数据冲突，所以在进行每次操作时都要通过获取锁才能进行对相同数据的操作，这点跟java中的synchronized很相似，所以悲观锁需要耗费较多的时间。另外与乐观锁相对应的，悲观锁是由数据库自己实现了的，要用的时候，我们直接调用数据库的相关语句就可以了。</p><h5 id="共享锁和排它锁"><a href="#共享锁和排它锁" class="headerlink" title="共享锁和排它锁"></a><strong>共享锁和排它锁</strong></h5><p>共享锁(S锁)和排它锁（X锁）是悲观锁的不同的实现，它俩都属于悲观锁的范畴。</p><p><strong>共享锁</strong>指的就是对于多个不同的事务，对同一个资源共享同一个锁。相当于对于同一把门，它拥有多个钥匙一样</p><p>如果事务T对数据A加上共享锁后，则其他事务只能对A再加共享锁，不能加排他锁。获准共享锁的事务只能读数据，不能修改数据。</p><p>对于悲观锁，一般数据库已经实现了，共享锁也属于悲观锁的一种，那么共享锁在mysql中是通过什么命令来调用呢。通过查询资料，了解到通过在执行语句后面加上<code> lock in share mode</code>就代表对某些资源加上共享锁了。</p><p><strong>排它锁</strong>与共享锁相对应，就是指对于多个不同的事务，对同一个资源只能有一把锁。</p><p>如果事务T对数据A加上排他锁后，则其他事务不能再对A加任任何类型的封锁。获准排他锁的事务既能读数据，又能修改数据。</p><p>与共享锁类型，在需要执行的语句后面加上 <code>for update</code>就可以了</p><blockquote><ul><li>共享锁    允许多个线程读取数据，不允许修改数据,所有的线程都是仅可读</li><li>排他锁    只允许一个线程读写。其他线程阻塞  </li></ul></blockquote><blockquote><p>InnoDB默认采用行锁，在未使用索引字段查询时升级为表锁。MySQL这样设计并不是给你挖坑。它有自己的设计目的。即便你在条件中使用了索引字段，MySQL会根据自身的执行计划，考虑是否使用索引(所以explain命令中会有possible_key 和 key)。如果MySQL认为全表扫描效率更高，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行锁。因此，在分析锁冲突时，别忘了检查SQL的执行计划，以确认是否真正使用了索引。</p><p>第一种情况：<strong>全表更新</strong>。事务需要更新大部分或全部数据，且表又比较大。若使用行锁，会导致事务执行效率低，从而可能造成其他事务长时间锁等待和更多的锁冲突。</p><p>第二种情况：<strong>多表查询</strong>。事务涉及多个表，比较复杂的关联查询，很可能引起死锁，造成大量事务回滚。这种情况若能一次性锁定事务涉及的表，从而可以避免死锁、减少数据库因事务回滚带来的开销。</p></blockquote><h4 id="一致性锁定读和一致性非锁定读"><a href="#一致性锁定读和一致性非锁定读" class="headerlink" title="一致性锁定读和一致性非锁定读"></a>一致性锁定读和一致性非锁定读</h4><p>在默认配置下innodb的隔离级别是repeatable read，innodb的select操作使用的是<strong>一致性非锁定读</strong></p><p>一致性的非锁定行读（consistent nonlocking read，简称CNR）是指InnoDB存储引擎通过行多版本控制（multi versioning）的方式来读取当前执行时间数据库中运行的数据。如果读取的行正在执行delete、update操作，这时读取操作不会<strong>因此而会等待行上锁的释放</strong>，相反，InnoDB存储引擎会去读取行的一个快照数据。</p><p>之所以称为非锁定度，是因为不需要等待访问数据行上的X锁的释放。快照数据是指该行之前版本的数据，通过undo段来实现（undo用来在事务中回滚数据）。</p><p>在Read Committed和Repeatable Read模式下，innodb存储引擎使用默认的一致性非锁定读。在Read Committed隔离级别下，对于快照数据，一致性非锁定读总是读取被锁定行的最新一份快照数据；而在Repeatable Read隔离级别下，对于快照数据，一致性非锁定读总是读取事务开始时的行数据版本。</p><p><strong>一致性锁定读</strong><br>默认情况下，innodb存储引擎的select操作使用一致性非锁定读，但是在某些情况下，需要对读操作进行加锁以保证数据逻辑的一致性。Innodb存储引擎对select语句支持2种一致性锁定读(locking read)操作;</p><p>SELECT … FOR UPDATE对于读取的行记录加一个X排它锁，其他事务不能对锁定的行加任何锁。</p><p>SELECT … LOCK IN SHARE MODE对于读取的行记录添加一个S共享锁。其它事务可以向被锁定的行加S锁，但是不允许添加X锁，否则会被阻塞。</p><blockquote><p>简单理解就是一致性非锁定读就是快照读 : select….;</p><p>一致性锁定读就是当前读:  select…for update;</p></blockquote><h3 id="MySQL的三种日志"><a href="#MySQL的三种日志" class="headerlink" title="MySQL的三种日志"></a>MySQL的三种日志</h3><h4 id="重做日志（redo-log）"><a href="#重做日志（redo-log）" class="headerlink" title="重做日志（redo log）"></a>重做日志（redo log）</h4><p>确保事务的持久性。防止在发生故障的时间点，尚有脏页未写入磁盘，在重启mysql服务的时候，根据redo log进行重做，从而达到事务的持久性这一特性。</p><h4 id="回滚日志（undo-log）"><a href="#回滚日志（undo-log）" class="headerlink" title="回滚日志（undo log）"></a>回滚日志（undo log）</h4><p>保存了事务发生之前的数据的一个版本，可以用于回滚，同时可以提供多版本并发控制下的读（MVCC）</p><p>在数据修改的时候，不仅记录了redo，还记录了相对应的undo，如果因为某些原因导致事务失败或回滚了，可以借助该undo进行回滚。</p><p>undo log和redo log记录物理日志不一样，它是逻辑日志。<strong>可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。</strong></p><h4 id="二进制日志（binlog）"><a href="#二进制日志（binlog）" class="headerlink" title="二进制日志（binlog）"></a>二进制日志（binlog）</h4><p>用于复制，在主从复制中，从库利用主库上的binlog进行重播，实现主从同步。<br>用于数据库的基于时间点的还原。</p><p>Mysql的日志系统主要有redo log（重做日志）和binlog （归档日志）。redo log是Innodb存储引擎层面的日志，binlog是MySQL Server层的记录日志。两者都是记录了某种操作的日志，自然会有写重复。</p><p>MySQL的逻辑架构图：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210601153811.png" alt="image-20210601153811495"></p><h5 id="redo-log日志模块"><a href="#redo-log日志模块" class="headerlink" title="redo log日志模块"></a>redo log日志模块</h5><p>redo log是InnoDB存储引擎层的日志，又称重做日志文件，用于记录事务操作的变化，记录的是数据修改之后的值，不管事务是否提交都会记录下来。在实例和介质失败（media failure）时，redo log文件就能派上用场，如数据库掉电，InnoDB存储引擎会使用redo log恢复到掉电前的时刻，以此来保证数据的完整性。</p><p>在一条更新语句进行执行的时候，InnoDB引擎会把更新记录写到redo log日志中，然后更新内存，此时算是语句执行完了，然后在空闲的时候或者是按照设定的更新策略将redo log中的内容更新到磁盘中，这里涉及到<code>WAL</code>即<code>Write Ahead logging</code>技术，他的关键点是<strong>先写日志，再写磁盘</strong>。兵马未动，粮草先行</p><p>有了redo log日志，那么在数据库进行异常重启的时候，可以根据redo log日志进行恢复，也就达到了<code>crash-safe</code>。</p><p>redo log日志的大小是固定的，即记录满了以后就从头循环写。</p><h5 id="binlog日志模块"><a href="#binlog日志模块" class="headerlink" title="binlog日志模块"></a>binlog日志模块</h5><p>binlog是属于MySQL Server层面的，又称为归档日志，属于逻辑日志，是以二进制的形式记录的是这个语句的原始逻辑，依靠binlog是没有<code>crash-safe</code>能力的</p><p>binlog是记录所有数据库表结构变更（例如CREATE、ALTER TABLE…）以及表数据修改（INSERT、UPDATE、DELETE…）的二进制日志。，如果update操作没有造成数据变化，也是会记入binlog。</p><p>MySQL binlog的三种工作模式：ROW（行模式）, Statement（语句模式）, Mixed（混合模式）</p><h5 id="redo-log和binlog区别"><a href="#redo-log和binlog区别" class="headerlink" title="redo log和binlog区别"></a>redo log和binlog区别</h5><ul><li>redo log是属于innoDB层面，binlog属于MySQL Server层面的，这样在数据库用别的存储引擎时可以达到一致性的要求。</li><li>redo log是物理日志，记录该数据页更新的内容；binlog是逻辑日志，记录的是这个更新语句的原始逻辑</li><li>redo log是循环写，日志空间大小固定；binlog是追加写，是指一份写到一定大小的时候会更换下一个文件，不会覆盖。</li><li>binlog可以作为恢复数据使用，主从复制搭建，redo log作为异常宕机或者介质故障后的数据恢复使用。</li></ul><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210526160444.jpeg" alt="在这里插入图片描述" style="zoom: 33%;" /><h5 id="一条更新语句执行的顺序"><a href="#一条更新语句执行的顺序" class="headerlink" title="一条更新语句执行的顺序"></a>一条更新语句执行的顺序</h5><p>二阶段提交</p><p>update T set c=c+1 where ID=2;</p><ul><li>执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</li></ul><blockquote><p><strong>WAL</strong></p><p>WAL（Write-ahead logging，预写式日志）是数据库系统提供原子性和持久化的一系列技术。</p><p>在使用 WAL 的系统中，所有的修改在提交之前都要先写入 log 文件中。</p><p><strong>MySQL的WAL（Write Ahead Log）在InnoDB中被称作redo log</strong></p><p><strong>「修改并不直接写入到数据库文件中，而是写入到另外一个称为 WAL 的文件中；如果事务失败，WAL 中的记录会被忽略，撤销修改；如果事务成功，它将在随后的某个时间被写回到数据库文件中，提交修改。」</strong></p><h6 id="WAL-的优点"><a href="#WAL-的优点" class="headerlink" title="WAL 的优点"></a><strong>WAL 的优点</strong></h6><ol><li><strong>读和写可以完全地并发执行，不会互相阻塞</strong>（但是写之间仍然不能并发）。</li><li>WAL 在大多数情况下，拥有更好的性能（因为无需每次写入时都要写两个文件）。</li><li>磁盘 I/O 行为更容易被预测。</li><li>使用更少的 fsync()操作，减少系统脆弱的问题。</li></ol></blockquote><h4 id="二阶段提交（prepare-，commit）"><a href="#二阶段提交（prepare-，commit）" class="headerlink" title="二阶段提交（prepare ，commit）"></a>二阶段提交（prepare ，commit）</h4><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210526160736.jpeg" alt="在这里插入图片描述" style="zoom: 33%;" /><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210526160740.png" alt="img"></p><h5 id="两阶段提交原理描述"><a href="#两阶段提交原理描述" class="headerlink" title="两阶段提交原理描述:"></a>两阶段提交原理描述:</h5><p>阶段1：InnoDB redo log 写盘，InnoDB 事务进入 prepare 状态</p><p>阶段2：如果前面prepare成功，binlog 写盘，那么再继续将事务日志持久化到binlog，如果持久化成功，那么InnoDB </p><p>事务 则进入 commit 状态(实际是在redo log里面写上一个commit记录)</p><p>备注: 每个事务binlog的末尾，会记录一个 XID event，标志着事务是否提交成功，也就是说，recovery 过程中，binlog </p><p>最后一个 XID event 之后的内容都应该被 purge。</p><p>最终:mysql在落盘日志的时候,先落盘binlog,再落盘redo.</p><h4 id="组提交"><a href="#组提交" class="headerlink" title="组提交"></a>组提交</h4><h5 id="组提交概念："><a href="#组提交概念：" class="headerlink" title="组提交概念："></a>组提交概念：</h5><p>将多个刷盘操作合并成一个，最大化每次刷盘手里，提升性能，降低资源开销。</p><h6 id="在没有开启binlog时："><a href="#在没有开启binlog时：" class="headerlink" title="在没有开启binlog时："></a>在没有开启binlog时：</h6><p>Redo log的刷盘操作将会是最终影响MySQL TPS的瓶颈所在。为了缓解这一问题，MySQL使用了组提交，将多个刷盘操作合并成一个，如果说10个事务依次排队刷盘的时间成本是10，那么将这10个事务一次性一起刷盘的时间成本则近似于1。</p><h6 id="当开启binlog时："><a href="#当开启binlog时：" class="headerlink" title="当开启binlog时："></a>当开启binlog时：</h6><p>为了保证Redo log和binlog的数据一致性，MySQL使用了二阶段提交，由binlog作为事务的协调者。而 引入二阶段提交 使得binlog又成为了性能瓶颈，先前的Redo log 组提交 也成了摆设。为了再次缓解这一问题，MySQL增加了binlog的组提交，目的同样是将binlog的多个刷盘操作合并成一个，结合Redo log本身已经实现的 组提交，分为三个阶段(Flush 阶段、Sync 阶段、Commit 阶段)完成binlog 组提交，最大化每次刷盘的收益，弱化磁盘瓶颈，提高性能。</p><blockquote><p>组提交参考文章：<a href="https://blog.csdn.net/n88Lpo/article/details/81187372">https://blog.csdn.net/n88Lpo/article/details/81187372</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 事务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现微信小程序获取unionID</title>
      <link href="2021/05/12/Java%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%8E%B7%E5%8F%96unionID/"/>
      <url>2021/05/12/Java%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%8E%B7%E5%8F%96unionID/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：微信开发平台为开发者提供openId用来区分用户的唯一性，但是openId只是在独立的应用内是唯一的，如果开发者拥有多个移动应用、网站应用、和公众帐号（包括小程序），可通过 UnionID 来区分用户的唯一性，因为只要是同一个微信开放平台帐号下所有应用，用户的 UnionID 是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，UnionID是相同的。<br>微信官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/union-id.html">官方文档</a></p></blockquote><h3 id="获取UnionID的两种方式："><a href="#获取UnionID的两种方式：" class="headerlink" title="获取UnionID的两种方式："></a>获取UnionID的两种方式：</h3><ul><li> 如果开发者帐号下存在同主体的公众号，并且该用户已经关注了该公众号。开发者可以直接通过 wx.login + code2Session 获取到该用户 UnionID</li><li> 从加密数据中获取UnionID</li></ul><blockquote><p>ps : 这里要注意的是微信开放平台如果没有绑定微信小程序，不可能获取到unionId，无论哪种方式</p></blockquote><h4 id="1-已经关注公众号获取UnionID"><a href="#1-已经关注公众号获取UnionID" class="headerlink" title="1. 已经关注公众号获取UnionID"></a>1. 已经关注公众号获取UnionID</h4><p>这种方式对于开发者来说是获取unionID最简单的方式，开发者可以直接通过 wx.login + code2Session 获取到该用户 UnionID。<br>以下代码只针对于Java语言来演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinke.applets.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.jinke.utils.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zsc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppletsWeChatUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录凭证校验地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String GetPageAccessTokenUrl = <span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session?appid=APPID&amp;secret=SECRET&amp;js_code=CODE&amp;grant_type=authorization_code&quot;</span>;</span><br><span class="line">    <span class="comment">// 小程序的appId以及appSecret</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String appId = <span class="string">&quot;xxxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String appSecret = <span class="string">&quot;xxxxxxxxxxxxxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小程序授权获取openID和unionID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 前端通过wx.login获取的wxCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">oauth2GetUnion</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        String requestUrl = GetPageAccessTokenUrl.replace(<span class="string">&quot;APPID&quot;</span>, appId).replace(<span class="string">&quot;SECRET&quot;</span>, appSecret).replace(<span class="string">&quot;CODE&quot;</span>, code);</span><br><span class="line">        Map&lt;String, String&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/** </span></span><br><span class="line"><span class="comment">             * HttpUtil工具类会在下方贴出，此处也可换成自己的写法，只要是get请求就可以</span></span><br><span class="line"><span class="comment">             * 此处请求返回的json数据包为：</span></span><br><span class="line"><span class="comment">             * openidstring用户唯一标识</span></span><br><span class="line"><span class="comment">             * session_keystring会话密钥</span></span><br><span class="line"><span class="comment">             * unionidstring用户在开放平台的唯一标识符</span></span><br><span class="line"><span class="comment">             * errcodenumber错误码</span></span><br><span class="line"><span class="comment">             * errmsgstring错误信息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            String response = HttpUtil.get(requestUrl);</span><br><span class="line">            JSONObject jsonResult = JSONObject.parseObject(response);           </span><br><span class="line">            String openid = String.valueOf(jsonResult.get(<span class="string">&quot;openid&quot;</span>));</span><br><span class="line">            <span class="comment">// 若用户没有改小程序同主体公众号，则此处unionID为空</span></span><br><span class="line">            String unionid = String.valueOf(jsonResult.get(<span class="string">&quot;unionid&quot;</span>));</span><br><span class="line">            result.put(<span class="string">&quot;openid&quot;</span>, openid);</span><br><span class="line">            result.put(<span class="string">&quot;unionid&quot;</span>,unionid);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;授权获取unionid出现异常&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-解密数据获取UnionID"><a href="#2-解密数据获取UnionID" class="headerlink" title="2. 解密数据获取UnionID"></a>2. 解密数据获取UnionID</h4><p>此方式针对于没有主体公众号或者做不到让用户都关注公众号的情况下获取UnionID.大致流程如下</p><ol><li> 前端js调取公开接口wx.getUserInfo获取encryptedData和iv</li><li> 根据code2Session获取session_key和openid，如果有unionid直接返回</li><li> 根据session_key,encryptedData和iv进行AES解密</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinke.rusi.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.jinke.utils.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zsc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppletsWeChatUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 登录凭证校验地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String GetPageAccessTokenUrl = <span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session?appid=APPID&amp;secret=SECRET&amp;js_code=CODE&amp;grant_type=authorization_code&quot;</span>;</span><br><span class="line">    <span class="comment">// 小程序的appId以及appSecret</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String appId = <span class="string">&quot;xxxxxxxxxxxxx&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String appSecret = <span class="string">&quot;xxxxxxxxxxxxxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小程序授权</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code WxCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptedData 加密数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> iv 偏移量iv</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">oauth2GetUnionId</span><span class="params">(String code,String encryptedData,String iv)</span> </span>&#123;</span><br><span class="line">        String requestUrl = GetPageAccessTokenUrl.replace(<span class="string">&quot;APPID&quot;</span>, appId).replace(<span class="string">&quot;SECRET&quot;</span>, appSecret).replace(<span class="string">&quot;CODE&quot;</span>, code);</span><br><span class="line">        Map&lt;String, String&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String response = HttpUtil.get(requestUrl);</span><br><span class="line">            JSONObject jsonObject = JSONObject.parseObject(response);</span><br><span class="line">            String openid = String.valueOf(jsonObject.get(<span class="string">&quot;openid&quot;</span>));</span><br><span class="line">            <span class="comment">// 获取解密所需的session_key</span></span><br><span class="line">            String session_key = String.valueOf(jsonObject.get(<span class="string">&quot;session_key&quot;</span>));</span><br><span class="line">            <span class="comment">// 通过AES解密encryptedData 获取union_id，工具类见下方</span></span><br><span class="line">            String encryptedResult = AESUtil.decrypt(encryptedData, session_key, iv, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">             <span class="comment">/** </span></span><br><span class="line"><span class="comment">             * 此处解密之后数据包格式为：</span></span><br><span class="line"><span class="comment">             * openid string用户唯一标识</span></span><br><span class="line"><span class="comment">             * nickName  string 昵称</span></span><br><span class="line"><span class="comment">             * gender    string 性别</span></span><br><span class="line"><span class="comment">             * city      string城市</span></span><br><span class="line"><span class="comment">             * province  string 省份</span></span><br><span class="line"><span class="comment">             * country   string 国家</span></span><br><span class="line"><span class="comment">             * avatarUrl string头像</span></span><br><span class="line"><span class="comment">             * unionId   string用户在开放平台的唯一标识符</span></span><br><span class="line"><span class="comment">             * watermark JSON数据水印，包括appid，timestamp字段 为了校验数据的有效性</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            JSONObject parseObject = JSONObject.parseObject(encryptedResult);</span><br><span class="line">            <span class="comment">// ps:此处一定要注意解密的出来的字段名为驼峰命名的unionId,openId，并非直接授权的unionid</span></span><br><span class="line">            String unionid = String.valueOf(parseObject.get(<span class="string">&quot;unionId&quot;</span>));</span><br><span class="line">            result.put(<span class="string">&quot;openid&quot;</span>, openid);</span><br><span class="line">            result.put(<span class="string">&quot;unionid&quot;</span>,unionid);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;授权获取unionid出现异常&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="工具类及依赖"><a href="#工具类及依赖" class="headerlink" title="工具类及依赖"></a>工具类及依赖</h5><p>AESUtil:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinke.rusi.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.jce.provider.BouncyCastleProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidParameterSpecException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zsc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/07/17</span></span><br><span class="line"><span class="comment"> * AES-128-CBC 加密方式</span></span><br><span class="line"><span class="comment"> * AES-128-CBC可以自己定义“密钥”和“偏移量“。</span></span><br><span class="line"><span class="comment"> * AES-128是jdk自动生成的“密钥”。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 密文，被加密的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> iv 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encodingFormat 解密后的结果需要进行的编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String data, String key, String iv, String encodingFormat)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//被加密的数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] dataByte = Base64.decodeBase64(data);</span><br><span class="line">        <span class="comment">//加密秘钥</span></span><br><span class="line">        <span class="keyword">byte</span>[] keyByte = Base64.decodeBase64(key);</span><br><span class="line">        <span class="comment">//偏移量</span></span><br><span class="line">        <span class="keyword">byte</span>[] ivByte = Base64.decodeBase64(iv);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Cipher cipher = Cipher.getInstance(<span class="string">&quot;AES/CBC/PKCS7Padding&quot;</span>);</span><br><span class="line">            SecretKeySpec spec = <span class="keyword">new</span> SecretKeySpec(keyByte, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">            AlgorithmParameters parameters = AlgorithmParameters.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">            parameters.init(<span class="keyword">new</span> IvParameterSpec(ivByte));</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, spec, parameters);<span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">byte</span>[] resultByte = cipher.doFinal(dataByte);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != resultByte &amp;&amp; resultByte.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String result = <span class="keyword">new</span> String(resultByte, encodingFormat);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidParameterSpecException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidAlgorithmParameterException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>HttpUtil:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinke.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.StatusLine;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpRequestBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(HttpUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> DATA_JSON = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> DATA_FORM = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String JSON_CONTENT_TYPE = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String CHARACTER = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String CONTENT_TYPE_NAME = <span class="string">&quot;Content-Type&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> send(<span class="keyword">new</span> HttpGet(url));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">post</span><span class="params">(String url, Map&lt;String, Object&gt; param, Integer dataType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> post(url, param, dataType, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">post</span><span class="params">(String url, Map&lt;String, Object&gt; param, Integer dataType, Map&lt;String, String&gt; headers)</span> </span>&#123;</span><br><span class="line">        HttpPost post = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">        <span class="keyword">if</span> (dataType == DATA_FORM) &#123;</span><br><span class="line">            Iterator localIterator;</span><br><span class="line">            Map.Entry&lt;String, String&gt; entries;</span><br><span class="line">            <span class="keyword">if</span> (headers != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">for</span> (localIterator = headers.entrySet().iterator(); localIterator.hasNext(); ) &#123;</span><br><span class="line">                    entries = (Map.Entry) localIterator.next();</span><br><span class="line">                    post.setHeader((String) entries.getKey(), (String) entries.getValue());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            Object paramList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : param.entrySet()) &#123;</span><br><span class="line">                ((List) paramList).add(<span class="keyword">new</span> BasicNameValuePair((String) entry.getKey(), entry.getValue().toString()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                post.setEntity(<span class="keyword">new</span> org.apache.http.client.entity.UrlEncodedFormEntity((List) paramList));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                LOGGER.info(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dataType.intValue() == DATA_JSON) &#123;</span><br><span class="line">            post.setHeader(CONTENT_TYPE_NAME, JSON_CONTENT_TYPE);</span><br><span class="line">            post.setEntity(<span class="keyword">new</span> StringEntity(JSON.toJSONString(param), CHARACTER));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> send(post);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">send</span><span class="params">(HttpRequestBase request)</span> </span>&#123;</span><br><span class="line">        CloseableHttpClient client = org.apache.http.impl.client.HttpClients.createDefault();</span><br><span class="line">        String result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CloseableHttpResponse response = client.execute(request);</span><br><span class="line">            HttpEntity entity = response.getEntity();</span><br><span class="line">            StatusLine status = response.getStatusLine();</span><br><span class="line">            <span class="keyword">if</span> (status.getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                result = EntityUtils.toString(entity);</span><br><span class="line">                EntityUtils.consume(entity);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = String.valueOf(status);</span><br><span class="line">            &#125;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;http response ------------&quot;</span> + result);</span><br><span class="line">            response.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOGGER.info(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="AES加密依赖的包"><a href="#AES加密依赖的包" class="headerlink" title="AES加密依赖的包"></a>AES加密依赖的包</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">这里需要注意的是，AES解密的时候需要用到javax.crypto.*包的类，在jdk的 jce.jar中提供，是jdk自带的库。如果是MAVEN项目，则需要在pom.xml文件中配置指定编译路径jce.jar</span><br><span class="line">如果配置路径麻烦，可以选择去maven或者gradle自行下载。</span><br><span class="line"></span><br><span class="line">Maven依赖:</span><br><span class="line"></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.50</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">Gradle依赖：</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on</span></span><br><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">&#x27;org.bouncycastle&#x27;</span>, name: <span class="string">&#x27;bcprov-jdk15on&#x27;</span>, version: <span class="string">&#x27;1.50&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 问题随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础知识</title>
      <link href="2021/05/07/Redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2021/05/07/Redis%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis概念"><a href="#Redis概念" class="headerlink" title="Redis概念"></a>Redis概念</h3><p>Redis是一个使用C语言编写的，开源的高性能非关系型的数据库，键值对形式</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210528094016.png" alt="image-20210528094016455"></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在日常的 Web 应用对数据库的访问中，<strong>读操作的次数远超写操作</strong>，比例大概在 <strong>1:9</strong> 到 <strong>3:7</strong>，所以需要读的可能性是比写的可能大得多的。当我们使用 SQL 语句去数据库进行读写操作时，数据库就会 <strong>去磁盘把对应的数据索引取回来</strong>，这是一个相对较慢的过程。</p><p>如果我们把数据放在 Redis 中，也就是直接放在内存之中，让服务端直接去读取内存中的数据，那么这样 <strong>速度</strong> 明显就会快上不少 *(高性能)*，并且会 <strong>极大减小数据库的压力</strong> *(特别是在高并发情况下)*。</p><p>但是使用内存进行数据存储开销也是比较大的，<strong>限于成本</strong> 的原因，一般我们只是使用 Redis 存储一些 <strong>常用和主要的数据</strong>，比如用户登录的信息等。</p><ol><li>高并发的情况下，MySQL不适合存取数据，效率太低。</li><li>做缓存，比如我们将用户登陆信息存进redis,这样我们可以更加方便的管理用户的权限，将用户信息存进Redis中，每次用户登陆的时候在http请求头Header中携带一个token ,访问其他地址的时候，后端直接用这个token解析用户数据，判断是否有权限访问。</li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><h5 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h5><p>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p><p>常用命令：set、get、decr、incr、mget等。</p><h5 id="字典Hash"><a href="#字典Hash" class="headerlink" title="字典Hash"></a>字典Hash</h5><p>Redis hash 是一个键值(key=&gt;value)对集合；是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p><p>常用命令：hget、hset、hgetall等。</p><p>应用场景：存储一些结构化的数据，比如用户的昵称、年龄、性别、积分等，存储一个用户信息对象数据。</p><p>当然也可以JSON序列号一下存入string</p><h5 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h5><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>list类型经常会被用于消息队列的服务，以完成多程序之间的消息交换。</p><p>常用命令：lpush、rpush、lpop、rpop、lrange等。</p><h5 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h5><p>Redis的Set是string类型的无序集合。和列表一样，在执行插入和删除和判断是否存在某元素时，效率是很高的。集合最大的优势在于可以进行交集并集差集操作</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p>应用场景：</p><p>1、利用交集求共同好友。</p><p>2、利用唯一性，可以统计访问网站的所有独立IP。</p><p>3、好友推荐的时候根据tag求交集，大于某个threshold（临界值的）就可以推荐。</p><p>常用命令：sadd、spop、smembers、sunion等。</p><h5 id="有序集合SortedSet。"><a href="#有序集合SortedSet。" class="headerlink" title="有序集合SortedSet。"></a>有序集合SortedSet。</h5><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset的成员是唯一的,但分数(score)却可以重复。</p><p>sorted set是插入有序的，即自动排序。</p><p>常用命令：zadd、zrange、zrem、zcard等。</p><p>当你需要一个有序的并且不重复的集合列表时，那么可以选择sorted set数据结构。</p><p>应用举例：</p><p>（1）例如存储全班同学的成绩，其集合value可以是同学的学号，而score就可以是成绩。<br>（2）排行榜应用，根据得分列出topN的用户等。</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h5><p><strong>基数统计(Cardinality Counting)</strong> 通常是用来统计一个集合中不重复的元素个数。</p><p>HyperLogLog是一个概率算法。会有一定的误差性。</p><p>一个 <strong>HyperLogLog</strong> 实际占用的空间大约是 <code>12 KB</code>，但 Redis 对于内存的优化非常变态，当 <strong>计数比较小</strong> 的时候，大多数桶的计数值都是 <strong>零</strong>，这个时候 Redis 就会适当节约空间，转换成另外一种 <strong>稀疏存储方式</strong>，与之相对的，正常的存储模式叫做 <strong>密集存储</strong>，这种方式会恒定地占用 <code>12 KB</code>。</p><p><strong>HyperLoglog</strong> 也只需要 <strong>12 K</strong> 内存，在 <strong>标准误差 0.81%</strong> 的前提下，<strong>能够统计 2的64次方 个数据</strong>！</p><p>在大量统计数据的时候可以替代Set，极大极大的压缩了内存占用情况</p><p><strong>HyperLogLog</strong> 提供了两个指令 <code>PFADD</code> 和 <code>PFCOUNT</code>，字面意思就是一个是增加，另一个是获取计数。<code>PFADD</code> 和 <code>set</code> 集合的 <code>SADD</code> 的用法是一样的，来一个用户 ID，就将用户 ID 塞进去就是，<code>PFCOUNT</code> 和 <code>SCARD</code> 的用法是一致的，直接获取计数值</p><blockquote><p>参考：<a href="https://www.wmyskxz.com/2020/03/02/reids-4-shen-qi-de-hyperloglog-jie-jue-tong-ji-wen-ti/">https://www.wmyskxz.com/2020/03/02/reids-4-shen-qi-de-hyperloglog-jie-jue-tong-ji-wen-ti/</a></p></blockquote><h5 id="GeoHash"><a href="#GeoHash" class="headerlink" title="GeoHash"></a>GeoHash</h5><p>这是业界比较通用的，用于 <strong>地理位置距离排序</strong> 的一个算法，<strong>Redis</strong> 也采用了这样的算法。GeoHash 算法将 <strong>二维的经纬度</strong> 数据映射到 <strong>一维</strong> 的整数，这样所有的元素都将在挂载到一条线上，距离靠近的二维坐标映射到一维后的点之间距离也会很接近。当我们想要计算 <strong>「附近的人时」</strong>，首先将目标位置映射到这条线上，然后在这个一维的线上获取附近的点就行了。</p><p>它的核心思想就是把整个地球看成是一个 <strong>二维的平面</strong>，然后把这个平面不断地等分成一个一个小的方格，<strong>每一个</strong> 坐标元素都位于其中的 <strong>唯一一个方格</strong> 中，等分之后的 <strong>方格越小</strong>，那么坐标也就 <strong>越精确</strong></p><p>这个数据类型可以实现一些功能，如附近的人，附近的公司等等操作</p><blockquote><p>参考：<a href="https://www.wmyskxz.com/2020/03/12/redis-6-geohash-cha-zhao-fu-jin-de-ren/">https://www.wmyskxz.com/2020/03/12/redis-6-geohash-cha-zhao-fu-jin-de-ren/</a></p></blockquote><h5 id="Pub-Sub"><a href="#Pub-Sub" class="headerlink" title="Pub/Sub"></a>Pub/Sub</h5><h5 id="BloomFilter"><a href="#BloomFilter" class="headerlink" title="BloomFilter"></a>BloomFilter</h5><p><strong>布隆过滤器（Bloom Filter）</strong> 是 1970 年由布隆提出的。它 <strong>实际上</strong> 是一个很长的二进制向量和一系列随机映射函数 *(下面详细说)*，实际上你也可以把它 <strong>简单理解</strong> 为一个不怎么精确的 <strong>set</strong> 结构，当你使用它的 <code>contains</code> 方法判断某个对象是否存在时，它可能会误判。但是布隆过滤器也不是特别不精确，只要参数设置的合理，它的精确度可以控制的相对足够精确，只会有小小的误判概率。</p><p>当布隆过滤器说某个值存在时，这个值 <strong>可能不存在</strong>；当它说不存在时，那么 <strong>一定不存在</strong>。打个比方，当它说不认识你时，那就是真的不认识，但是当它说认识你的时候，可能是因为你长得像它认识的另外一个朋友 *(脸长得有些相似)*，所以误判认识你。</p><p><strong>布隆过滤器的使用场景</strong></p><p>基于上述的功能，我们大致可以把布隆过滤器用于以下的场景之中：</p><ul><li><strong>大数据判断是否存在</strong>：这就可以实现出上述的去重功能，如果你的服务器内存足够大的话，那么使用 HashMap 可能是一个不错的解决方案，理论上时间复杂度可以达到 O(1 的级别，但是当数据量起来之后，还是只能考虑布隆过滤器。</li><li><strong>解决缓存穿透</strong>：我们经常会把一些热点数据放在 Redis 中当作缓存，例如产品详情。 通常一个请求过来之后我们会先查询缓存，而不用直接读取数据库，这是提升性能最简单也是最普遍的做法，但是 <strong>如果一直请求一个不存在的缓存</strong>，那么此时一定不存在缓存，那就会有 <strong>大量请求直接打到数据库</strong> 上，造成 <strong>缓存穿透</strong>，布隆过滤器也可以用来解决此类问题。</li><li><strong>爬虫/ 邮箱等系统的过滤</strong>：平时不知道你有没有注意到有一些正常的邮件也会被放进垃圾邮件目录中，这就是使用布隆过滤器 <strong>误判</strong> 导致的。</li></ul><blockquote><p>参考：<a href="https://www.wmyskxz.com/2020/03/11/redis-5-yi-ji-shu-ju-guo-lu-he-bu-long-guo-lu-qi/">https://www.wmyskxz.com/2020/03/11/redis-5-yi-ji-shu-ju-guo-lu-he-bu-long-guo-lu-qi/</a></p><p><a href="https://juejin.cn/post/6844903982209449991">https://juejin.cn/post/6844903982209449991</a></p></blockquote><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><h4 id="什么是持久化？"><a href="#什么是持久化？" class="headerlink" title="什么是持久化？"></a>什么是持久化？</h4><p><strong>Redis</strong> 的数据 <strong>全部存储</strong> 在 <strong>内存</strong> 中，如果 <strong>突然宕机</strong>，数据就会全部丢失，因此必须有一套机制来保证 Redis 的数据不会因为故障而丢失，这种机制就是 Redis 的 <strong>持久化机制</strong>，它会将内存中的数据库状态 <strong>保存到磁盘</strong> 中。</p><h4 id="持久化发生了什么"><a href="#持久化发生了什么" class="headerlink" title="持久化发生了什么"></a>持久化发生了什么</h4><p>我们来稍微考虑一下 <strong>Redis</strong> 作为一个 <strong>“内存数据库”</strong> 要做的关于持久化的事情。通常来说，从客户端发起请求开始，到服务器真实地写入磁盘，需要发生如下几件事情：</p><ol><li>客户端向数据库 <strong>发送写命令</strong> <em>(数据在客户端的内存中)</em></li><li>数据库 <strong>接收</strong> 到客户端的 <strong>写请求</strong> <em>(数据在服务器的内存中)</em></li><li>数据库 <strong>调用系统 API</strong> 将数据写入磁盘 <em>(数据在内核缓冲区中)</em></li><li>操作系统将 <strong>写缓冲区</strong> 传输到 <strong>磁盘控控制器</strong> <em>(数据在磁盘缓存中)</em></li><li>操作系统的磁盘控制器将数据 <strong>写入实际的物理媒介</strong> 中 <em>(数据在磁盘中)</em></li></ol><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210528111517.png"></p><h4 id="Redis-中的两种持久化方式"><a href="#Redis-中的两种持久化方式" class="headerlink" title="Redis 中的两种持久化方式"></a>Redis 中的两种持久化方式</h4><h5 id="RDB（快照）"><a href="#RDB（快照）" class="headerlink" title="RDB（快照）"></a>RDB（快照）</h5><p><strong>Redis 快照</strong> 是最简单的 Redis 持久性模式。当满足特定条件时，它将生成数据集的时间点快照，例如，如果先前的快照是在 2 分钟前创建的，并且现在已经至少有 <code>100</code> 次新写入，则将创建一个新的快照。此条件可以由用户配置 Redis 实例来控制，也可以在运行时修改而无需重新启动服务器。快照作为包含整个数据集的单个 <code>.rdb</code> 文件生成。</p><h5 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h5><p><strong>快照不是很持久</strong>。如果运行 Redis 的计算机停止运行，电源线出现故障或者您 <code>kill -9</code> 的实例意外发生，则写入 Redis 的最新数据将丢失。尽管这对于某些应用程序可能不是什么大问题，但有些使用案例具有充分的耐用性，在这些情况下，快照并不是可行的选择。</p><p><strong>AOF(Append Only File - 仅追加文件)</strong> 它的工作方式非常简单：每次执行 <strong>修改内存</strong> 中数据集的写操作时，都会 <strong>记录</strong> 该操作。假设 AOF 日志记录了自 Redis 实例创建以来 <strong>所有的修改性指令序列</strong>，那么就可以通过对一个空的 Redis 实例 <strong>顺序执行所有的指令</strong>，也就是 <strong>「重放」</strong>，来恢复 Redis 当前实例的内存数据结构的状态。</p><h5 id="Redis-4-0-的混合持久化"><a href="#Redis-4-0-的混合持久化" class="headerlink" title="Redis 4.0 的混合持久化"></a>Redis 4.0 的混合持久化</h5><p>重启 Redis 时，我们很少使用 <code>rdb</code> 来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 <code>rdb</code> 来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。</p><p><strong>Redis 4.0</strong> 为了解决这个问题，带来了一个新的持久化选项——<strong>混合持久化</strong>。将 <code>rdb</code> 文件的内容和增量的 AOF 日志文件存在一起。这里的 AOF 日志不再是全量的日志，而是 <strong>自持久化开始到持久化结束</strong> 的这段时间发生的增量 AOF 日志，通常这部分 AOF 日志很小：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210528111946.png"></p><p>于是在 Redis 重启的时候，可以先加载 <code>rdb</code> 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，重启效率因此大幅得到提升。</p><blockquote><p>参考：<a href="https://www.wmyskxz.com/2020/03/13/redis-7-chi-jiu-hua-yi-wen-liao-jie/">https://www.wmyskxz.com/2020/03/13/redis-7-chi-jiu-hua-yi-wen-liao-jie/</a></p></blockquote><h4 id="RDB-和-AOF-各自有什么优缺点？"><a href="#RDB-和-AOF-各自有什么优缺点？" class="headerlink" title="RDB 和 AOF 各自有什么优缺点？"></a>RDB 和 AOF 各自有什么优缺点？</h4><h5 id="RDB-优点"><a href="#RDB-优点" class="headerlink" title="RDB | 优点"></a>RDB | 优点</h5><ol><li>只有一个文件 <code>dump.rdb</code>，<strong>方便持久化</strong>。</li><li><strong>容灾性好</strong>，一个文件可以保存到安全的磁盘。</li><li><strong>性能最大化</strong>，<code>fork</code> 子进程来完成写操作，让主进程继续处理命令，所以使 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 Redis 的高性能</li><li>相对于数据集大时，比 AOF 的 <strong>启动效率</strong> 更高。</li></ol><h5 id="RDB-缺点"><a href="#RDB-缺点" class="headerlink" title="RDB | 缺点"></a>RDB | 缺点</h5><ol><li><strong>数据安全性低</strong>。RDB 是间隔一段时间进行持久化，如果持久化之间 Redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候；</li></ol><h5 id="AOF-优点"><a href="#AOF-优点" class="headerlink" title="AOF | 优点"></a>AOF | 优点</h5><ol><li><strong>数据安全</strong>，aof 持久化可以配置 <code>appendfsync</code> 属性，有 <code>always</code>，每进行一次命令操作就记录到 aof 文件中一次。</li><li>通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。</li><li>AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令 进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）</li></ol><h5 id="AOF-缺点"><a href="#AOF-缺点" class="headerlink" title="AOF | 缺点"></a>AOF | 缺点</h5><ol><li>AOF 文件比 RDB <strong>文件大</strong>，且 <strong>恢复速度慢</strong>。</li><li><strong>数据集大</strong> 的时候，比 rdb <strong>启动效率低</strong>。</li></ol><h4 id="恢复过程"><a href="#恢复过程" class="headerlink" title="恢复过程"></a>恢复过程</h4><p>拷贝 <strong>AOF</strong> 文件到 Redis 的数据目录，启动 redis-server AOF 的数据恢复过程：Redis 虚拟一个客户端，读取 AOF 文件恢复 Redis 命令和参数，然后执行命令从而恢复数据，这些过程主要在 <code>loadAppendOnlyFile()</code> 中实现。</p><p>拷贝 <strong>RDB</strong> 文件到 Redis 的数据目录，启动 redis-server 即可，因为 RDB 文件和重启前保存的是真实数据而不是命令状态和参数。</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="为何需要分布式锁"><a href="#为何需要分布式锁" class="headerlink" title="为何需要分布式锁"></a>为何需要分布式锁</h4><p>一般情况下，我们使用分布式锁主要有两个场景：</p><ol><li><strong>避免不同节点重复相同的工作</strong>：比如用户执行了某个操作有可能不同节点会发送多封邮件；</li><li><strong>避免破坏数据的正确性</strong>：如果两个节点在同一条数据上同时进行操作，可能会造成数据错误或不一致的情况出现；</li></ol><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><strong>基于 Redis 的单线程</strong>：由于 Redis 是单线程，所以命令会以串行的方式执行，并且本身提供了像 <code>SETNX(set if not exists)</code> 这样的指令，本身具有互斥性；</p><h4 id="分布式锁必须满足一下条件"><a href="#分布式锁必须满足一下条件" class="headerlink" title="分布式锁必须满足一下条件"></a>分布式锁必须满足一下条件</h4><ol><li>互斥性。在任意时刻，只有一个客户端能持有锁。</li><li>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li><li>有容错性。只要大部分的Redis节点正常运行，客户端就可以加锁和解锁。</li><li>加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</li></ol><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>加锁就一行代码：</p><p> <code>jedis.set(String key, String value, String nxxx, String expx, int time)</code>这个set()方法一共有五个形参：</p><ul><li><p>第一个为key，我们使用key来当锁，因为key是唯一的。</p></li><li><p>第二个为value，我们传的是requestId，有key作为锁不就够了吗，为什么还要用到value？原因就是我们在上面讲到可靠性时，分布式锁要满足第四个条件，通过给value赋值为requestId，我们就知道这把锁是哪个<strong>请求</strong>加的了，在解锁的时候就可以有依据。requestId可以使用<code>UUID.randomUUID().toString()</code>方法生成。</p></li><li><p>第三个为nxxx，这个参数我们填的是<code>NX</code>，意思是<strong>SET IF NOT EXIST</strong>，即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；</p></li><li><p>第四个为expx，这个参数我们传的是<code>PX</code>，意思是我们要给这个key加一个<strong>过期的设置</strong>，具体时间由第五个参数决定。</p></li><li><p>第五个为time，与第四个参数相呼应，代表key的<strong>过期时间</strong>。</p><p><strong>总的来说，执行上面的set()方法就只会导致两种结果：</strong></p><ol><li>当前没有锁（key不存在），那么就进行加锁操作，并对锁设置个有 效期，同时value表示加锁的客户端。</li><li>已有锁存在，不做任何操作。</li></ol><blockquote><p>我们的加锁代码满足我们可靠性里描述的三个条件。首先，set()加入了NX参数，可以保证如果已有key存在，则函数不会调用成功，也就是只有一个客户端能持有锁，满足<strong>互斥性</strong>。其次，由于我们对锁设置了过期时间，即使锁的持有者后续发生崩溃而没有解锁，锁也会因为到了过期时间而自动解锁（即key被删除），<strong>不会发生死锁</strong>。最后，因为我们将value赋值为requestId，代表加锁的客户端请求标识，那么在客户端在解锁的时候就可以进行校验是否是<strong>同一个客户端</strong></p></blockquote></li></ul><h5 id="正确的加锁方式："><a href="#正确的加锁方式：" class="headerlink" title="正确的加锁方式："></a>正确的加锁方式：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_SUCCESS = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_IF_NOT_EXIST = <span class="string">&quot;NX&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_WITH_EXPIRE_TIME = <span class="string">&quot;PX&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis Redis客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 超期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否获取成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryGetDistributedLock</span><span class="params">(Jedis jedis, String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LOCK_SUCCESS.equals(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="错误的加锁方式："><a href="#错误的加锁方式：" class="headerlink" title="错误的加锁方式："></a>错误的加锁方式：</h5><p>setnx()方法作用就是SET IF NOT EXIST，expire()方法就是给锁加一个过期时间。乍一看好像和前面的set()方法结果一样，然而由于这是两条Redis命令，不具有原子性，如果程序在执行完setnx()之后突然崩溃，导致锁没有设置过期时间。那么将会发生死锁。网上之所以有人这样实现，是因为低版本的jedis并不支持多参数的set()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">wrongGetLock1</span><span class="params">(Jedis jedis, String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Long result = jedis.setnx(lockKey, requestId);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 若在这里程序突然崩溃，则无法设置过期时间，将发生死锁</span></span><br><span class="line">        jedis.expire(lockKey, expireTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="正确解锁方式"><a href="#正确解锁方式" class="headerlink" title="正确解锁方式"></a>正确解锁方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long RELEASE_SUCCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis Redis客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否释放成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">releaseDistributedLock</span><span class="params">(Jedis jedis, String lockKey, String requestId)</span> </span>&#123;</span><br><span class="line"><span class="comment">// LUA脚本</span></span><br><span class="line">        String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) ==   </span></span><br><span class="line"><span class="string">        ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else  </span></span><br><span class="line"><span class="string">        return 0 end&quot;</span>;</span><br><span class="line">            </span><br><span class="line">        Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (RELEASE_SUCCESS.equals(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>第一行代码，我们写了一个简单的Lua脚本代码，上一次见到这个编程第二行代码，我们将Lua代码传到jedis.eval()方法里，并使参数KEYS[1]赋值为lockKey，ARGV[1]赋值为requestId。eval()方法是将Lua代码交给Redis服务端执行。</li><li>那么这段Lua代码的功能是什么呢? <strong>首先获取锁对应的value值，检查是否与requestId相等，如果相等则删除锁（解锁）。那么为什么要使用Lua语言来实现呢？因为要确保上述操作是原子性的。那么为什么执行eval()方法可以确保原子性，源于Redis的特性</strong></li><li>简单来说，就是在eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，并且直到eval命令执行完成，Redis才会执行其他命令。</li></ul><h5 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h5><p>这种解锁代码乍一看也是没问题，与正确姿势差不多，唯一区别的是分成两条命令去执行，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void wrongReleaseLock2(Jedis jedis, String lockKey, String requestId) &#123;</span><br><span class="line">        </span><br><span class="line">    // 判断加锁与解锁是不是同一个客户端</span><br><span class="line">    if (requestId.equals(jedis.get(lockKey))) &#123;</span><br><span class="line">        // 若在此时，这把锁突然不是这个客户端的，则会误解锁</span><br><span class="line">        jedis.del(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题在于如果调用jedis.del()方法的时候，这把锁已经不属于当前客户端的时候会解除他人加的锁。那么是否真的有这种场景？答案是肯定的，比如客户端A加锁，一段时间之后客户端A解锁，在执行jedis.del()之前，锁突然过期了，此时客户端B尝试加锁成功，然后客户端A再执行del()方法，则将客户端B的锁给解除了。</p><h4 id="Redis-分布式锁的问题"><a href="#Redis-分布式锁的问题" class="headerlink" title="Redis 分布式锁的问题"></a>Redis 分布式锁的问题</h4><h5 id="1）锁超时"><a href="#1）锁超时" class="headerlink" title="1）锁超时"></a>1）锁超时</h5><p>假设现在我们有两台平行的服务 A B，其中 A 服务在 <strong>获取锁之后</strong> 由于未知神秘力量突然 <strong>挂了</strong>，那么 B 服务就永远无法获取到锁了：</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210528134034.png" style="zoom: 33%;" /><p>所以我们需要额外设置一个超时时间，来保证服务的可用性。</p><p>但是另一个问题随即而来：<strong>如果在加锁和释放锁之间的逻辑执行得太长，以至于超出了锁的超时限制</strong>，也会出现问题。因为这时候第一个线程持有锁过期了，而临界区的逻辑还没有执行完，与此同时第二个线程就提前拥有了这把锁，导致临界区的代码不能得到严格的串行执行。</p><p>为了避免这个问题，<strong>Redis 分布式锁不要用于较长时间的任务</strong>。如果真的偶尔出现了问题，造成的数据小错乱可能就需要人工的干预。</p><p>有一个稍微安全一点的方案是 <strong>将锁的 <code>value</code> 值设置为一个随机数</strong>，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了 <strong>确保当前线程占有的锁不会被其他线程释放</strong>，除非这个锁是因为过期了而被服务器自动释放的。</p><p>但是匹配 <code>value</code> 和删除 <code>key</code> 在 Redis 中并不是一个原子性的操作，也没有类似保证原子性的指令，所以可能需要使用像 Lua 这样的脚本来处理了，因为 Lua 脚本可以 <strong>保证多个指令的原子性执行</strong>。</p><h5 id="2）单点-多点问题"><a href="#2）单点-多点问题" class="headerlink" title="2）单点/多点问题"></a>2）单点/多点问题</h5><p>如果 Redis 采用单机部署模式，那就意味着当 Redis 故障了，就会导致整个服务不可用。</p><p>而如果采用主从模式部署，我们想象一个这样的场景：<em>服务 A</em> 申请到一把锁之后，如果作为主机的 Redis 宕机了，那么 <em>服务 B</em> 在申请锁的时候就会从从机那里获取到这把锁，为了解决这个问题，Redis 作者提出了一种 <strong>RedLock 红锁</strong> 的算法 *(Redission 同 Jedis)*：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三个 Redis 集群</span></span><br><span class="line">RLock lock1 = redissionInstance1.getLock(<span class="string">&quot;lock1&quot;</span>);</span><br><span class="line">RLock lock2 = redissionInstance2.getLock(<span class="string">&quot;lock2&quot;</span>);</span><br><span class="line">RLock lock3 = redissionInstance3.getLock(<span class="string">&quot;lock3&quot;</span>);</span><br><span class="line"></span><br><span class="line">RedissionRedLock lock = <span class="keyword">new</span> RedissionLock(lock1, lock2, lock2);</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="comment">// do something....</span></span><br><span class="line">lock.unlock();</span><br></pre></td></tr></table></figure><h3 id="缓存雪崩，击穿，穿透"><a href="#缓存雪崩，击穿，穿透" class="headerlink" title="缓存雪崩，击穿，穿透"></a>缓存雪崩，击穿，穿透</h3><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p><strong>产生的原因</strong></p><p>同一时间内，大量Redis中的缓存同时失效。</p><blockquote><p>举个简单的例子：如果所有首页的Key失效时间都是12小时，中午12点刷新的，我零点有个秒杀活动大量用户涌入，假设当时每秒 6000 个请求，本来缓存在可以扛住每秒 5000 个请求，但是缓存当时所有的Key都失效了。此时 1 秒 6000 个请求全部落数据库，数据库必然扛不住。这就是我理解的缓存雪崩。</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210528141025.png" alt="img"></p><p><strong>解决方式</strong></p><p>处理缓存雪崩简单，在批量往<code>Redis</code>存数据的时候，把每个Key的失效时间都加个随机值就好了，这样可以保证数据不会在同一时间大面积失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setRedis（Key，value，time + Math.random() * <span class="number">10000</span>）；</span><br></pre></td></tr></table></figure><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求，我们数据库的 id 都是1开始自增上去的，如发起为id值为 -1 的数据或 id 为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大，严重会击垮数据库。</p><p><strong>像这种你如果不对参数做校验，数据库id都是大于0的，我一直用小于0的参数去请求你，每次都能绕开Redis直接打到数据库，数据库也查不到，每次都这样，并发高点就容易崩掉了。</strong></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210528142222.png" alt="img"></p><p><strong>解决方式</strong></p><ol><li>在接口层增加校验，比如用户鉴权校验，参数做校验，不合法的参数直接代码Return，比如：id 做基础校验，id &lt;=0的直接拦截等</li></ol><blockquote><p><strong>这里我想提的一点就是，我们在开发程序的时候都要有一颗“不信任”的心，就是不要相信任何调用方，比如你提供了API接口出去，你有这几个参数，那我觉得作为被调用方，任何可能的参数情况都应该被考虑到，做校验，因为你不相信调用你的人，你不知道他会传什么参数给你。</strong></p></blockquote><ol start="2"><li><p>从缓存取不到的数据，在数据库中也没有取到，这时也可以将对应Key的Value对写为null、位置错误、稍后重试这样的值具体取啥问产品，或者看具体的场景，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。</p></li><li><p><code> Redis</code>还有一个高级用法<code>布隆过滤器（Bloom Filter）</code>这个也能很好的防止缓存穿透的发生，他的原理也很简单就是利用高效的数据结构和算法快速判断出你这个Key是否在数据库中存在，不存在你return就好了，存在你就去查了DB刷新KV再return。</p></li></ol><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>缓存击穿嘛，这个跟缓存雪崩有点像，但是又有一点不一样，缓存雪崩是因为大面积的缓存失效，打崩了DB，而缓存击穿不同的是缓存击穿是指一个Key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个Key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个完好无损的桶上凿开了一个洞。</p><h5 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h5><p>设置热点数据永远不过期。或者加上互斥锁就能搞定了</p><h3 id="Redis-淘汰策略"><a href="#Redis-淘汰策略" class="headerlink" title="Redis 淘汰策略"></a>Redis 淘汰策略</h3><p><strong>Redis key过期的方式有三种：</strong></p><ul><li>惰性删除：当读/写一个已经过期的key时，会触发惰性删除策略，直接删除掉这个过期key（无法保证冷数据被及时删掉）</li><li>定期删除：Redis会定期主动淘汰一批已过期的key（随机抽取一批key检查）</li><li>内存淘汰机制：当前已用内存超过maxmemory限定时，触发主动清理策略</li></ul><p>如果没有设置有效期，即使内存用完，redis 自动回收机制也是看设置了有效期的，不会动没有设定有效期的，如果清理后内存还是满的，就不再接受写操作。</p><p>redis最大内存不足”时,数据清除策略,默认为”volatile-lru”。</p><table><thead><tr><th><strong>策略</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>volatile-lru</strong></td><td>从已设置过期时间的 KV 集中优先对最近最少使用(less recently used)的数据淘汰（默认）</td></tr><tr><td>volitile-ttl</td><td>从已设置过期时间的 KV 集中优先对剩余时间短(time to live)的数据淘汰</td></tr><tr><td>random</td><td>从已设置过期时间的 KV 集中随机选择数据淘汰</td></tr><tr><td>allkeys-lru</td><td>从已设置过期时间的 KV 集中随机选择数据淘汰</td></tr><tr><td>allKeys-random</td><td>从所有 KV 集中随机选择数据淘汰</td></tr><tr><td>noeviction</td><td>从所有 KV 集中随机选择数据淘汰</td></tr></tbody></table><p><strong>4.0 版本后增加以下两种</strong></p><ul><li>volatile-lfu：从已设置过期时间的数据集(server.db[i].expires)中挑选最不经常使用的数据淘汰</li><li>allkeys-lfu：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key</li></ul><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><h4 id="Redis-为什么早期版本选择单线程？"><a href="#Redis-为什么早期版本选择单线程？" class="headerlink" title="Redis 为什么早期版本选择单线程？"></a>Redis 为什么早期版本选择单线程？</h4><h5 id="官方解释"><a href="#官方解释" class="headerlink" title="官方解释"></a>官方解释</h5><p>因为 Redis 是基于内存的操作，<strong>CPU 不是 Redis 的瓶颈</strong>，Redis 的瓶颈最有可能是 <strong>机器内存的大小</strong> 或者 <strong>网络带宽</strong>。既然单线程容易实现，而且 CPU 不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p><h5 id="简单总结一下"><a href="#简单总结一下" class="headerlink" title="简单总结一下"></a>简单总结一下</h5><ol><li>使用单线程模型能带来更好的 <strong>可维护性</strong>，方便开发和调试；</li><li>使用单线程模型也能 <strong>并发</strong> 的处理客户端的请求；(I/O 多路复用机制)</li><li>Redis 服务中运行的绝大多数操作的 <strong>性能瓶颈都不是 CPU</strong>；</li></ol><h4 id="Redis-为什么这么快？"><a href="#Redis-为什么这么快？" class="headerlink" title="Redis 为什么这么快？"></a>Redis 为什么这么快？</h4><ol><li><strong>纯内存操作</strong>：读取不需要进行磁盘 I/O，所以比传统数据库要快上不少；*(但不要有误区说磁盘就一定慢，例如 Kafka 就是使用磁盘顺序读取但仍然较快)*</li><li><strong>单线程，无锁竞争</strong>：这保证了没有线程的上下文切换，不会因为多线程的一些操作而降低性能；</li><li><strong>多路 I/O 复用模型，非阻塞 I/O</strong>：采用多路 I/O 复用技术可以让单个线程高效的处理多个网络连接请求（尽量减少网络 IO 的时间消耗）；</li><li><strong>高效的数据结构，加上底层做了大量优化</strong>：Redis 对于底层的数据结构和内存占用做了大量的优化，例如不同长度的字符串使用不同的结构体表示，HyperLogLog 的密集型存储结构等等..</li></ol><h4 id="缓存一致性"><a href="#缓存一致性" class="headerlink" title="缓存一致性"></a>缓存一致性</h4><ul><li>读的时候，先读缓存，缓存没有的话，就读数据库，然后取出数据后放入缓存，同时返回响应。</li><li>更新的时候，<strong>先更新数据库，然后再删除缓存</strong>。</li></ul><h4 id="redis的线程模型"><a href="#redis的线程模型" class="headerlink" title="redis的线程模型"></a>redis的线程模型</h4><p><strong>Redis</strong> 内部使用文件事件处理器 <code>file event handler</code>，这个文件事件处理器是单线程的，所以 <strong>Redis</strong> 才叫做单线程的模型。它采用 IO 多路复用机制同时监听多个 <strong>Socket</strong>，根据 <strong>Socket</strong> 上的事件来选择对应的事件处理器进行处理。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lock</title>
      <link href="2021/05/02/Lock/"/>
      <url>2021/05/02/Lock/</url>
      
        <content type="html"><![CDATA[<h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><h4 id="lock锁是什么"><a href="#lock锁是什么" class="headerlink" title="lock锁是什么"></a>lock锁是什么</h4><p>Lock是JDK中的一个接口，两个直接实现类 <strong>ReentrantLock（重入锁）, ReentrantReadWriteLock（读写锁）。</strong></p><p>Lock锁，使用时手动获取锁和释放锁，比synchronized更加灵活；可中断的获取锁；超时获取锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//默认情况下 锁是不公平的; 公平锁(参数true)表示等待时间长优先获取到锁</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br><span class="line">lock.lock(); <span class="comment">// 上锁</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// access the resource protected by this lock</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  lock.unlock(); <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Lock锁的常用API"><a href="#Lock锁的常用API" class="headerlink" title="Lock锁的常用API"></a>Lock锁的常用API</h4><p><code> lock（）</code>     获得锁。</p><p><code> unlock()</code>    释放锁。</p><p><code>tryLock(long time, TimeUnit unit)</code>  尝试获取锁，参数为等待时长，超时将不等待</p><h4 id="Lock和synchronized的简单对比"><a href="#Lock和synchronized的简单对比" class="headerlink" title="Lock和synchronized的简单对比"></a>Lock和synchronized的简单对比</h4><ol><li>synchronized是Java的关键字，在JVM层面；     Lock是一个接口，JDK层面</li><li>synchronized不管代码运行是否异常，都会释放锁；  lock必须在finally中释放锁，不然容易造成死锁</li><li>synchronized没有获取到锁的线程会一直等待 ；   lock可以选择不等待，或者设置等待时间</li><li>synchronized无法判断锁的状态； lock可以通过 tryLock判断锁的状态</li><li>synchronized是非公平锁，不可中断；lock可以选择是否公平，通过lock.lockInterruptibly();中断</li></ol><h4 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><p>可重入锁。如果当前线程t1通过调用lock方法获取了锁之后，再次调用lock，是不会再阻塞去获取锁的，直接增加重入次数就行了。与每次lock对应的是unlock，unlock会减少重入次数，重入次数减为0才会释放锁。</p><blockquote><p>ReentrantLock构造器为一个公平锁或者不公平锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new FairSync() : new NonfairSync()又继承了Sync锁</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sync继承了AQS</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>源码解析：<a href="https://www.cnblogs.com/lixuwu/p/10788297.html">https://www.cnblogs.com/lixuwu/p/10788297.html</a></p></blockquote><h4 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">lock.writeLock().lock(); 写锁</span><br><span class="line">   lock.readLock().lock();  读锁</span><br></pre></td></tr></table></figure><ul><li>可重入读写锁。读写锁维护了一个读锁，一个写锁。</li><li>读锁同一时刻允许多个读线程访问。</li><li>写锁同一时刻只允许一个写线程，其他读/写线程都需要阻塞。</li></ul><h4 id="CopyOnWrite容器"><a href="#CopyOnWrite容器" class="headerlink" title="CopyOnWrite容器"></a>CopyOnWrite容器</h4><p>什么是CopyOnWrite容器</p><p> <strong>CopyOnWrite容器</strong>（简称COW容器）即<strong>写时复制</strong>的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以<strong>CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器</strong>。</p><p> 从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。</p><p><strong>CopyOnWrite并发容器用于读多写少的并发场景</strong>。比如：白名单，黑名单。假如我们有一个搜索网站，用户在这个网站的搜索框中，输入关键字搜索内容，但是某些关键字不允许被搜索。这些不能被搜索的关键字会被放在一个黑名单当中，黑名单一定周期才会更新一次。</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p><strong>内存占用问题。</strong>写的时候会创建新对象添加到新容器里，而旧容器的对象还在使用，所以有两份对象内存。通过压缩容器中的元素的方法来减少大对象的内存消耗，比如，如果元素全是10进制的数字，可以考虑把它压缩成36进制或64进制。或者不使用CopyOnWrite容器，而使用其他的并发容器，如ConcurrentHashMap。</p><p><strong>数据一致性问题。</strong>CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。</p><h3 id="CAS机制"><a href="#CAS机制" class="headerlink" title="CAS机制"></a>CAS机制</h3><p>CAS机制全称compare and swap，翻译为<strong>比较并交换</strong>，是一种有名的<strong>无锁</strong>（lock-free）算法。也是一种现代 CPU 广泛支持的CPU指令级的操作，只有一步原子操作，所以非常快。而且CAS避免了请求操作系统来裁定锁的问题，直接在CPU内部就完成了。</p><p>CAS是乐观锁的一种实现方式，是一种轻量级锁</p><p>Unsafe类是CAS的核心类，提供<strong>硬件级别的原子操作</strong>（目前所有CPU基本都支持硬件级别的CAS操作）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象、对象的地址、预期值、修改值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4, <span class="keyword">int</span> var5)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="CAS-是怎么实现线程安全的？"><a href="#CAS-是怎么实现线程安全的？" class="headerlink" title="CAS 是怎么实现线程安全的？"></a>CAS 是怎么实现线程安全的？</h4><p>执行函数：CAS(V,E,N)</p><p>其包含3个参数</p><ul><li>V表示要更新的变量</li><li>E表示预期值</li><li>N表示新值</li></ul><p>如果V值等于E值，则将V的值设为N。若V值和E值不同，则说明已经有其他线程做了更新，则当前线程什么都不做。通俗的理解就是CAS操作需要我们提供一个期望值，当期望值与当前线程的变量值相同时，说明还没线程修改该值，当前线程可以进行修改，也就是执行CAS操作，但如果期望值与当前线程不符，则说明该值已被其他线程修改，此时不执行更新操作，但可以选择重新读取该变量再尝试再次修改该变量，也可以放弃操作，原理图如下</p><blockquote><p>比如：我们要更新一个字段的值，由A更新到B ,这个时候，我们那A，B去更新，先拿到A的值跟原数据比较，如果数据还是A值，说明没有操作过这个数据，那么修改为B成功，若此时字段的值变成了C，则说明有人操作过，操作失败，重新再执行一次。</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210602154208.png" alt="这里写图片描述"></p><p>由于CAS操作属于乐观派，它总认为自己可以成功完成操作，当多个线程同时使用CAS操作一个变量时，只有一个会胜出，并成功更新，其余均会失败，但失败的线程并不会被挂起，仅是被告知失败，并且允许再次尝试（自旋），当然也允许失败的线程放弃操作，这点从图中也可以看出来。基于这样的原理，CAS操作即使没有锁，同样知道其他线程对共享资源操作影响，并执行相应的处理措施。同时从这点也可以看出，由于无锁操作中没有锁的存在，因此不可能出现死锁的情况，也就是说无锁操作天生免疫死锁。</p><h4 id="CAS产生的问题："><a href="#CAS产生的问题：" class="headerlink" title="CAS产生的问题："></a>CAS产生的问题：</h4><h5 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h5><p>解决方案：加标志位，例如搞个自增的字段，操作一次就自增加一，或者搞个时间戳，比较时间戳的值。</p><p>举个栗子：现在我们去要求操作数据库，根据CAS的原则我们本来只需要查询原本的值就好了，现在我们一同查出他的标志位版本字段vision。</p><p>在atomic包中有一个类：AtomicStampedReference，参数可以设置时间戳</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zsc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/24</span></span><br><span class="line"><span class="comment"> * AtomicStampedReference时间戳解决aba问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABADemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer stamped = <span class="number">1</span>;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">100</span>, <span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="number">110</span>, <span class="string">&quot;小明2&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="number">2000</span>, <span class="string">&quot;小明3&quot;</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="number">3000</span>, <span class="string">&quot;小明4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        AtomicStampedReference&lt;User&gt; reference = <span class="keyword">new</span> AtomicStampedReference&lt;User&gt;(user,stamped);</span><br><span class="line">        System.out.println(reference.getReference());<span class="comment">//获取值</span></span><br><span class="line">        System.out.println(reference.getStamp());<span class="comment">// 获取时间戳</span></span><br><span class="line">        <span class="keyword">boolean</span> b = reference.compareAndSet(user, user2, <span class="number">1</span>,  <span class="number">2</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(reference.getReference());<span class="comment">//获取值</span></span><br><span class="line">        System.out.println(reference.getStamp());<span class="comment">// 获取时间戳</span></span><br><span class="line">        <span class="keyword">boolean</span> c = reference.compareAndSet(user2, user3, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        System.out.println(reference.getReference());<span class="comment">//获取值</span></span><br><span class="line">        System.out.println(reference.getStamp());<span class="comment">// 获取时间戳</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        User user = (User) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(age, user.age) &amp;&amp;</span><br><span class="line">                Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(age, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="自旋时间过长"><a href="#自旋时间过长" class="headerlink" title="自旋时间过长"></a>自旋时间过长</h5><p>使用CAS时非阻塞同步，也就是说不会将线程挂起，会自旋（无非就是一个死循环）进行下一次尝试，如果这里自旋时间过长对性能是很大的消耗。如果JVM能支持处理器提供的pause指令，那么在效率上会有一定的提升。</p><h5 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h5><p>当对一个共享变量执行操作时CAS能保证其原子性，如果对多个共享变量进行操作，CAS就不能保证其原子性。有一个解决方案是利用对象整合多个共享变量，即一个类中的成员变量就是这几个共享变量。然后将这个对象做CAS操作就可以保证其原子性。atomic中提供了AtomicReference来保证引用对象之间的原子性。</p><h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><p>AbstractQueuedSynchronizer抽象队列同步器简称AQS，它是实现同步器的基础组件（框架），juc下面Lock的实现以及一些并发工具类（Semaphore、CountDownLatch、CyclicBarrier等）就是通过AQS来实现的。具体用法是通过继承AQS实现其模板方法，然后将子类作为同步组件的内部类。</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210602154213.png" alt="img" style="zoom: 67%;" /><h4 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h4><p>AQS的核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并将共享资源设置为锁定状态，如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用<strong>CLH队列</strong>锁实现的，即将暂时获取不到锁的线程加入到队列中。<br>CLH（Craig，Landin，and Hagersten）队列是一个虚拟的双向队列，虚拟的双向队列即不存在队列实例，<strong>仅存在节点之间</strong>的关联关系。<br><strong>AQS是将每一条请求共享资源的线程封装成一个CLH锁队列的一个结点（Node），来实现锁的分配。</strong></p><p>用大白话来说，AQS就是基于CLH队列，用volatile修饰共享变量state，线程通过CAS去改变状态符，成功则获取锁成功，失败则进入等待队列，等待被唤醒。</p><h4 id="AQS-定义了两种资源共享方式："><a href="#AQS-定义了两种资源共享方式：" class="headerlink" title="AQS 定义了两种资源共享方式："></a>AQS 定义了两种资源共享方式：</h4><p>1.<strong>Exclusive</strong>：独占，只有一个线程能执行，如ReentrantLock<br>2.<strong>Share</strong>：共享，多个线程可以同时执行，如Semaphore、CountDownLatch、ReadWriteLock，CyclicBarrier</p><blockquote><p>类似于Synchronized争抢监视器monitor </p><p>这里AQS队列中的线程争抢资源state</p></blockquote><blockquote><p>AQS详解：<a href="https://blog.csdn.net/javazejian/article/details/75043422">https://blog.csdn.net/javazejian/article/details/75043422</a></p></blockquote><p>乐观锁：CAS</p><p>自旋锁：do while(!CAS)</p><p>悲观锁：AQS底层 + volatile state  ReentrantLock</p><h3 id="阻塞队列（BlockingQueue）"><a href="#阻塞队列（BlockingQueue）" class="headerlink" title="阻塞队列（BlockingQueue）"></a>阻塞队列（BlockingQueue）</h3><h4 id="什么是BlockingQueue"><a href="#什么是BlockingQueue" class="headerlink" title="什么是BlockingQueue"></a>什么是BlockingQueue</h4><p>在多线程领域：所谓<strong>阻塞</strong>，在某些情况下会<strong>挂起线程</strong>（即阻塞），一旦条件满足，被挂起的线程又会自动被唤起</p><p>BlockingQueue即阻塞队列，是java.util.concurrent下的一个接口，因此不难理解，BlockingQueue是为了解决多线程中数据高效安全传输而提出的。从阻塞这个词可以看出，在某些情况下对阻塞队列的访问可能会造成阻塞。被阻塞的情况主要有如下两种：</p><p><strong>当队列满了的时候进行入队列操作</strong></p><p><strong>当队列空了的时候进行出队列操作</strong></p><p>因此，当一个线程试图对一个已经满了的队列进行入队列操作时，它将会被阻塞，除非有另一个线程做了出队列操作；同样，当一个线程试图对一个空队列进行出队列操作时，它将会被阻塞，除非有另一个线程进行了入队列操作。</p><p><strong>阻塞队列主要用在生产者/消费者的场景</strong>，下面这幅图展示了一个线程生产、一个线程消费的场景：</p><p>​                      <img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524134234.png" alt="image-20210524134234721"></p><p><strong>为什么需要BlockingQueue</strong> 好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切BlockingQueue都给你一手包办了。在concurrent包发布以前，在多线程环境下，我们每个程序员都必须去自己控制这些细节，尤其还要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂度。</p><h4 id="认识BlockingQueue"><a href="#认识BlockingQueue" class="headerlink" title="认识BlockingQueue"></a>认识BlockingQueue</h4><p>java.util.concurrent 包里的 BlockingQueue是一个接口，继承Queue接口，Queue接口继承 Collection。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524134414.png" alt="image-20210524134414512">  </p><h4 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h4><ul><li>BlockingQueue接口主要有以下7个实现类：</li><li>ArrayBlockingQueue：由数组结构组成的有界阻塞队列。</li><li>LinkedBlockingQueue：由链表结构组成的有界（但大小默认值为integer.MAX_VALUE）阻塞队列。</li><li>PriorityBlockingQueue：支持优先级排序的无界阻塞队列。</li><li>DelayQueue：使用优先级队列实现的延迟无界阻塞队列。</li><li>SynchronousQueue：不存储元素的阻塞队列，也即单个元素的队列。</li><li>LinkedTransferQueue：由链表组成的无界阻塞队列。</li><li>LinkedBlockingDeque：由链表组成的双向阻塞队列。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GC机制(一)</title>
      <link href="2021/04/30/GC%E6%9C%BA%E5%88%B6-%E4%B8%80/"/>
      <url>2021/04/30/GC%E6%9C%BA%E5%88%B6-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="对象怎么什么时候被回收？"><a href="#对象怎么什么时候被回收？" class="headerlink" title="对象怎么什么时候被回收？"></a>对象怎么什么时候被回收？</h3><p>JVM判断对象回收有两种方式：</p><h4 id="引用记数"><a href="#引用记数" class="headerlink" title="引用记数"></a>引用记数</h4><p><strong>引用记数比较简单，JVM为每个对象维护一个引用计数，假设A对象引用计数为零说明没有任务对象引用A对象，那A对象就可以被回收了，但是引用计数有个缺点就是无法解决</strong>循环引用**的问题。</p><blockquote><p>循环引用就是两个孤零零的对象互相引用，a对象引用b,b对象引用a ，他们的引用计数都不为零，故此处陷入死循环</p></blockquote><h4 id="GC-Roots-标记"><a href="#GC-Roots-标记" class="headerlink" title="GC Roots(标记)"></a>GC Roots(标记)</h4><p>可达性分析算法，也叫标记</p><p>GC Roots通过一系列的名为<strong>GC Roots</strong>的对象作为起始点，从这些节点开始<strong>向下</strong>搜索，搜索过的路径称为引用链，<strong>当一个对象到GC Roots没有任何引用链相连时</strong>，则证明对象是不可用的。</p><blockquote><p>标记的过程其实就是，从根对象开始遍历所有的对象，然后将所有存活的对象标记为可达的对象。</p></blockquote><p>在Java中，可以作为GC Roots的对象包括下面几种：</p><ol><li><strong>虚拟机栈中引用的对象</strong>（正在运行的方法使用到的变量、参数等）</li><li><strong>方法区中类静态属性引用的对象</strong>（static关键字声明的字段）</li><li><strong>方法区中常量引用的对象</strong>，(也就是final关键字声明的字段)</li><li><strong>本地方法栈中引用的对象</strong>（native方法）</li><li><strong>Java虚拟机内部的引用。</strong>（系统内部的东西当然能作为根了）</li></ol><p><strong>例如：</strong></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524141415.webp"></p><blockquote><p>GC Roots算法是从离散数学中的图论引入的，程序把所有的引用关系看作一张图，从一个节点 <code>GC ROOT</code> 开始，寻找对应的引用节点，找到这个节点以后，继续寻找这个节点的引用节点，当所有的引用节点寻找完毕之后，剩余的节点则被认为是没有被引用到的节点，即无用的节点。<br>如上图中的 <code>ObjF</code>、<code>ObjD</code>、<code>ObjE</code>通过 <code>GC Root</code> 是无法找到的，所以它们是无用节点。</p></blockquote><p><strong>总的来说就是当一个对象通过GC Roots搜索不到时，说明对象可以被回收了</strong></p><h3 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h3><blockquote><p>四大基本算法：引用计数法，标记清除法，标记整理法，复制算法</p><p>分带算法，分区算法</p></blockquote><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>引用计数算法很简单，它实际上是通过在对象头中分配一个空间来保存该对象被引用的次数。如果该对象被其它对象引用，则它的引用计数加一，如果删除对该对象的引用，那么它的引用计数就减一，当该对象的引用计数为0时，那么该对象就会被回收。</p><p>有代码如下:</p><p>String p = <strong>new</strong> String(“abc”);</p><p>abc这个字符串对象的引用计数值为1.</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524143224.png" alt="image-20210524143224480" style="zoom:50%;" /><p>将引用变量p的值设置为0</p><p>p = <strong>null</strong>;</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524143310.png" alt="image-20210524143310621" style="zoom: 67%;" /><p>引用计数垃圾收集机制，它只是在引用计数变化为0时即刻发生，而且只针对某一个对象以及它所依赖的其它对象。所以，我们一般也称呼引用计数垃圾收集为<strong>直接</strong>的垃圾收集机制.垃圾收集的开销被分摊到整个应用程序的运行当中了，而不是在进行垃圾收集时，要挂起整个应用的运行，直到对堆中所有对象的处理都结束。因此，采用引用计数的垃圾收集不属于严格意义上的”Stop-The-World”的垃圾收集机制。</p><p><strong>优点</strong>:</p><p> 实时性较高, 不需要等到内存不够时才回收</p><p> 垃圾回收时不用挂起整个程序, 不影响程序正常运行.</p><p><strong>缺点</strong>:</p><p> 回收时不移动对象, 所以会造成内存碎片问题.</p><p>解决不了对象相互引用</p><h4 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h4><p>它的做法是当堆中的有效内存空间被耗尽的时候，就会停止整个程序（也被成为stop the world），然后进行两项工作，第一项则是标记，第二项则是清除。<br>标记：从根集合（GC Root)开始扫描，每到达一个对象就会标记该对象为存活状态，</p><p>清除：过程将遍历堆中所有的对象，将没有标记的对象全部清除掉。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524141421.jpeg"></p><p><strong>优点 : 实现简单</strong></p><p><strong>缺点 :</strong> </p><p> 效率低, 因为标记和清除两个动作都要遍历所有的对象</p><p> 垃圾收集后有可能会造成大量的内存碎片, 垃圾回收时会造成<strong>应用程序暂停</strong>.</p><h4 id="标记整理"><a href="#标记整理" class="headerlink" title="标记整理"></a>标记整理</h4><p>既然叫标记-整理算法，那么它也分为<strong>两个阶段，一个是标记(mark)，一个是整理(compact).</strong> </p><p>标记 : 标记的过程其实就是，从根对象开始遍历所有的对象，然后将所有存活的对象标记为可达的对象。</p><p>压缩 : 移动所有的可达对象到堆内存的同一个区域中，使他们紧凑的排列在一起，从而将所有非可达对象释放出来的空闲内存都集中在一起，通过这样的方式来达到减少内存碎片的目的。</p><p>标记整理就没有内存碎片的问题了，也是从根集合（GC Root)开始扫描进行标记然后清除无用的对象，清除完成后它会整理内存。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524141425.jpeg"></p><p><strong>优点 : 标记压缩算法是对标记清除算法的优化, 解决了碎片化的问题</strong></p><p><strong>缺点 : 还是效率问题, 在标记清除算法上又多加了一步, 效率可想而知会更慢</strong></p><h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><p>复制算法的核心就是，<strong>将原有的内存空间一分为二</strong>，每次只用其中的一块，在垃圾回收时，将正在使用的对象复制到另一个内存空间中，并以此排列, 然后将该内存空间清空，交换两个内存的角色，完成垃圾的回收。</p><blockquote><p>复制算法会将JVM堆分成二等分，如果堆设置的是1g，那使用复制算法的时候堆就会有被划分为两块区域各512m。给对象分配内存的时候总是使用其中的一块来分配，分配满了以后，GC就会进行标记，然后将存活的对象移动到另外一块空白的区域，然后清除掉所有没有存活的对象，这样重复的处理，始终就会有一块空白的区域没有被合理的利用到。</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524141428.jpeg"></p><p><strong>优点:</strong></p><p> 在垃圾多的情况下(新生代), 效率较高</p><p> 清理后, 内存无碎片</p><p><strong>缺点:</strong></p><p> 浪费了一半的内存空间</p><p> 在存活对象较多的情况下(老年代), 效率较差</p><h4 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><p>分代收集算法是目前大部分 <code>JVM</code> 的垃圾收集器采用的算法。<br> 核心思想是根据对象存活的生命周期将内存划分为若干个不同的区域。一般情况下将堆区划分为老年代（<code>Old Generation</code>）和新生代（<code>Young Generation</code>），老年代的特点是每次垃圾收集时只有少量对象需要被回收，而新生代的特点是每次垃圾回收时都有大量的对象需要被回收，那么就可以根据不同代的特点采取最适合的收集算法。</p><blockquote><p>分代算法其实就是这样的，根据回收对象的特点进行选择，在jvm中，</p><p>• 新生代适合使用复制算法，</p><p>• 老年代适合使用标记整理算法</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524141433.png"></p><h5 id="区域划分："><a href="#区域划分：" class="headerlink" title="区域划分："></a>区域划分：</h5><p>新生代占1/3   老年代占2/3</p><h6 id="年轻代"><a href="#年轻代" class="headerlink" title="年轻代:"></a>年轻代:</h6><ol><li><p>所有新生成的对象首先都是放在年轻代的。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。</p></li><li><p>新生代内存按照8:1:1的比例分为一个 <code>eden</code> 区和两个 <code>survivor(幸存区)</code> 区（from survivor，to survivor）。大部分对象在 <code>Eden</code> 区中生成。回收时先将 <code>eden</code> 区存活对象复制到<code>from </code>区，然后清空 <code>eden</code> 区，当这个 <code>from</code> 区也存放满了时，则将 <code>eden</code> 区和 <code>from</code> 区存活对象复制到另一个 <code>to</code> 区，然后清空 <code>eden</code> 和这个 <code>from</code> 区，此时 <code>from</code> 区是空的，然后将 <code>from</code> 区和 <code>to</code> 区交换，即保持 <code>to</code> 区为空， 如此往复。</p><blockquote><h5 id="新生代这样划分是为了更好的管理堆内存中的对象，方便GC算法—复制算法来进行垃圾回收。"><a href="#新生代这样划分是为了更好的管理堆内存中的对象，方便GC算法—复制算法来进行垃圾回收。" class="headerlink" title="新生代这样划分是为了更好的管理堆内存中的对象，方便GC算法—复制算法来进行垃圾回收。"></a>新生代这样划分是为了更好的管理堆内存中的对象，方便GC算法—复制算法来进行垃圾回收。</h5><h5 id="JVM每次只会使用eden和其中一块survivor来为对象服务，所以无论什么时候，都会有一块survivor空间，因此新生代实际可用空间只有90-。"><a href="#JVM每次只会使用eden和其中一块survivor来为对象服务，所以无论什么时候，都会有一块survivor空间，因此新生代实际可用空间只有90-。" class="headerlink" title="JVM每次只会使用eden和其中一块survivor来为对象服务，所以无论什么时候，都会有一块survivor空间，因此新生代实际可用空间只有90%。"></a>JVM每次只会使用eden和其中一块survivor来为对象服务，所以无论什么时候，都会有一块survivor空间，因此新生代实际可用空间只有90%。</h5></blockquote></li><li><p>当 <code>to</code>区不足以存放 <code>eden</code> 和 <code>from</code> 的存活对象时，就将存活对象直接存放到老年代。若是老年代也满了就会触发一次 <code>Full GC</code> ，也就是新生代、老年代都进行回收。</p></li><li><p>新生代发生的 <code>GC</code> 也叫做 <code>Minor GC</code> ，<code>Minor GC</code> 发生频率比较高(不一定等 <code>Eden</code> 区满了才触发)，也叫小GC，每一次Full GC都会产生小GC </p></li></ol><h6 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h6><ol><li><p>在年轻代中经历了 <code>N</code> 次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。</p></li><li><p>内存比新生代也大很多(大概比例是1:2)，当老年代内存满时触发 <code>Major GC</code> 即 <code>Full GC</code>，<code>Full GC</code> 发生频率比较低，老年代对象存活时间比较长，存活率标记高。</p></li></ol><h6 id="什么时候对象会进入老年代？"><a href="#什么时候对象会进入老年代？" class="headerlink" title="什么时候对象会进入老年代？"></a>什么时候对象会进入老年代？</h6><blockquote><p><strong>1. 根据对象年龄</strong></p><p>JVM会给对象增加一个年龄（age）的计数器，对象每“熬过”一次GC，年龄就要+1，待对象到达设置的阈值（默认为15岁）就会被移移动到老年代，可通过-XX:MaxTenuringThreshold调整这个阈值。</p><p>即 一次Minor GC后，对象年龄就会+1，达到阈值的对象就移动到老年代，其他存活下来的对象会继续保留在新生代中。</p></blockquote><blockquote><p><strong>2. 动态年龄判断</strong></p><p>根据对象年龄有另外一个策略也会让对象进入老年代，不用等待15次GC之后进入老年代，他的大致规则就是，假如当前放对象的Survivor，一批对象的总大小大于这块Survivor内存的50%，那么大于这批对象年龄的对象，就可以直接进入老年代了。</p><p>现有A（age=2）、B(age=2)、D(age=10)、E(age=11)这四个对象，假如from区是100m，如果A + B + D的内存大小超过50m，现在D的年龄是10，那E都会被移动到老年代。实际上这个计算逻辑是这样的：年龄1 + 年龄2 + 年龄n的多个对象总和超过Survivor区的50%，那就会把年龄n以上的对象都放入老年代。</p></blockquote><blockquote><p><strong>3. 大对象直接进入老年代</strong></p><p>如果设置了<code>-XX:PretenureSizeThreshold</code>这个参数，那么如果你要创建的对象大于这个参数的值，比如分配一个超大的字节数组，此时就直接把这个大对象放入到老年代，不会经过新生代。</p><p>这么做就可以避免大对象在新生代，屡次躲过GC，还得把他们来复制来复制去的，最后才进入老年代，这么大的对象来回复制，是很耗费时间的。</p></blockquote><h6 id="GC-类型："><a href="#GC-类型：" class="headerlink" title="GC 类型："></a>GC 类型：</h6><blockquote><ol><li><strong>Minor GC(新生代 GC):</strong><br>新生代 <code>GC</code>，指发生在新生代的垃圾收集动作，因为 <code>Java</code> 对象大多都具备朝生熄灭的特点，所以 <code>Minor GC</code> 十分频繁，回收速度也较快。</li><li><strong>Major GC(老年代 GC):</strong><br>老年代 <code>GC</code>，指发生在老年代的垃圾收集动作，当出现 <code>Major GC</code> 时，一般也会伴有至少一次的 <code>Minor GC</code>（并非绝对，例如 <code>Parallel Scavenge</code> 收集器会单独直接触发 <code>Major GC</code> 的机制）。 <code>Major GC</code> 的速度一般会比 <code>Minor GC</code> 慢十倍以上。</li><li><strong>Full GC:</strong><br>清理整个堆空间—包括年轻代和老年代。<code>Major GC == Full GC</code>。</li></ol></blockquote><h6 id="产生-Full-GC-可能的原因："><a href="#产生-Full-GC-可能的原因：" class="headerlink" title="产生 Full GC 可能的原因："></a>产生 Full GC 可能的原因：</h6><blockquote><ol><li>年老代被写满。</li><li><code>System.gc()</code> 被显示调用。</li><li>上一次 GC 之后 Heap（堆） 的各域分配策略动态变化。</li></ol></blockquote><h4 id="分区收集算法"><a href="#分区收集算法" class="headerlink" title="分区收集算法"></a>分区收集算法</h4><p>上面介绍的分代收集算法是将对象的生命周期按长短划分为两个部分, 而分区算法则将整个堆空间划分为连续的不同小区间, 每个小区间独立使用, 独立回收. 这样做的好处是可以<strong>控制一次回收多少个小区间</strong>. 在相同条件下, 堆空间越大, 一次GC耗时就越长, 从而产生的停顿也越长. 为了更好地控制GC产生的停顿时间, 将一块大的内存区域分割为多个小块, 根据目标停顿时间, 每次合理地回收若干个小区间(而不是整个堆), 从而减少一次GC所产生的停顿.</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524145507.png" alt="image-20210524145507401"></p><h3 id="垃圾回收器的分类"><a href="#垃圾回收器的分类" class="headerlink" title="垃圾回收器的分类"></a>垃圾回收器的分类</h3><h4 id="串行垃圾回收器"><a href="#串行垃圾回收器" class="headerlink" title="串行垃圾回收器"></a>串行垃圾回收器</h4><p><strong>Serial 收集器</strong></p><p>新生代串行回收器SerialGC : 采用复制算法实现, 单线程垃圾回收, 独占式垃圾回收器</p><p>老年代串行回收器SerialOldGC : 采用标记压缩算法, 单线程独占式垃圾回收器</p><h4 id="并行垃圾回收器"><a href="#并行垃圾回收器" class="headerlink" title="并行垃圾回收器"></a>并行垃圾回收器</h4><p><strong>Parallel收集器</strong></p><p>新生代Parallel ScavengeGC回收器: 采用复制算法多线程独占式回收器</p><p>老年代Parallel OldGC回收器: 采用标记压缩算法, 多线程独占式回收器</p><blockquote><blockquote><p> 我的本机使用jconsole，查看是PS MarkSweep  JDK版本为：jdk1.8.0_91</p></blockquote></blockquote><h4 id="CMS回收器"><a href="#CMS回收器" class="headerlink" title="CMS回收器"></a>CMS回收器</h4><p>CMS全称 (Concurrent Mark Sweep)，是一款并发的、使用标记-清除算法的垃圾回收器.</p><p><strong>启用CMS回收器参数 :</strong> -XX:+UseConcMarkSweepGC。</p><p><strong>使用场景：</strong>GC过程短暂停，适合对时延要求较高的服务，用户线程不允许长时间的停顿。</p><p><strong>优点</strong>: CMS收集器是一种以获取最短回收停顿时间为目标的收集器.  并发收集，低停顿 </p><p><strong>缺点：</strong>服务长时间运行，造成严重的内存碎片化。算法实现比较复杂；CMS收集器对CPU资源非常敏感 </p><h4 id="G1回收器"><a href="#G1回收器" class="headerlink" title="G1回收器"></a>G1回收器</h4><p> <strong>G1(Garbage-First)是一款面向服务端应用的并发垃圾回收器, 主要目标用于配备多颗CPU的服务器治理大内存. 是 JDK1.7 提供的一个新收集器，是当今收集器技术发展的最前沿成果之一</strong></p><p>G1计划作为并发标记-清除收集器的长期替代品</p><p>启用G1收集器参数: -XX:+UseG1GC 启用G1收集器.</p><p>G1将整个Java堆划分为多个大小相等的独立区域(Region), 虽然还保留有新生代和老年代的概念, 但新生代和老年代不再是物理隔离的了, 它们都是一部分Region(不需要连续)的集合.</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524152412.png" alt="image-20210524152412119"></p><p>每块区域既有可能属于Old区、也有可能是Young区, 因此不需要一次就对整个老年代/新生代回收. 而是<strong>当线程并发寻找可回收的对象时, 有些区块包含可回收的对象要比其他区块多很多. 虽然在清理这些区块时G1仍然需要暂停应用线程, 但可以用相对较少的时间优先回收垃圾较多的Region</strong>(这也是G1命名的来源). 这种方式保证了G1可以在有限的时间内获取尽可能高的收集效率.</p><h3 id="JDK8的垃圾回收器"><a href="#JDK8的垃圾回收器" class="headerlink" title="JDK8的垃圾回收器"></a>JDK8的垃圾回收器</h3><p>我们通过查看Java参数的方式查询到默认的垃圾回收器为<strong>ParallelGC</strong> </p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524151526.png" alt="image-20210524151526829" style="zoom:67%;" /><p>引用《深入理解Java虚拟机：JVM高级特性与最佳实践》的介绍：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524151619.png"></p><p>UseParallelGC =  Parallel Scavenge + PS MarkSweep。 PS MarkSweep和Serial Old很像，一般书上会把他们当做一个去讲解。</p><blockquote><p>这个PS MarkSweep默认的实现实际上是一层皮，它底下真正做mark-sweep-compact工作的代码是跟分代式GC框架里的serial old（这个collector名字叫做MarkSweepCompact）是共用同一份代码的。也就是说实际上PS MarkSweep与MarkSweepCompact在HotSpot VM里是同一个collector实现，包了两张不同的皮；这个collector是串行的。 </p></blockquote><p> 其实也可以通过jconsole工具直接看到使用的垃圾收集器</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524152021.png" style="zoom: 67%;" /><p>设置参数如下：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210524141438.jpeg"></p><p><img src="https://img-blog.csdnimg.cn/20210524141752464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MTYxNjk1,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p>​                                                                                                                                                                                                    </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存结构</title>
      <link href="2021/04/29/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
      <url>2021/04/29/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文都是基于JDK1.8讨论</p></blockquote><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><h4 id="什么是类加载器"><a href="#什么是类加载器" class="headerlink" title="什么是类加载器"></a>什么是类加载器</h4><p>Java中的所有类，都需要由<strong>类加载器</strong>装载到JVM中才能运行。类加载器本身也是一个类，而它的工作就是把class文件从硬盘读取到内存中。在写程序的时候，我们几乎不需要关心类的加载，因为这些都是<strong>隐式</strong>装载的，除非我们有特殊的用法，像是反射，就需要显式的加载所需要的类。</p><p>Java类的加载是<strong>动态</strong>的，它并不会一次性将所有类全部加载后再运行，而是保证程序运行的基础类(像是基类)完全加载到jvm中，至于其他类，则在需要的时候才加载。这当然就是为了节省内存开销。</p><h4 id="类加载类型"><a href="#类加载类型" class="headerlink" title="类加载类型"></a>类加载类型</h4><p>Java的类加载器有三个，对应Java的三种类:</p><h5 id="Bootstrap-Loader-启动类加载器"><a href="#Bootstrap-Loader-启动类加载器" class="headerlink" title="Bootstrap Loader(启动类加载器)"></a>Bootstrap Loader(启动类加载器)</h5><p>由C++写的,由JVM启动</p><p>启动类加载器，也叫引导加载器。是虚拟机自身的一部分。负责将存放在\lib目录中的类库加载到虚拟机中。其无法被Java程序直接引用。 负责加载系统类 (指的是内置类 像是String)</p><h5 id="ExtClassLoader-扩展加载器"><a href="#ExtClassLoader-扩展加载器" class="headerlink" title="ExtClassLoader(扩展加载器)"></a>ExtClassLoader(扩展加载器)</h5><p>是一个Java类,继承自URLClassLoader 扩展类加载器,  </p><p>负责加载扩展类(如所有javax.*开头的类和存放在%JAVA_HOME%\lib\ext目录中的jar和class等</p><h5 id="AppClassLoader-应用加载器"><a href="#AppClassLoader-应用加载器" class="headerlink" title="AppClassLoader(应用加载器)"></a>AppClassLoader(应用加载器)</h5><p>Java类,继承自URLClassLoader 系统类加载器,</p><p>负责加载用户类路径（ClassPath）上所指定的类库(程序员自定义的类)    </p><h5 id="自定义加载器"><a href="#自定义加载器" class="headerlink" title="自定义加载器"></a>自定义加载器</h5><p>这个由程序员自己来写</p><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p>三个加载器各自完成自己的工作，但它们是如何协调工作呢？哪一个类该由哪个类加载器完成呢？为了解决这个问题，Java采用了<strong>委托模型</strong>机制。(双亲委派模式)</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>当某个类加载器需要加载某个.class文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类</p><h4 id="双亲委派机制的作用"><a href="#双亲委派机制的作用" class="headerlink" title="双亲委派机制的作用"></a>双亲委派机制的作用</h4><ol><li><p>防止重复加载同一个.class。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。</p></li><li><p>保证核心.class不能被篡改。通过委托方式，不会去篡改核心.class，即使篡改也不会去加载，即使加载也不会是同一个.class对象了。不同的加载器加载同一个.class也不是同一个Class对象。这样保证了Class执行安全</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210522191822.png"></p><p>我们可以通过这样的代码来获取类加载器:</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader loader = ClassName.class.getClassLoader();</span><br><span class="line">ClassLoader ParentLoader = loader.getParent();</span><br></pre></td></tr></table></figure><p>注意一个很重要的问题，就是Java在逻辑上并不存在BootstrapKLoader的实体！因为它是用C++编写的，所以打印其内容将会得到null。</p><h4 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h4><p>前面是对类加载器的简单介绍，它的原理机制非常简单，就是下面几个步骤:</p><ol><li><p>装载:查找和导入class文件;</p></li><li><p>连接:</p><ol><li>检查:检查载入的class文件数据的正确性;</li><li>准备:为类的<strong>静态变量</strong>分配存储空间;</li><li>解析:将符号引用转换成直接引用(这一步是可选的)</li></ol></li><li><p>初始化:初始化静态变量，静态代码块</p></li><li><p>使用：代码中根据Class类型new对象或执行其它操作。</p></li><li><p>卸载：虚拟机通过垃圾回收将类信息及相关的实例数据从虚拟机内存区域中移除。</p></li></ol><h3 id="JVM中的内存结构"><a href="#JVM中的内存结构" class="headerlink" title="JVM中的内存结构"></a>JVM中的内存结构</h3><p>JVM内存结构可以大致可划分为<strong>线程私有区域</strong>和<strong>共享区域</strong>，线程私有区域由虚拟机栈、本地方法栈、程序计数器组成，而共享区域由堆、元数据空间（方法区）组成。</p><blockquote><p>ps：在JDK1.8中，Sun HotSpot虚拟机把虚拟机栈和本地方法栈合并为 Java栈</p><p>方法区是jdk1.7之前的叫法，在1.8中叫做元空间</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210522191909.png"></p><h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a><strong>虚拟机栈</strong></h4><p>虚拟机栈是用于描述java<strong>方法执行</strong>的内存模型。</p><p>　<strong>作用</strong>：每个java方法在执行时，会创建一个“<strong>栈帧</strong>（stack frame）”，栈帧的结构分为“局部变量表、操作数栈、动态链接、方法出口”几个部分。我们常说的“堆内存、栈内存”中的“<strong>栈内存”</strong>指的便是虚拟机栈，确切地说，指的是虚拟机栈的栈帧中的<strong>局部变量表</strong>，因为这里存放了一个方法的所有局部变量。</p><p><strong>栈中放置以下内容：</strong>栈中存放基本类型的原值和引用类型的地址值.</p><p>基本类型包括：byte,short,int,long,char,float,double,Boolean,returnAddress ；引用类型包括：类类型，接口类型和数组。</p><p>方法调用时，创建栈帧，并<strong>压入虚拟机栈</strong>；方法执行完毕，栈帧出栈并被销毁，如下图所示：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210522191919.png"></p><p>局部变量表 : 保存函数参数,局部变量(当前函数有效,函数执行结束它销毁)</p><p>操作数栈 : 存中间运算结果, 临时存储空间</p><p>帧数据区 : 保存访问常量池指针, 异常处理表</p><p><strong>虚拟机栈是线程隔离的，即每个线程都有自己独立的虚拟机栈。</strong></p><p><strong>若单个线程请求的栈深度大于虚拟机允许的深度，则会抛出StackOverflowError（栈溢出错误）。</strong></p><p>举个粟子：如下图 ，假设JVM参数-Xss设置为1m，如果某个方法里面创建一个128kb的数组，那这个方法在同一个线程中只能递归4次，再递归第五次的时候就会报StackOverflowException异常，因为虚拟机栈的大小只有1m，每次递归都需要为方法在虚拟机栈中分配128kb的空间，很显示到第五次的时候就空间不足了。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210522191927.jpeg"></p><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，</p><p>用于本地方法调用, JDK源码中好多使用了Native关键字, 也就是调用底层C语言编写的方法.</p><p>与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常</p><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>也叫PC寄存器</p><p>是一个记录着当前线程所执行的<strong>字节码的行号</strong>指示器。JVM的多线程是通过CPU时间片轮转（即线程轮流切换并分配处理器执行时间）算法来实现的。也就是说，某个线程在执行过程中可能会因为时间片耗尽而被挂起，而另一个线程获取到时间片开始执行。</p><p>简单的说程序计数器的主要功能就是<strong>记录着当前线程所执行的字节码的行号指示器</strong>。</p><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>在JDK8叫元数据区</p><p>方法区存储了类的元数据信息、静态变量、常量等数据。</p><p>方法区的大小决定系统可以保存多少个类。如果系统定义太多的类，导致方法区溢出。虚拟机同样会抛出内存溢出的错误。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210602155112.jpeg"></p><h4 id="堆（heap"><a href="#堆（heap" class="headerlink" title="堆（heap)"></a>堆（heap)</h4><p>平常大家使用<strong>new</strong>关键字创建的对象都会进入堆中，堆也是GC重点照顾的区域，堆会被划分为：<strong>新生代</strong>、<strong>老年代</strong>，而新生代还会被进一步划分为Eden区和Survivor区：</p><p>在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，这个变量的取值等于数组或者对象在堆内存中的<strong>首地址</strong>，在栈中的这个特殊的变量就变成了数组或者对象的引用变量，以后就可以在程序中使用栈内存中的引用变量来访问堆中的数组或者对象，引用变量相当于为数组或者对象起的一个别名或者代号</p><blockquote><p>String a = new Stirng(“123”)</p><p>此时new出来的对象放在heap中，但是这个引用a要放在栈中</p></blockquote><blockquote><p>在JDK1.8之前还有一个永久区，在1.8中去掉，永久区的数据现在保存在元空间中</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210602155109.jpeg"></p><p>新生代中的Eden区和Survivor（From区和To区）区，是根据 JVM回收算法来的，只是现在大部分都是使用的<strong>分代回收算法</strong>，所以在介绍堆的时候会直接将新生代归纳为Eden区和Survivor区。</p><p>堆的详情信息会在GC中说明</p><h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h4><p>作用 : 提高一些场景中的性能.</p><p>直接内存并不是虚拟机运行时数据区的一部分，也不是Java 虚拟机规范中农定义的内存区域。</p><p>在JDK1.4 中新加入了NIO(New Input/Output)类，引入了一种基于通道(Channel)与缓冲区（Buffer）的I/O 方式，它可以使用native 函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p><p>本机直接内存的分配不会受到Java 堆大小的限制，受到本机总内存大小限制</p><p>配置虚拟机参数时，不要忽略直接内存 防止出现OutOfMemoryError异常</p><blockquote><p><strong>直接内存（堆外内存）与堆内存比较</strong></p><p>直接内存申请空间耗费更高的性能，当频繁申请到一定量时尤为明显 直接内存IO读写的性能要优于普通的堆内存，在多次读写操作的情况下差异明显</p></blockquote><h4 id="JVM内存模型小结："><a href="#JVM内存模型小结：" class="headerlink" title="JVM内存模型小结："></a>JVM内存模型小结：</h4><ul><li>JVM内存模型划分为<strong>线程私有区域</strong>和<strong>共享区域</strong></li><li>虚拟机栈/本地方法栈负责存放线程执行<strong>方法栈帧</strong></li><li>程序计数器<strong>用于记录线程执行指令的位置</strong></li><li>元空间区存储类的元数据信息、静态变量、常量等数据</li><li>堆（heap)使用<strong>new关键字创建的对象</strong>都会进入堆中，堆被划分为新生代和老年代</li></ul><p><strong>内存模型以及分区，需要详细到每个区放什么？</strong></p><blockquote><ol><li>方法区：主要是存储类信息，常量池（static 常量和 static 变量），编译后的代码（字节码）等数</li><li>堆：初始化的对象，成员变量 （那种非 static 的变量），所有的对象实例和数组都要在堆上分配</li><li>栈：引用放在栈里面；栈的结构是栈帧组成的，调用一个方法就压入一帧，帧上面存储局部变量表，操作数栈，方法出口等信息，局部变量表存放的是 8 大基础类型加上一个应用类型，所以还是一个指向地址的指针</li><li>程序计数器：记录当前线程执行的行号</li><li>直接内存：NIO的操作</li></ol></blockquote><h3 id="创建一个对象在内存中的变化"><a href="#创建一个对象在内存中的变化" class="headerlink" title="创建一个对象在内存中的变化"></a>创建一个对象在内存中的变化</h3><p>java在new一个对象的时候，会先查看对象所属的类有没有被加载到内存，如果没有的话，就会先通过类的全限定名来加载。加载并初始化类完成后，再进行对象的创建工作。</p><p>我们先假设是第一次使用该类，这样的话new一个对象就可以分为两个过程：<strong>加载并初始化类和创建对象。</strong></p><h4 id="类加载过程（第一次使用该类）"><a href="#类加载过程（第一次使用该类）" class="headerlink" title="类加载过程（第一次使用该类）"></a>类加载过程（第一次使用该类）</h4><p>java是使用<strong>双亲委派模型</strong>来进行类的加载的，所以在描述类加载过程前，我们先看一下它的工作过程：</p><p>双亲委托模型的工作过程是：如果一个类加载器（ClassLoader）收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委托给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需要加载的类）时，子加载器才会尝试自己去加载。</p><p>使用双亲委托机制的好处是：<strong>能够有效确保一个类的全局唯一性，当程序中出现多个限定名相同的类时，类加载器在执行加载时，始终只会加载其中的某一个类。</strong></p><h5 id="1、加载"><a href="#1、加载" class="headerlink" title="1、加载"></a>1、加载</h5><p>由类加载器负责根据一个类的全限定名来读取此类的二进制字节流到JVM内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的java.lang.Class对象实例</p><h5 id="2、验证"><a href="#2、验证" class="headerlink" title="2、验证"></a>2、验证</h5><blockquote><p><strong>格式验证：</strong>验证是否符合class文件规范</p><p><strong>语义验证：</strong>检查一个被标记为final的类型是否包含子类；检查一个类中的final方法是否被子类进行重写；确保父类和子类之间没有不兼容的一些方法声明（比如方法签名相同，但方法的返回值不同）</p><p><strong>操作验证：</strong>在操作数栈中的数据必须进行正确的操作，对常量池中的各种符号引用执行验证（通常在解析阶段执行，检查是否可以通过符号引用中描述的全限定名定位到指定类型上，以及类成员信息的访问修饰符是否允许访问等）</p></blockquote><h5 id="3、准备"><a href="#3、准备" class="headerlink" title="3、准备"></a>3、准备</h5><p>为类中的所有静态变量分配内存空间，并为其设置一个初始值（由于还没有产生对象，实例变量不在此操作范围内）</p><p>被final修饰的static变量（常量），会直接赋值；</p><h5 id="4、解析"><a href="#4、解析" class="headerlink" title="4、解析"></a>4、解析</h5><p>将常量池中的符号引用转为直接引用（得到类或者字段、方法在内存中的指针或者偏移量，以便直接调用该方法），这个可以在初始化之后再执行。<br>解析需要静态绑定的内容。 // 所有不会被重写的方法和域都会被静态绑定</p><p><strong>以上2、3、4三个阶段又合称为链接阶段</strong>，链接阶段要做的是将加载到JVM中的二进制字节流的类数据信息合并到JVM的运行时状态中。</p><h5 id="5、初始化（先父后子）"><a href="#5、初始化（先父后子）" class="headerlink" title="5、初始化（先父后子）"></a>5、初始化（先父后子）</h5><ul><li>4.1 为静态变量赋值</li><li>4.2 执行static代码块</li></ul><blockquote><p>注意：static代码块只有jvm能够调用</p><p>如果是多线程需要同时初始化一个类，仅仅只能允许其中一个线程对其执行初始化操作，其余线程必须等待，只有在活动线程执行完对类的初始化操作之后，才会通知正在等待的其他线程。</p></blockquote><p>因为子类存在对父类的依赖，所以类的加载顺序是先加载父类后加载子类，初始化也一样。不过，父类初始化时，子类静态变量的值也有有的，是默认值。</p><p>最终，方法区会存储当前类类信息，包括类的静态变量、类初始化代码（定义静态变量时的赋值语句 和 静态初始化代码块）、实例变量定义、实例初始化代码（定义实例变量时的赋值语句实例代码块和构造方法）和实例方法，还有父类的类信息引用。</p><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><blockquote><p>堆内初始化，栈内引用</p></blockquote><h5 id="1、在堆区分配对象需要的内存"><a href="#1、在堆区分配对象需要的内存" class="headerlink" title="1、在堆区分配对象需要的内存"></a>1、在堆区分配对象需要的内存</h5><p>分配的内存包括本类和父类的所有实例变量，但不包括任何静态变量</p><h5 id="2、对所有实例变量赋默认值"><a href="#2、对所有实例变量赋默认值" class="headerlink" title="2、对所有实例变量赋默认值"></a>2、对所有实例变量赋默认值</h5><p>将方法区内对实例变量的定义拷贝一份到堆区，然后赋默认值</p><h5 id="3、执行实例初始化代码"><a href="#3、执行实例初始化代码" class="headerlink" title="3、执行实例初始化代码"></a>3、执行实例初始化代码</h5><p>初始化顺序是先初始化父类再初始化子类，初始化时先执行实例代码块然后是构造方法</p><h5 id="4、如果有类似于Child-c-new-Child-形式的c引用的话，在栈区定义Child类型引用变量c，然后将堆区对象的地址赋值给它"><a href="#4、如果有类似于Child-c-new-Child-形式的c引用的话，在栈区定义Child类型引用变量c，然后将堆区对象的地址赋值给它" class="headerlink" title="4、如果有类似于Child c = new Child()形式的c引用的话，在栈区定义Child类型引用变量c，然后将堆区对象的地址赋值给它"></a>4、如果有类似于Child c = new Child()形式的c引用的话，在栈区定义Child类型引用变量c，然后将堆区对象的地址赋值给它</h5><blockquote><p>需要注意的是，<strong>每个子类对象持有父类对象的引用，可在内部通过super关键字来调用父类对象，但在外部不可访问</strong></p></blockquote><p><strong>补充：</strong></p><p>通过实例引用调用实例方法的时候，先从方法区中对象的实际类型信息找，找不到的话再去父类类型信息中找。</p><p>如果继承的层次比较深，要调用的方法位于比较上层的父类，则调用的效率是比较低的，因为每次调用都要经过很多次查找。这时候大多系统会采用一种称为虚方法表的方法来优化调用的效率。</p><p>所谓虚方法表，就是在类加载的时候，为每个类创建一个表，这个表包括该类的对象所有动态绑定的方法及其地址，包括父类的方法，但一个方法只有一条记录，子类重写了父类方法后只会保留子类的。当通过对象动态绑定方法的时候，只需要查找这个表就可以了，而不需要挨个查找每个父类。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程通讯</title>
      <link href="2021/04/24/%E7%BA%BF%E7%A8%8B%E9%80%9A%E8%AE%AF/"/>
      <url>2021/04/24/%E7%BA%BF%E7%A8%8B%E9%80%9A%E8%AE%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p> 线程与线程之间不是相互独立的个体，它们彼此之间需要相互通信和协作。</p><p>最典型的例子就是生产者-消费者问题：当队列满时，生产者需要等待队列有空间才能继续往里面放入商品，而在等待的期间内，生产者必须释放对临界资源（即队列）的占用权。因为生产者如果不释放对临界资源的占用权，那么消费者就无法消费队列中的商品，就不会让队列有空间，那么生产者就会一直无限等待下去。因此一般情况下，当队列满时，会让生产者交出对临界资源的占用权，并进入挂起状态。然后等待消费者消费了商品，然后消费者通知生产者队列有空间了。同样地，当队列空时，消费者也必须等待，等待生产者通知它队列中有商品了。这种互相通信的过程就是线程间的协作</p><h3 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait()-notify()"></a>wait()-notify()</h3><p>wait()、notify() 和 notifyAll()方法是 本地方法，并且为 final 方法，无法被重写；</p><p>调用某个对象的 wait() 方法能让 当前线程<strong>释放锁</strong>并且进入（等待）阻塞，并且当前线程必须拥有此对象的monitor（即锁）；</p><p>调用某个对象的 notify() 方法能够唤醒 一个正在等待这个对象的monitor的线程，如果有多个线程都在等待这个对象的monitor，则只能唤醒其中一个线程；</p><p>调用notifyAll()方法能够唤醒所有正在等待这个对象的monitor的线程。</p><blockquote><p>在使用这3个方法时，必须处于<strong>synchronized</strong>代码块或者synchronized方法中，否则就会抛出IllegalMonitorStateException异常，这是因为调用这几个方法前必须拿到当前对象的监视器<strong>monitor对象</strong>，也就是说notify/notifyAll和wait方法依赖于monitor对象，在前面的分析中，我们知道monitor 存在于对象头的Mark Word 中(存储monitor引用指针)，而synchronized关键字可以获取 monitor ，这也就是为什么notify/notifyAll和wait方法必须在synchronized代码块或者synchronized方法调用的原因。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zsc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/24</span></span><br><span class="line"><span class="comment"> * 两个线程轮流打印A和B</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个资源类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataShare</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> status = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printAAA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (status != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印的是:AAAA&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        status = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printBBB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (status == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印的是:BBBB&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        status = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DataShare dataShare = <span class="keyword">new</span> DataShare();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                dataShare.printAAA();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span></span><br><span class="line">        ).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                dataShare.printBBB();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span></span><br><span class="line">        ).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚假唤醒"><a href="#虚假唤醒" class="headerlink" title="虚假唤醒"></a>虚假唤醒</h3><p>上面演示的Demo中，判断要使用while而不能是if</p><p><strong>注意，消费者被唤醒后是从wait()方法（被阻塞的地方）后面执行，而不是重新从同步块开头。</strong></p><p>使用if判断之后，代码从wait方法后面执行，此时不会再进行一次if判断，假如这个时候在进来线程，就会出现混乱</p><p>而<strong>使用while（）之后，执行到while方法内，还会拉回while方法判断一次</strong></p><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><p>Condition是在java 1.5中出现的，它用来替代传统的Object的wait()/notify()实现线程间的协作，它的使用依赖于 Lock，Condition、Lock 和 Thread 三者之间的关系如下图所示。</p><p>相比使用Object的wait()/notify()，使用Condition的await()/signal()这种方式能够更加安全和高效地实现线程间协作。</p><p>Condition是个接口，基本的方法就是await()和signal()方法。Condition依赖于Lock接口，生成一个Condition的基本代码是lock.newCondition() 。 必须要注意的是，Condition 的 await()/signal() 使用都必须在lock保护之内，也就是说，必须在lock.lock()和lock.unlock之间才可以使用。</p><p>Conditon的await()/signal() 与 Object的wait()-notify() 有着天然的对应关系：**Conditon中的await()对应Object的wait()<strong>；Condition中的</strong>signal()对应Object的notify()**；Condition中的signalAll()对应Object的notifyAll()。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210602153905.png" alt="è¿éåå¾çæè¿°"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author zsc</span><br><span class="line"> * @date 2021/5/24</span><br><span class="line"> * 使用lock中的线程通知</span><br><span class="line"> * 三个线程轮流打印AA BB CC</span><br><span class="line"> * 使用Condition进行精准通知</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 定义一个资源类</span><br><span class="line">class DataShare1&#123;</span><br><span class="line">    private final Lock lock = new ReentrantLock();</span><br><span class="line">    private Condition conditionA = lock.newCondition();</span><br><span class="line">    private Condition conditionB = lock.newCondition();</span><br><span class="line">    private Condition conditionC = lock.newCondition();</span><br><span class="line">    int status = 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void printAAA() throws InterruptedException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            while (status != 0)&#123;</span><br><span class="line">                conditionA.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;打印的是:AAAA&quot;);</span><br><span class="line">            status = 1;</span><br><span class="line">            conditionB.signal();</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void printBBB() throws InterruptedException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            while (status != 1)&#123;</span><br><span class="line">                conditionB.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;打印的是:BBBB&quot;);</span><br><span class="line">            status = 2;</span><br><span class="line">            conditionC.signal();</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public  void printCCC() throws InterruptedException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            while (status != 2)&#123;</span><br><span class="line">                conditionC.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;打印的是:CCCC&quot;);</span><br><span class="line">            status = 0;</span><br><span class="line">            conditionA.signal();</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class NotifyDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        DataShare1 dataShare = new DataShare1();</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            for (int i = 0; i &lt;10 ; i++) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    dataShare.printAAA();</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,&quot;A&quot;</span><br><span class="line">        ).start();</span><br><span class="line"></span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            for (int i = 0; i &lt;10 ; i++) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    dataShare.printBBB();</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,&quot;B&quot;</span><br><span class="line">        ).start();</span><br><span class="line"></span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            for (int i = 0; i &lt;10 ; i++) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    dataShare.printCCC();</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,&quot;C&quot;</span><br><span class="line">        ).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么这些操作线程的方法要定义在object类中呢？"><a href="#为什么这些操作线程的方法要定义在object类中呢？" class="headerlink" title="为什么这些操作线程的方法要定义在object类中呢？"></a>为什么这些操作线程的方法要定义在object类中呢？</h3><blockquote><p>Condition实现原理：</p><p><a href="https://blog.csdn.net/javazejian/article/details/75043422">https://blog.csdn.net/javazejian/article/details/75043422</a></p><p>暂时理解不到位，以后再看，先记录一下</p></blockquote><ol><li>Java中，任何对象都可以作为锁(synchronized)，既然wait是放弃对象锁，当然就要把wait定义在这个对象所属的类中。更通用一些，由于所有类都继承于Object，我们完全可以把wait方法定义在Object类中，这样，当我们定义一个新类，并需要以它的一个对象作为锁时，不需要我们再重新定义wait方法的实现，而是直接调用父类的wait(也就是Object的wait)，此处，用到了Java的继承。</li><li>有的人会说，既然是线程放弃对象锁，那也可以把wait定义在Thread类里面啊，新定义的线程继承于Thread类，也不需要重新定义wait方法的实现。然而，这样做有一个非常大的问题，一个线程完全可以持有很多锁，你一个线程放弃锁的时候，到底要放弃哪个锁？当然了，这种设计并不是不能实现，只是管理起来更加复杂。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMM及Volatile关键字</title>
      <link href="2021/04/22/JMM%E5%8F%8AVolatile%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>2021/04/22/JMM%E5%8F%8AVolatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h3 id="理解Java内存区域与Java内存模型"><a href="#理解Java内存区域与Java内存模型" class="headerlink" title="理解Java内存区域与Java内存模型"></a>理解Java内存区域与Java内存模型</h3><h4 id="Java内存区域"><a href="#Java内存区域" class="headerlink" title="Java内存区域"></a>Java内存区域</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210528083510.jpg" alt="img"></p><p>Java虚拟机在运行程序时会把其自动管理的内存划分为以上几个区域，每个区域都有的用途以及创建销毁的时机，其中蓝色部分代表的是所有<strong>线程共享的数据区域</strong>，而绿色部分代表的是每个线程的<strong>私有数据区域</strong>。</p><h5 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h5><p>方法区属于线程<strong>共享</strong>的内存区域，又称Non-Heap（非堆），主要用于存储已被虚拟机加载的<strong>类信息、常量、静态变量</strong>、即时编译器编译后的代码等数据，根据Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError 异常。值得注意的是在方法区中存在一个叫运行时常量池(Runtime Constant Pool）的区域，它主要用于存放编译器生成的各种字面量和符号引用，这些内容将在类加载后存放到运行时常量池中，以便后续使用。</p><h5 id="JVM堆（Java-Heap）"><a href="#JVM堆（Java-Heap）" class="headerlink" title="JVM堆（Java Heap）"></a>JVM堆（Java Heap）</h5><p>Java 堆也是属于线程<strong>共享</strong>的内存区域，它在虚拟机启动时创建，是Java 虚拟机所管理的内存中最大的一块，主要用于存放<strong>对象实例</strong>，几乎所有的对象实例都在这里分配内存，注意Java 堆是垃圾收集器管理的主要区域，因此很多时候也被称做<strong>GC 堆</strong>，如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError 异常。</p><h5 id="程序计数器-Program-Counter-Register"><a href="#程序计数器-Program-Counter-Register" class="headerlink" title="程序计数器(Program Counter Register)"></a>程序计数器(Program Counter Register)</h5><p>属于线程<strong>私有</strong>的数据区域，是一小块内存空间，主要代表当前线程所执行的<strong>字节码行号指示器</strong>。字节码解释器工作时，通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><h5 id="虚拟机栈-Java-Virtual-Machine-Stacks"><a href="#虚拟机栈-Java-Virtual-Machine-Stacks" class="headerlink" title="虚拟机栈(Java Virtual Machine Stacks)"></a>虚拟机栈(Java Virtual Machine Stacks)</h5><p>属于线程<strong>私有</strong>的数据区域，与线程同时创建，总数与线程关联，代表<strong>Java方法执行的内存模型</strong>。每个方法执行时都会创建一个栈桢来存储方法的的变量表、操作数栈、动态链接方法、返回值、返回地址等信息。每个方法从调用直结束就对于一个栈桢在虚拟机栈中的入栈和出栈过程</p><h5 id="本地方法栈-Native-Method-Stacks"><a href="#本地方法栈-Native-Method-Stacks" class="headerlink" title="本地方法栈(Native Method Stacks)"></a>本地方法栈(Native Method Stacks)</h5><p>本地方法栈属于线程<strong>私有</strong>的数据区域，这部分主要与虚拟机用到的 Native 方法相关，一般情况下，我们无需关心此区域。</p><p>这里之所以简要说明这部分内容，注意是为了区别Java内存模型与Java内存区域的划分，毕竟这两种划分是属于不同层次的概念。</p><h4 id="Java内存模型概述"><a href="#Java内存模型概述" class="headerlink" title="Java内存模型概述"></a>Java内存模型概述</h4><p>Java内存模型(即Java Memory Model，简称JMM)本身是一种抽象的概念<strong>，并不真实存在</strong>，它描述的是一组<strong>规则或规范</strong>，通过这组规范定义了程序中各个变量（包括实例字段，静态字段和构成数组对象的元素）的访问方式。由于JVM运行程序的实体是线程，而每个线程创建时JVM都会为其创建一个工作内存(有些地方称为<strong>栈空间</strong>)，用于存储线程私有的数据。</p><p>而Java内存模型中规定所有变量都存储在<strong>主内存</strong>，主内存是共享内存区域，所有线程都可以访问，但<strong>线程对变量的操作(读取赋值等)必须在工作内存中进行</strong>，首先要将变量从主内存拷贝的自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存，<strong>不能直接操作主内存中的变量</strong>，工作内存中存储着主内存中的变量<strong>副本拷贝</strong>，前面说过，工作内存是每个线程的私有数据区域，因此不同的线程间无法访问对方的工作内存，线程间的通信(传值)必须通过主内存来完成，其简要访问过程如下图</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210602141835.jpg" alt="img"></p><p>  需要注意的是，JMM与Java内存区域的划分是不同的概念层次，<strong>更恰当说JMM描述的是一组规则，通过这组规则控制程序中各个变量在共享数据区域和私有数据区域的访问方式</strong></p><p>JMM是围绕<strong>原子性，有序性、可见性</strong>展开的。JMM与Java内存区域唯一相似点，都存在共享数据区域和私有数据区域，在JMM中主内存属于共享数据区域，从某个程度上讲应该包括了堆和方法区，而工作内存数据线程私有数据区域，从某个程度上讲则应该包括程序计数器、虚拟机栈以及本地方法栈。或许在某些地方，我们可能会看见主内存被描述为堆内存，工作内存被称为线程栈，实际上他们表达的都是同一个含义。关于JMM中的主内存和工作内存说明如下</p><h5 id="主内存"><a href="#主内存" class="headerlink" title="主内存"></a>主内存</h5><p>主要存储的是<strong>Java实例对象</strong>，所有线程创建的实例对象都存放在主内存中，不管该实例对象是成员变量还是方法中的本地变量(也称局部变量)，当然也包括了共享的类信息、常量、静态变量。由于是共享数据区域，多条线程对同一个变量进行访问可能会发现线程安全问题。</p><h5 id="工作内存"><a href="#工作内存" class="headerlink" title="工作内存"></a>工作内存</h5><p>主要存储当前方法的所有本地变量信息(<strong>工作内存中存储着主内存中的变量副本拷贝</strong>)，每个线程只能访问自己的工作内存，即线程中的本地变量对其它线程是不可见的，就算是两个线程执行的是同一段代码，它们也会各自在自己的工作内存中创建属于当前线程的本地变量，当然也包括了字节码行号指示器、相关Native方法的信息。注意由于工作内存是每个线程的私有数据，<strong>线程间无法相互访问工作内存</strong>，因此存储在工作内存的数据不存在线程安全问题。</p><p>弄清楚主内存和工作内存后，接了解一下主内存与工作内存的数据存储类型以及操作方式，根据虚拟机规范，对于一个实例对象中的成员方法而言，如果方法中包含本地变量是基本数据类型（boolean,byte,short,char,int,long,float,double），将直接存储在工作内存的帧栈结构中，但倘若本地变量是引用类型，那么该变量的引用会存储在功能内存的帧栈中，而对象实例将存储在主内存(共享数据区域，堆)中。但对于实例对象的成员变量，不管它是基本数据类型或者包装类型(Integer、Double等)还是引用类型，都会被存储到堆区。至于static变量以及类本身相关信息将会存储在主内存中。需要注意的是，在主内存中的实例对象可以被多线程共享，倘若两个线程同时调用了同一个对象的同一个方法，那么两条线程会将要操作的数据拷贝一份到自己的工作内存中，执行完成操作后才刷新到主内存，简单示意图如下所示：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210602141839.png" alt="img"></p><h4 id="Java内存模型的特地"><a href="#Java内存模型的特地" class="headerlink" title="Java内存模型的特地"></a>Java内存模型的特地</h4><h5 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h5><p>原子性指的是一个操作是不可中断的，即使是在多线程环境下，一个操作一旦开始就不会被其他线程影响。比如对于一个静态变量int x，两条线程同时对他赋值，线程A赋值为1，而线程B赋值为2，不管线程如何运行，最终x的值要么是1，要么是2，线程A和线程B间的操作是没有干扰的，这就是原子性操作，不可被中断的特点。</p><h5 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h5><p>可见性指的是当一个线程修改了某个共享变量的值，其他线程是否能够马上得知这个修改的值。对于串行程序来说，可见性是不存在的，因为我们在任何一个操作中修改了某个变量的值，后续的操作中都能读取这个变量值，并且是修改过的新值。但在多线程环境中可就不一定了，前面我们分析过，由于线程对共享变量的操作都是线程拷贝到各自的工作内存进行操作后才写回到主内存中的，这就可能存在一个线程A修改了共享变量x的值，还未写回主内存时，另外一个线程B又对主内存中同一个共享变量x进行操作，但此时A线程工作内存中共享变量x对线程B来说并不可见，这种工作内存与主内存同步延迟现象就造成了可见性问题，另外指令重排以及编译器优化也可能导致可见性问题，通过前面的分析，我们知道无论是编译器优化还是处理器优化的重排现象，在多线程环境下，确实会导致程序轮序执行的问题，从而也就导致可见性问题。</p><h5 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h5><p>有序性是指对于单线程的执行代码，我们总是认为代码的执行是按顺序依次执行的，这样的理解并没有毛病，毕竟对于单线程而言确实如此，但对于多线程环境，则可能出现乱序现象，因为程序编译成机器码指令后可能会出现指令重排现象，重排后的指令与原指令的顺序未必一致，要明白的是，在Java程序中，倘若在本线程内，所有操作都视为有序行为，如果是多线程环境下，一个线程中观察另外一个线程，所有操作都是无序的，前半句指的是单线程内保证串行语义执行的一致性，后半句则指指令重排现象和工作内存与主内存同步延迟现象。</p><h5 id="JMM提供的解决方案"><a href="#JMM提供的解决方案" class="headerlink" title="JMM提供的解决方案"></a>JMM提供的解决方案</h5><p><strong>原子性问题</strong>，除了JVM自身提供的对基本数据类型读写操作的原子性外，对于方法级别或者代码块级别的原子性操作，可以使用synchronized关键字或者重入锁(ReentrantLock)保证程序执行的原子性</p><p>工作内存与主内存同步延迟现象<strong>可见性问题</strong>，可以使用synchronized关键字或者volatile关键字解决，它们都可以使一个线程修改后的变量立即对其他线程可见。</p><p>对于指令重排导致的可见性问题和<strong>有序性问题</strong>，则可以利用volatile关键字解决，因为volatile的另外一个作用就是禁止重排序优化，关于volatile稍后会进一步分析。</p><p>除了靠sychronized和volatile关键字来保证原子性、可见性以及有序性外，JMM内部还定义一套happens-before 原则来保证多线程环境下两个操作间的原子性、可见性以及有序性。</p><h4 id="理解指令重排"><a href="#理解指令重排" class="headerlink" title="理解指令重排"></a>理解指令重排</h4><p>计算机在执行程序时，为了提高性能，编译器和处理器的常常会对指令做重排，一般分以下3种</p><ul><li><strong>编译器优化的重排</strong></li></ul><p>编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</p><ul><li><strong>指令并行的重排</strong></li></ul><p>现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性(即后一个执行的语句无需依赖前面执行的语句的结果)，处理器可以改变语句对应的机器指令的执行顺序</p><ul><li><strong>内存系统的重排</strong></li></ul><p>由于处理器使用缓存和读写缓存冲区，这使得加载(load)和存储(store)操作看上去可能是在乱序执行，因为三级缓存的存在，导致内存与缓存的数据同步存在时间差。</p><p>其中<strong>编译器优化的重排属于编译期重排</strong>，<strong>指令并行的重排和内存系统的重排属于处理器重排</strong>，在多线程环境中，这些重排优化可能会导致程序出现内存可见性问题</p><h4 id="指令重排遵从两大原则"><a href="#指令重排遵从两大原则" class="headerlink" title="指令重排遵从两大原则"></a>指令重排遵从两大原则</h4><ol><li>as-if-serial语义</li><li>happens-before规则</li></ol><h4 id="as-if-serial语义"><a href="#as-if-serial语义" class="headerlink" title="as-if-serial语义"></a>as-if-serial语义</h4><p>as-if-serial语义的意思是：不管怎么重排序，单个线程中的程序的执行结果不会改变。<br>编译器、runtime和处理器都必须遵守as-if-serial语义。</p><p>为了遵守as-if-serial语义，编译器和处理器不会对存在数据依赖关系的操作做重排序，因为这种重排序会改变执行结果。</p><p>但是，如果操作之间不存在数据依赖关系，这些操作就可能被编译器和处理器重排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个时候如果多线程的情况下，CPU指令重排可能会先执行int b = 2;在执行int a = 1;</span></span><br><span class="line"><span class="comment">// 因为这个程序中不管怎么执行，他的语义都不会变化</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>; </span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line"><span class="comment">// 这个时候即使是在多线程的情况下，CPU也不会对指令进行重排</span></span><br><span class="line"><span class="comment">// 因为下面的语句依赖上面的语句，这种重排序会对程序结果产生影响</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = a + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JMM中的happens-before-原则"><a href="#JMM中的happens-before-原则" class="headerlink" title="JMM中的happens-before 原则"></a>JMM中的happens-before 原则</h4><p>倘若在程序开发中，仅靠sychronized和volatile关键字来保证原子性、可见性以及有序性，那么编写并发程序可能会显得十分麻烦，幸运的是，在Java内存模型中，还提供了happens-before 原则来辅助保证程序执行的原子性、可见性以及有序性的问题，它是判断数据是否存在竞争、线程是否安全的依据，happens-before 原则内容如下</p><ul><li><p><strong>程序顺序原则</strong>，即在一个线程内必须保证语义串行性，也就是说按照代码顺序执行。</p></li><li><p><strong>锁规则</strong> 解锁(unlock)操作必然发生在后续的同一个锁的加锁(lock)之前，也就是说，如果对于一个锁解锁后，再加锁，那么加锁的动作必须在解锁动作之后(同一个锁)。</p></li><li><p><strong>volatile规则</strong> volatile变量的写，先发生于读，这保证了volatile变量的可见性，简单的理解就是，volatile变量在每次被线程访问时，都强迫从主内存中读该变量的值，而当该变量发生变化时，又会强迫将最新的值刷新到主内存，任何时刻，不同的线程总是能够看到该变量的最新值。</p></li><li><p><strong>线程启动规则</strong> 线程的start()方法先于它的每一个动作，即如果线程A在执行线程B的start方法之前修改了共享变量的值，那么当线程B执行start方法时，线程A对共享变量的修改对线程B可见</p></li><li><p><strong>传递性</strong> A先于B ，B先于C 那么A必然先于C</p></li><li><p>线程终止规则 线程的所有操作先于线程的终结，Thread.join()方法的作用是等待当前执行的线程终止。假设在线程B终止之前，修改了共享变量，线程A从线程B的join方法成功返回后，线程B对共享变量的修改将对线程A可见。</p></li><li><p>线程中断规则 对线程 interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测线程是否中断。</p></li><li><p>对象终结规则 对象的构造函数执行，结束先于finalize()方法</p></li></ul><h3 id="volatile内存语义"><a href="#volatile内存语义" class="headerlink" title="volatile内存语义"></a>volatile内存语义</h3><p>volatile在并发编程中很常见，但也容易被滥用，现在我们就进一步分析volatile关键字的语义。volatile是Java虚拟机提供的轻量级的同步机制。volatile关键字有如下两个作用</p><ul><li><strong>可见性</strong>  </li><li><strong>禁止指令重排序优化</strong></li></ul><h3 id="volatile的可见性"><a href="#volatile的可见性" class="headerlink" title="volatile的可见性"></a>volatile的可见性</h3><p>关于volatile的可见性作用，我们必须意识到被volatile修饰的变量对所有线程总数立即可见的，对volatile变量的所有写操作总是能立刻反应到其他线程中，但是对于volatile变量运算操作在多线程环境并不保证安全性，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileVisibility</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如上述代码所示，i变量的任何改变都会立马反应到其他线程中，但是如此存在多条线程同时调用increase()方法的话，就会出现线程安全问题，毕竟i++;操作并不具备原子性，该操作是先读取值，然后写回一个新值，相当于原来的值加上1，分两步完成，如果第二个线程在第一个线程读取旧值和写回新值期间读取i的域值，那么第二个线程就会与第一个线程一起看到同一个值，并执行相同值的加1操作，这也就造成了线程安全失败，因此对于increase方法必须使用synchronized修饰，以便保证线程安全，需要注意的是一旦使用synchronized修饰方法后，由于synchronized本身也具备与volatile相同的特性，即可见性，因此在这样种情况下就完全可以省去volatile修饰变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileVisibility</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来看另外一种场景，可以使用volatile修饰变量达到线程安全的目的，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileSafe</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> close;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        close=<span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!close)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;safe....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于对于boolean变量close值的修改属于原子性操作，因此可以通过使用volatile修饰变量close，使用该变量对其他线程立即可见，从而达到线程安全的目的。那么JMM是如何实现让volatile变量对其他线程立即可见的呢？实际上，<strong>当写一个volatile变量时，JMM会把该线程对应的工作内存中的共享变量值刷新到主内存中，当读取一个volatile变量时，JMM会把该线程对应的工作内存置为无效，那么该线程将只能从主内存中重新读取共享变量。volatile变量正是通过这种写-读方式实现对其他线程可见</strong>（但其内存语义实现则是通过内存屏障，稍后会说明）。</p><blockquote><p>前我们说过当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致，举例说明变量在多个CPU之间的共享。</p><p>如果真的发生这种情况，那同步回到主内存时以谁的缓存数据为准呢？</p><p>为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有MSI、MESI（IllinoisProtocol）、MOSI、Synapse、Firefly及DragonProtocol等。</p><p>MESI（缓存一致性协议）<br>当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p><p>至于是怎么发现数据是否失效呢？<br><strong>嗅探</strong><br>每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。</p><p><strong>总线风暴</strong></p><p>由于Volatile的MESI缓存一致性协议，需要不断的从主内存嗅探和cas不断循环，无效交互会导致总线带宽达到峰值。</p><p>所以不要大量使用Volatile，至于什么时候去使用Volatile什么时候使用锁，根据场景区分。</p></blockquote><h3 id="volatile禁止重排优化"><a href="#volatile禁止重排优化" class="headerlink" title="volatile禁止重排优化"></a>volatile禁止重排优化</h3><p>volatile关键字另一个作用就是禁止指令重排优化，<strong>从而避免多线程环境下程序出现乱序执行的现象</strong>，关于指令重排优化前面已详细分析过，这里主要简单说明一下volatile是如何实现禁止指令重排优化的。</p><p>先了解一个概念，<strong>内存屏障</strong>(Memory Barrier）。<br>内存屏障，又称内存栅栏，是一个CPU指令，它的作用有两个，一是保证特定操作的执行顺序，二是保证某些变量的内存可见性（利用该特性实现volatile的内存可见性）。</p><p>由于编译器和处理器都能执行指令重排优化。<strong>如果在指令间插入一条Memory Barrier则会告诉编译器和CPU，不管什么指令都不能和这条Memory Barrier指令重排序</strong>，也就是说通过插入内存屏障禁止在内存屏障前后的指令执行重排序优化。</p><p><strong>Memory Barrier的另外一个作用是强制刷出各种CPU的缓存数据，因此任何CPU上的线程都能读取到这些数据的最新版本</strong>。总之，volatile变量正是通过内存屏障实现其在内存中的语义，即可见性和禁止重排优化。</p><table><thead><tr><th><strong>屏障类型</strong></th><th><strong>指令示例</strong></th><th>说明</th></tr></thead><tbody><tr><td>LoadLoad</td><td>Load1;LoadLoad;Load2</td><td>保证Load1的读取操作在Load2及后续读取操作之前执行</td></tr><tr><td>StoreStore</td><td>Store1;StoreStore;Store2</td><td>在Store2及其后的写操作执行前，保证Store1的写操作已刷新到主内存</td></tr><tr><td>LoadStore</td><td>Load1;LoadStore;Store2</td><td>在Store2及其后的写操作执行前，保证Load1的读操作已读取结束</td></tr><tr><td>StoreLoad</td><td>Store1;StoreLoad;Load2</td><td>保证load1的写操作已刷新到主内存之后，load2及其后的读操作才能执行</td></tr></tbody></table><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210528085557.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可见性和指令重排都保证</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 第一次检查锁定</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 同步锁定代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="volatile与synchronized的区别"><a href="#volatile与synchronized的区别" class="headerlink" title="volatile与synchronized的区别"></a>volatile与synchronized的区别</h3><p>volatile只能修饰实例变量和类变量，而synchronized可以修饰方法，以及代码块。</p><p>volatile保证数据的可见性，但是不保证原子性(多线程进行写操作，不保证线程安全);而synchronized是一种排他(互斥)的机制。 volatile用于禁止指令重排序：可以解决单例双重检查对象初始化代码执行乱序问题。</p><p>volatile可以看做是轻量版的synchronized，volatile不保证原子性，但是如果是对一个共享变量进行多个线程的赋值，而没有其他的操作，那么就可以用volatile来代替synchronized，因为赋值本身是有原子性的，而volatile又保证了可见性，所以就可以保证线程安全了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>volatile修饰符适用于以下场景：某个属性被多个线程共享，其中有一个线程修改了此属性，其他线程可以立即得到修改后的值，比如booleanflag;或者作为触发器，实现轻量级同步。</p></li><li><p>volatile属性的读写操作都是无锁的，它不能替代synchronized，因为它没有提供原子性和互斥性。因为无锁，不需要花费时间在获取锁和释放锁_上，所以说它是低成本的。</p></li><li><p>volatile只能作用于属性，我们用volatile修饰属性，这样compilers就不会对这个属性做指令重排序。</p></li><li><p>volatile提供了可见性，任何一个线程对其的修改将立马对其他线程可见，volatile属性不会被线程缓存，始终从主 存中读取。</p></li><li><p>volatile提供了happens-before保证，对volatile变量v的写入happens-before所有其他线程后续对v的读操作。</p></li><li><p>volatile可以使得long和double的赋值是原子的。</p></li><li><p>volatile可以在单例双重检查中实现可见性和禁止指令重排序，从而保证安全性。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS辅助类</title>
      <link href="2021/04/20/AQS%E8%BE%85%E5%8A%A9%E7%B1%BB/"/>
      <url>2021/04/20/AQS%E8%BE%85%E5%8A%A9%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="倒计数器-CountDownLatch"><a href="#倒计数器-CountDownLatch" class="headerlink" title="倒计数器 CountDownLatch"></a>倒计数器 CountDownLatch</h3><p>一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。</p><p>CountDownLatch是一个辅助同步器类，用来作计数使用，</p><p>它的作用有点类似于生活中的倒数计数器，先设定一个计数初始值，当计数降到0时，将会触发一些事件，如火箭的倒数计时。</p><p>初始计数值在构造CountDownLatch对象时传入，每调用一次 countDown() 方法，计数值就会减1。</p><p>线程可以调用CountDownLatch的await方法进入阻塞，当计数值降到0时，所有之前调用await阻塞的线程都会释放。</p><p>注意：CountDownLatch的初始计数值一旦降到0，无法重置。如果需要重置，可以考虑使用CyclicBarrier。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: JUC强大的辅助类 之 倒计数器</span></span><br><span class="line"><span class="comment"> * 案例：6个同学陆续离开教室后值班同学才可以关门。</span></span><br><span class="line"><span class="comment"> * 1、一个线程  关门</span></span><br><span class="line"><span class="comment"> * 2、卡断6次  6个同学出口后  一个线程关门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);<span class="comment">//6个同学</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//值班同学 要关门</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">3000</span>));</span><br><span class="line">                    System.out.println(<span class="string">&quot;第&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;同学要离开教室&quot;</span>);</span><br><span class="line">                    countDownLatch.countDown();<span class="comment">//倒计数  -1 0</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//等待 6个同学都离开</span></span><br><span class="line">        <span class="comment">// 这里new CountDownLatch(6)的参数是几就表示要等待几次</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;要关门了&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步屏障CyclicBarrierDemo"><a href="#同步屏障CyclicBarrierDemo" class="headerlink" title="同步屏障CyclicBarrierDemo"></a>同步屏障CyclicBarrierDemo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * 从字面上的意思可以知道，这个类的中文意思是“循环栅栏”。大概的意思就是一个可循环利用的屏障。</span></span><br><span class="line"><span class="comment"> * 该命令只在每个屏障点运行一次。若在所有参与线程之前更新共享状态，此屏障操作很有用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.CyclicBarrier(int parties, Runnable barrierAction) 创建一个CyclicBarrier实例，parties指定参与相互等待的线程数，</span></span><br><span class="line"><span class="comment"> * barrierAction一个可选的Runnable命令，该命令只在每个屏障点运行一次，可以在执行后续业务之前共享状态。该操作由最后一个进入屏障点的线程执行。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.CyclicBarrier(int parties) 创建一个CyclicBarrier实例，parties指定参与相互等待的线程数。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.await() 该方法被调用时表示当前线程已经到达屏障点，当前线程阻塞进入休眠状态，直到所有线程都到达屏障点，当前线程才会被唤醒。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参考文章：https://www.cnblogs.com/jelly12345/p/12111094.html</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//倒计数器</span></span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>,() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜大家一起过关了&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//组队打boss过关卡游戏。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;第&quot;</span> + Thread.currentThread().getName() +</span><br><span class="line">                            <span class="string">&quot;号选手开始第一关&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">3</span>));</span><br><span class="line">                    System.out.println(<span class="string">&quot;第&quot;</span> + Thread.currentThread().getName() +</span><br><span class="line">                            <span class="string">&quot;号选手开始打第一关Boss&quot;</span>);</span><br><span class="line">                    <span class="comment">//只能被调用三次 三次过后 唤醒</span></span><br><span class="line">                    cyclicBarrier.await();<span class="comment">//第i号选手必须在此等待其它选手一起进入下一关口</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;第&quot;</span> + Thread.currentThread().getName() +</span><br><span class="line">                            <span class="string">&quot;号选手开始第二关&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">3</span>));</span><br><span class="line">                    System.out.println(<span class="string">&quot;第&quot;</span> + Thread.currentThread().getName() +</span><br><span class="line">                            <span class="string">&quot;号选手开始打第二关Boss&quot;</span>);</span><br><span class="line">                    cyclicBarrier.await();<span class="comment">//第i号选手必须在此等待其它选手一起进入下一关口</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;第&quot;</span> + Thread.currentThread().getName() +</span><br><span class="line">                            <span class="string">&quot;号选手开始第三关&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">3</span>));</span><br><span class="line">                    System.out.println(<span class="string">&quot;第&quot;</span> + Thread.currentThread().getName() +</span><br><span class="line">                            <span class="string">&quot;号选手开始第三关打Boss&quot;</span>);</span><br><span class="line">                    <span class="comment">//cyclicBarrier.await();//第i号选手必须在此等待其它选手一起进入下一关口</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//减一次</span></span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待  减到0时 唤醒</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;恭喜大家吃鸡了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="CyclicBarrier和CountDownLatch的区别？"><a href="#CyclicBarrier和CountDownLatch的区别？" class="headerlink" title="CyclicBarrier和CountDownLatch的区别？"></a>CyclicBarrier和CountDownLatch的区别？</h4><ul><li><p> CountDownLatch的计数器只能使用一次，而CyclicBarrier的计数器可以使用reset()方法重置，可以使用多次，所以CyclicBarrier能够处理更为复杂的场景；</p></li><li><p> CountDownLatch允许一个或多个线程等待一组事件的产生，而CyclicBarrier用于等待其他线程运行到栅栏位置。</p></li><li><p> CountDownLatch 是一个线程(或者多个)，等待另外N个线程完成某个事情之后才能执行；CyclicBarrie是N个线程相互等待，任何一个线程完成之前，所有的线程都必须等待。</p></li></ul><h3 id="信号量-Semaphore"><a href="#信号量-Semaphore" class="headerlink" title="信号量 Semaphore"></a>信号量 Semaphore</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   信号量</span></span><br><span class="line"><span class="comment"> *   Semaphore翻译成字面意思为 信号量，Semaphore可以控制同时访问的线程个数。非常适合需求量大，而资源又很紧张的情况。</span></span><br><span class="line"><span class="comment"> *   比如给定一个资源数目有限的资源池，假设资源数目为N，每一个线程均可获取一个资源，但是当资源分配完毕时，后来线程需要阻塞等待，</span></span><br><span class="line"><span class="comment"> *   直到前面已持有资源的线程释放资源之后才能继续。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   案例：6辆车抢占3个车位</span></span><br><span class="line"><span class="comment"> *    1、6个线程</span></span><br><span class="line"><span class="comment"> *    2、3个车位  3个信号量</span></span><br><span class="line"><span class="comment"> *    信号量能增加  public void release() 释放</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    信号量能减少  public void acquire()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);<span class="comment">//3个信号量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//抢占停车位</span></span><br><span class="line">                    semaphore.acquire();<span class="comment">//抢不到 阻塞状态   等待</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;第&quot;</span> + Thread.currentThread().getName() +</span><br><span class="line">                            <span class="string">&quot;辆车抢到了车位&quot;</span>);</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1500</span>));</span><br><span class="line">                    System.out.println(<span class="string">&quot;第&quot;</span> + Thread.currentThread().getName() +</span><br><span class="line">                            <span class="string">&quot;辆离开了车位&quot;</span>);</span><br><span class="line">                    semaphore.release();<span class="comment">//归还车位</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL优化</title>
      <link href="2021/04/19/SQL%E4%BC%98%E5%8C%96/"/>
      <url>2021/04/19/SQL%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="简单的SQL优化"><a href="#简单的SQL优化" class="headerlink" title="简单的SQL优化"></a>简单的SQL优化</h3><ol><li><p>对查询优化，应尽量<strong>避免全表扫描</strong>，首先应考虑在where以及order by涉及到的列上建立索引.只返回有用的字段，不要全部返回(不要用<code>select * from</code>  返回的字段一点要有用，尽量实现<strong>覆盖索引</strong>，避免<strong>回表</strong>操作)</p></li><li><p>应尽量避免在where子句中对字段进行null值判断，否则将导致放弃使用索引而进行全表扫描.（建议创建字段时设置一个默认值，避免null值,比如字符默认为空串，数字默认为0）</p></li><li><p>应尽量避免在where子句中使用or来连接条件，否则将导致引擎放弃使用而进行全表扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from t where num = 10 or num = 20</span><br></pre></td></tr></table></figure><p>可以使用union函数查询，也可以这样查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id from t where num = 10 </span><br><span class="line">union all</span><br><span class="line">select id from t where num = 20</span><br></pre></td></tr></table></figure></li><li><p>in 和not in要小心使用，避免全表扫描</p><p>对于连续的数值，能用 between 就不要用 in 了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select id from t where num in(1,2,3)  可能造成全表扫描</span><br><span class="line">select id from t where num between 1 and 3   匹配索引</span><br></pre></td></tr></table></figure></li><li><p>避免在where子句中对字段进行表达式操作</p></li><li><p>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描</p></li><li><p>索引遵循<strong>最左匹配原则</strong>，从<strong>左到右命中索引</strong>，碰到 &gt;,&lt;,like等等运算操作则会放弃索引，查询尽量避免，如果不能避免，一定要放到最后，尽量命中更多的索引</p></li></ol><h3 id="自己的SQL调优过程"><a href="#自己的SQL调优过程" class="headerlink" title="自己的SQL调优过程"></a>自己的SQL调优过程</h3><blockquote><p>数据库调优其实一般情况都是我们的SQL调优，SQL的调优就可以解决大部分问题了(但是这些调优我们应该尽量在开发时就注意到这些问题，在开发阶段避免大部分的问题)，还有一点比较重要的就是SQL执行环节的调优</p></blockquote><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gfniw5xp3dj308i0fuwew.jpg"  /><blockquote><h6 id="SQL的执行过程：-客户端-–-gt-连接器-–-gt-分析器-–-gt-优化器-–-gt-执行器-–-gt-引擎-–-gt-查询结果"><a href="#SQL的执行过程：-客户端-–-gt-连接器-–-gt-分析器-–-gt-优化器-–-gt-执行器-–-gt-引擎-–-gt-查询结果" class="headerlink" title="SQL的执行过程： 客户端 –&gt;  连接器  –&gt;  分析器 –&gt;  优化器 –&gt; 执行器 –&gt; 引擎 –&gt;  查询结果"></a>SQL的执行过程： 客户端 –&gt;  连接器  –&gt;  分析器 –&gt;  优化器 –&gt; 执行器 –&gt; 引擎 –&gt;  查询结果</h6></blockquote><p>我们所谓的调优也就是在，执行器执行之前的分析器，优化器阶段完成的，那我们开发工作中怎么去调优的呢？</p><p>一般在开发涉及SQL的业务都会去本地环境跑一遍SQL，用explain去看一下执行计划，看看分析的结果是否符合自己的预期，用没用到相关的索引，然后再去线上环境跑一下看看执行时间（这里只有查询语句，修改语句也无法在线上执行）。</p><h4 id="排除缓存干扰"><a href="#排除缓存干扰" class="headerlink" title="排除缓存干扰"></a>排除缓存干扰</h4><p>因为在MySQL8.0之前我们的数据库是存在缓存这样的情况的，我之前就被坑过，因为存在缓存，我发现我sql怎么执行都是很快，当然第一次其实不快但是我没注意到，以至于上线后因为缓存经常失效，导致rt（Response time）时高时低。</p><p>后面就发现了是缓存的问题，我们在执行SQL的时候，记得加上<code>SQL_NO_CACHE</code> 去跑SQL，这样跑出来的时间就是真实的查询时间了。</p><p>我说一下为什么缓存会失效，而且是经常失效。</p><p>如果我们当前的MySQL版本支持缓存而且我们又开启了缓存，那每次请求的查询语句和结果都会以key-value的形式缓存在内存中的，大家也看到我们的结构图了，一个请求会先去看缓存是否存在，不存在才会走解析器。</p><p>缓存失效比较频繁的原因就是，只要我们一对表进行更新，那这个表所有的缓存都会被清空，其实我们很少存在不更新的表，特别是我之前的电商场景，可能静态表可以用到缓存，但是我们都走大数据离线分析，缓存也就没用了。</p><p>大家如果是8.0以上的版本就不用担心这个问题，如果是8.0之下的版本，记得排除缓存的干扰。</p><h4 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h4><p>最开始提到了用执行计划去分析，explain是SQL调优都会回答到的, 因为这基本上是写SQL的必备操作</p><p>使用EXPLAIN关键字可以模拟<strong>优化器</strong>执行SQL查询语句，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是表结构的性能瓶颈。</p><p><strong>通过EXPLAIN，我们可以分析出以下结果：(重要)</strong></p><ul><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ul><blockquote><p> <strong>使用方法就是 EXPLAIN +SQL语句</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gfnc52iwauj30mp03g74k.jpg"></p><p><strong>各个字段的含义</strong></p><ul><li><p><strong>id  : select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</strong></p><blockquote><p>id相同，执行顺序由上至下</p><p>id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p></blockquote></li><li><h5 id="select-type-用来表示查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询。"><a href="#select-type-用来表示查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询。" class="headerlink" title="select_type : 用来表示查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询。"></a>select_type : 用来表示查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询。</h5><blockquote><p><strong>SIMPLE</strong> 简单的select查询，查询中不包含子查询或者UNION</p><p><strong>PRIMARY</strong> 查询中若包含任何复杂的子部分，最外层查询则被标记为PRIMARY</p><p><strong>SUBQUERY</strong> 在SELECT或WHERE列表中包含了子查询</p><p><strong>DERIVED</strong> 在FROM列表中包含的子查询被标记为DERIVED（衍生），MySQL会递归执行这些子查询，把结果放在临时表中</p><p><strong>UNION</strong> 若第二个SELECT出现在UNION之后，则被标记为UNION：若UNION包含在FROM子句的子查询中，外层SELECT将被标记为：DERIVED</p><p><strong>UNION RESULT</strong> 从UNION表获取结果的SELECT</p></blockquote></li><li><h5 id="table-：指的就是当前执行的表"><a href="#table-：指的就是当前执行的表" class="headerlink" title="table ：指的就是当前执行的表"></a>table ：指的就是当前执行的表</h5></li><li><h5 id="type：type所显示的是查询使用了哪种类型，type包含的类型包括如下图所示的几种："><a href="#type：type所显示的是查询使用了哪种类型，type包含的类型包括如下图所示的几种：" class="headerlink" title="type：type所显示的是查询使用了哪种类型，type包含的类型包括如下图所示的几种："></a>type：type所显示的是查询使用了哪种类型，type包含的类型包括如下图所示的几种：</h5><p><img src="https://img-blog.csdn.net/20180520171720532?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3doeTE1NzMyNjI1OTk4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p></li></ul><p>从最好到最差依次是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">system</span> <span class="operator">&gt;</span> const <span class="operator">&gt;</span> eq_ref <span class="operator">&gt;</span> <span class="keyword">ref</span> <span class="operator">&gt;</span> <span class="keyword">range</span> <span class="operator">&gt;</span> index <span class="operator">&gt;</span> <span class="keyword">all</span></span><br></pre></td></tr></table></figure><p><strong>一般来说，得保证查询至少达到range级别，最好能达到ref。</strong></p><blockquote><ul><li><strong>system</strong> : 表只有一行记录（等于系统表），这是const类型的特列，平时不会出现，这个也可以忽略不计</li><li><strong>const</strong> : 表示通过索引一次就找到了，const用于比较primary key 或者unique索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL就能将该查询转换为一个常量。(如where id = 1)</li></ul><ul><li><strong>eq_ref : ** 唯一性索引扫描，对于</strong>每个索引键，表中只有一条记录与之匹配**。常见于主键或唯一索引扫描</li><li><strong>ref</strong> : 非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体。</li><li>**range: ** 只检索给定范围的行，使用一个索引来选择行，key列显示使用了哪个索引，一般就是在你的where语句中出现between、&lt; 、&gt;、in等的查询，这种范围扫描索引比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。</li><li><strong>index</strong>  : Full Index Scan，Index与All区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。（也就是说虽然all和Index都是读全表，但index是从索引中读取的，而all是从硬盘读取的）</li><li><strong>all</strong> :  Full Table Scan 将遍历全表以找到匹配的行</li></ul></blockquote><ul><li><h5 id="possible-keys-显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。"><a href="#possible-keys-显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。" class="headerlink" title="possible_keys : 显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。"></a>possible_keys : 显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，<strong>但不一定被查询实际使用</strong>。</h5></li><li><h5 id="Key-实际使用的索引，如果为NULL，则没有使用索引。（可能原因包括没有建立索引或索引失效）"><a href="#Key-实际使用的索引，如果为NULL，则没有使用索引。（可能原因包括没有建立索引或索引失效）" class="headerlink" title="Key:实际使用的索引，如果为NULL，则没有使用索引。（可能原因包括没有建立索引或索引失效）"></a>Key:实际使用的索引，如果为NULL，则没有使用索引。（可能原因包括没有建立索引或索引失效）</h5><blockquote><p>查询中若使用了<code>覆盖索引</code>（select 后要查询的字段刚好和创建的索引字段完全相同），则该索引仅出现在key列表中</p></blockquote></li><li><h5 id="key-len-表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度，在不损失精确性的情况下，长度越短越好。key-len显示的值为索引字段的最大可能长度，并非实际使用长度，即key-len是根据表定义计算而得，不是通过表内检索出的。"><a href="#key-len-表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度，在不损失精确性的情况下，长度越短越好。key-len显示的值为索引字段的最大可能长度，并非实际使用长度，即key-len是根据表定义计算而得，不是通过表内检索出的。" class="headerlink" title="key_len: 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度，在不损失精确性的情况下，长度越短越好。key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的。"></a>key_len: 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度，在不损失精确性的情况下，长度越短越好。key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的。</h5></li><li><h5 id="ref-显示索引的那一列被使用了，如果可能的话，最好是一个常数。哪些列或常量被用于查找索引列上的值。"><a href="#ref-显示索引的那一列被使用了，如果可能的话，最好是一个常数。哪些列或常量被用于查找索引列上的值。" class="headerlink" title="ref:显示索引的那一列被使用了，如果可能的话，最好是一个常数。哪些列或常量被用于查找索引列上的值。"></a>ref:显示索引的那一列被使用了，如果可能的话，最好是一个常数。哪些列或常量被用于查找索引列上的值。</h5></li><li><h5 id="rows-根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数，也就是说，用的越少越好"><a href="#rows-根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数，也就是说，用的越少越好" class="headerlink" title="rows: 根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数，也就是说，用的越少越好"></a>rows: 根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数，也就是说，用的越少越好</h5></li><li><h5 id="Extra-包含不适合在其他列中显式但十分重要的额外信息"><a href="#Extra-包含不适合在其他列中显式但十分重要的额外信息" class="headerlink" title="Extra:包含不适合在其他列中显式但十分重要的额外信息"></a>Extra:包含不适合在其他列中显式但十分重要的额外信息</h5></li></ul><blockquote><p>统计这个统计的行数就是完全对的么？索引一定会走到最优索引么？</p><p>行数只是一个接近的数字，不是完全正确的，索引也不一定就是走最优的，是可能走错的。</p><p>我的总行数大概有10W行，但是我去用explain去分析sql的时候，就会发现只得到了9.4W，为啥行数只是个近视值呢？</p><p><strong>因为MySQL中数据的单位都是页，MySQL又采用了采样统计的方法，采样统计的时候，InnoDB默认会选择N个数据页，统计这些页面上的不同值，得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数。</strong></p><p>我们数据是一直在变的，所以索引的统计信息也是会变的，会根据一个阈值，重新做统计。</p><p>至于MySQL索引可能走错也很好理解，如果走A索引要扫描100行，B索引有只要20行，但是他可能选择走A索引，你可能会想MySQL是不是有病啊，其实不是的。</p><p>一般走错都是因为优化器在选择的时候发现，走A索引没有额外的代价，比如走B索引并不能直接拿到我们的值，还需要回到主键索引才可以拿到，多了一次回表的过程，这个也是会被优化器考虑进去的。</p><p>他发现走A索引不需要回表，没有额外的开销，所有他选错了。</p><p>如果是上面的统计信息错了，那简单，我们用analyze table tablename 就可以重新统计索引信息了，所以在实践中，如果你发现explain的结果预估的rows值跟实际情况差距比较大，可以采用这个方法来处理。</p><p>还有一个方法就是force index强制走正确的索引，或者优化SQL，最后实在不行，可以新建索引，或者删掉错误的索引。</p></blockquote><h4 id="减少回表"><a href="#减少回表" class="headerlink" title="减少回表"></a>减少回表</h4><p>根据自己返回的字段需要，创建合适的联合索引，实现覆盖索引。就可以减少回表了。</p><blockquote><p>回表就是，辅助索引在查询的时候，不会直接查询到对应的数据行，而是查询到该行的主键ID，然后在通过ID进行主键索引查询，查询到对应的数据行。这个通过主键ID在查一次的过程就叫回表。</p><p>如果我们要查询三个字段的值，可以根据这三个字段创建一个联合索引，这样就实现了索引覆盖，查询的数据都在索引行中，这样就不用再进行一次回表操作了</p><p>PS: 创建联合索引的时候要遵循 最左匹配原则</p></blockquote><h4 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h4><p>已经知道了前缀索引规则，那我就说一个官方帮我们优化的东西，索引下推。</p><p><code>select * from itemcenter where name like &#39;赵%&#39; and hight = 175 and age = 20;</code></p><p>所以这个语句在搜索索引树的时候，只能用 “敖”，找到第一个满足条件的记录ID1，当然，这还不错，总比全表扫描要好。</p><p>然后呢？</p><p>当然是判断其他条件是否满足，比如size。</p><p>在MySQL 5.6之前，只能从ID1开始一个个回表，到主键索引上找出数据行，再对比字段值。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527151808.jpeg" alt="img"></p><p>而MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527152018.jpeg" alt="img"></p><h4 id="条件字段函数操作"><a href="#条件字段函数操作" class="headerlink" title="条件字段函数操作"></a>条件字段函数操作</h4><p>日常开发过程中，大家经常对很多字段进行函数操作，如果对日期字段操作，浮点字符操作等等，大家需要注意的是，如果对字段做了函数计算，就用不上索引了，这是MySQL的规定。</p><p>对索引字段做函数操作，可能会破坏索引值的有序性，因此优化器就决定放弃走树搜索功能。</p><h4 id="唯一索引普通索引选择难题"><a href="#唯一索引普通索引选择难题" class="headerlink" title="唯一索引普通索引选择难题"></a>唯一索引普通索引选择难题</h4><p>核心是需要回答到<strong>change buffer</strong>，那change buffer又是个什么东西呢？</p><p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB会将这些更新操作<strong>缓存在change buffer</strong>中，这样就不需要从磁盘中读入这个数据页了。</p><p>在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行change buffer中与这个页有关的操作，通过这种方式就能保证这个数据逻辑的正确性。</p><p>需要说明的是，虽然名字叫作change buffer，实际上它是可以<strong>持久化的数据</strong>。也就是说，change buffer在内存中有拷贝，也会被写入到磁盘上。</p><p>将change buffer中的操作应用到原数据页，得到最新结果的过程称为<strong>merge。</strong></p><p>除了访问这个数据页会触发merge外，系统有后台线程会<strong>定期</strong>merge。在数据库正常关闭（shutdown）的过程中，也会执行merge操作。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210527152455.jpeg"></p><p>显然，如果能够将更新操作先记录在change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用buffer pool的，所以这种方式还能够避免占用内存，提高内存利用率</p><p>那么，<strong>什么条件下可以使用change buffer呢？</strong></p><p>对于唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。</p><p>要判断表中是否存在这个数据，而这必须要将数据页读入内存才能判断，如果都已经读入到内存了，那直接更新内存会更快，就没必要使用change buffer了。</p><p>因此，唯一索引的更新就不能使用change buffer，实际上也只有普通索引可以使用。</p><p>change buffer用的是buffer pool里的内存，因此不能无限增大，change buffer的大小，可以通过参数innodb_change_buffer_max_size来动态设置，这个参数设置为50的时候，表示change buffer的大小最多只能占用buffer pool的50%。</p><p><strong>将数据从磁盘读入内存涉及随机IO的访问，是数据库里面成本最高的操作之一，change buffer因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</strong></p><p><strong>change buffer的使用场景</strong><br>因为merge的时候是真正进行数据更新的时刻，而change buffer的主要目的就是将记录的变更动作缓存下来，所以在一个数据页做merge之前，change buffer记录的变更越多（也就是这个页面上要更新的次数越多），收益就越大。</p><p>因此，<strong>对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时change buffer的使用效果最好</strong>，这种业务模型常见的就是账单类、日志类的系统。</p><p>反过来，<strong>假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新先记录在change buffer，但之后由于马上要访问这个数据页，会立即触发merge过程。这样随机访问IO的次数不会减少，反而增加了change buffer的维护代价，所以，对于这种业务模式来说，change buffer反而起到了副作用。</strong></p><blockquote><p><strong>在不考虑数据重复的情况下，数据重复情况，必须使用普通索引</strong></p><p><strong>总的来说就是，对于写多读少的业务来说，可以采用普通索引（因为这样每次修改的数据都会记录在changeBuffer中，merge次次数很少）</strong></p><p><strong>对于写入马上查询的业务来说，使用唯一索引（因为这个如果使用普通索引，会频繁的造成merge,而且需要维护一个changeBuffer）</strong></p></blockquote><h4 id="flush脏页刷新机制"><a href="#flush脏页刷新机制" class="headerlink" title="flush脏页刷新机制"></a>flush脏页刷新机制</h4><h4 id="数据库调优总结："><a href="#数据库调优总结：" class="headerlink" title="数据库调优总结："></a>数据库调优总结：</h4><p><strong>简单的SQL优化</strong>：查询时的返回字段优化，where条件优化，null值判断；创建索引：查询频繁以及数据重复较小的字段创建索引；创建的索引失效情况，联合索引重点突出最左匹配原则</p><p><strong>自己优化流程：</strong></p><ul><li>分析SQL执行流程</li><li>用EXPLAIN分析具体某一条SQL执行流程</li><li>排查问题时去掉SQL缓存</li><li>怎么样优化：<ul><li>覆盖索引（减少回表）</li><li>联合索引（目的就是为了能够覆盖索引，提高效率）（创建联合索引时遵循最左匹配原则）合理安排SQL顺序</li><li>单一索引时 根据业务选择唯一索引还是普通索引（根据change buffer   多写少读用普通索引  写后随即读取用唯一索引）</li><li>还有一点要注意的是MySQL选择utf-8字符集要选用uft8mb4</li><li>索引字段不要做函数操作</li></ul></li></ul><h3 id="MySQL的引擎"><a href="#MySQL的引擎" class="headerlink" title="MySQL的引擎"></a>MySQL的引擎</h3><h5 id="Innodb引擎"><a href="#Innodb引擎" class="headerlink" title="Innodb引擎"></a><strong>Innodb引擎</strong></h5><ul><li><p>Innodb引擎提供了对数据库ACID事务的支持，并且实现了SQL标准的四种隔离级别。</p></li><li><p>该引擎还提供了行级锁和外键约束，它的设计目标是处理大容量数据库系统，它本身其实就是基于MySQL后台的完整数据库系统，MySQL运行时Innodb会在内存中建立缓冲池，用于缓冲数据和索引。</p></li><li><p>当需要使用数据库事务时，该引擎当然是首选。由于锁的粒度更小，写操作不会锁定全表，所以在并发较高时，使用Innodb引擎会提升效率。</p></li><li><p>但是使用行级锁也不是绝对的，如果在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表。</p></li></ul><h5 id="MyIASM引擎"><a href="#MyIASM引擎" class="headerlink" title="MyIASM引擎"></a><strong>MyIASM引擎</strong></h5><ul><li>它没有提供对数据库事务的支持，也不支持行级锁和外键，因此当INSERT(插入)或UPDATE(更新)数据时即写操作需要锁定整个表，效率便会低一些。</li><li>不过和Innodb不同，MyIASM中存储了表的行数，于是SELECT COUNT(*) FROM TABLE时只需要直接读取已经保存好的值而不需要进行全表扫描。如果表的读操作远远多于写操作且不需要数据库事务的支持，那么MyIASM也是很好的选择。</li></ul><h5 id="主要区别："><a href="#主要区别：" class="headerlink" title="主要区别："></a><strong>主要区别：</strong></h5><ol><li><p>MyIASM是非事务安全的，而InnoDB是事务安全的</p></li><li><p>MyIASM锁的粒度是表级的，而InnoDB支持行级锁</p></li><li><p>InnoDB支持外键，而MyISAM不支持。对一个包含外键的InnoDB表转为MYISAM会失败</p></li><li><ol><li><p>InnoDB是聚集索引，使用B+Tree作为索引结构，数据文件是和（主键）索引绑在一起的（表数据文件本身就是按B+Tree组织的一个索引结构），必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。</p></li><li><p>MyISAM是非聚集索引，也是使用B+Tree作为索引结构，索引和数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</p></li></ol></li><li><p>MyIASM表保存成文件形式，跨平台使用更加方便</p></li><li><p>InnoDB表必须有唯一索引（如主键）（用户没有指定的话会自己找/生产一个隐藏列Row_id来充当默认主键），而Myisam可以没有</p></li></ol><p><strong>如何选择</strong></p><ol><li><p>是否要支持事务，如果要请选择innodb，如果不需要可以考虑MyISAM；</p></li><li><p>如果表中绝大多数都只是读查询，可以考虑MyISAM，如果既有读也有写，请使用InnoDB。</p></li><li><p>系统奔溃后，MyISAM恢复起来更困难，能否接受；</p></li><li><p>MySQL5.5版本开始Innodb已经成为Mysql的默认引擎(之前是MyISAM)，说明其优势是有目共睹的，如果你不知道用什么，那就用InnoDB，至少不会差。</p></li></ol><h5 id="InnoDB为什么推荐使用自增ID作为主键？"><a href="#InnoDB为什么推荐使用自增ID作为主键？" class="headerlink" title="InnoDB为什么推荐使用自增ID作为主键？"></a>InnoDB为什么推荐使用自增ID作为主键？</h5><p>  <strong>答：自增ID可以保证每次插入时B+索引是从右边扩展的，可以避免B+树和频繁合并和分裂（对比使用UUID）。如果使用字符串主键和随机主键，会使得数据随机插入，效率比较差。</strong></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> SQL优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="2021/04/15/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>2021/04/15/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="线程池的优势"><a href="#线程池的优势" class="headerlink" title="线程池的优势"></a>线程池的优势</h3><p>总体来说，线程池有如下的优势：</p><p>（1）<strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p><p>（2）<strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</p><p>（3）<strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</p><h3 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h3><h4 id="四种构造方法"><a href="#四种构造方法" class="headerlink" title="四种构造方法"></a>四种构造方法</h4><p>线程池的真正实现类是 <strong>ThreadPoolExecutor</strong>，其构造方法有如下4种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                          ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         threadFactory, defaultHandler);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         Executors.defaultThreadFactory(), handler);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p><strong>corePoolSize</strong>（必需）：核心线程数。默认情况下，核心线程会一直存活，但是当将 allowCoreThreadTimeout 设置为 true 时，核心线程也会超时回收。<br><strong>maximumPoolSize</strong>（必需）：线程池所能容纳的最大线程数。当活跃线程数达到该数值后，后续的新任务将会阻塞。<br><strong>keepAliveTime</strong>（必需）：线程闲置超时时长。如果超过该时长，非核心线程就会被回收。如果将 allowCoreThreadTimeout 设置为 true 时，核心线程也会超时回收。<br><strong>unit</strong>（必需）：指定 keepAliveTime 参数的时间单位。常用的有：TimeUnit.MILLISECONDS（毫秒）、TimeUnit.SECONDS（秒）、TimeUnit.MINUTES（分）。<br><strong>workQueue</strong>（必需）：任务队列。通过线程池的 execute() 方法提交的 Runnable 对象将存储在该参数中。其采用阻塞队列实现。<br>threadFactory（可选）：线程工厂。用于指定为线程池创建新线程的方式。<br><strong>handler</strong>（可选）：拒绝策略。当达到最大线程数时需要执行的饱和策略。<br>线程池的使用流程如下：</p><h3 id="线程池的工作原理"><a href="#线程池的工作原理" class="headerlink" title="线程池的工作原理"></a>线程池的工作原理</h3><p>下面来描述一下线程池工作的原理，同时对上面的参数有一个更深的了解。其工作原理流程图如下：</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210602153516.png" alt="img" style="zoom: 67%;" /><p>通过上图，相信大家已经对所有参数有个了解了。下面再对任务队列、线程工厂和拒绝策略做更多的说明。</p><h3 id="线程池的参数"><a href="#线程池的参数" class="headerlink" title="线程池的参数"></a>线程池的参数</h3><h4 id="任务队列（workQueue）"><a href="#任务队列（workQueue）" class="headerlink" title="任务队列（workQueue）"></a>任务队列（workQueue）</h4><p>任务队列是基于<strong>阻塞队列</strong>实现的，即采用<strong>生产者消费者模式</strong>，在 Java 中需要实现 BlockingQueue 接口。但 Java 已经为我们提供了 7 种阻塞队列的实现：</p><ol><li><p><strong>ArrayBlockingQueue</strong>：一个由数组结构组成的有界阻塞队列（数组结构可配合指针实现一个环形队列）。</p></li><li><p>LinkedBlockingQueue： 一个由链表结构组成的有界阻塞队列，在未指明容量时，容量默认为 Integer.MAX_VALUE。</p></li><li><p>PriorityBlockingQueue： 一个支持优先级排序的无界阻塞队列，对元素没有要求，可以实现 Comparable 接口也可以提供 Comparator 来对队列中的元素进行比较。跟时间没有任何关系，仅仅是按照优先级取任务。</p></li><li><p>DelayQueue：类似于PriorityBlockingQueue，是二叉堆实现的无界优先级阻塞队列。要求元素都实现 Delayed 接口，通过执行时延从队列中提取任务，时间没到任务取不出来。</p></li><li><p>SynchronousQueue： 一个不存储元素的阻塞队列，消费者线程调用 take() 方法的时候就会发生阻塞，直到有一个生产者线程生产了一个元素，消费者线程就可以拿到这个元素并返回；生产者线程调用 put() 方法的时候也会发生阻塞，直到有一个消费者线程消费了一个元素，生产者才会返回。</p></li><li><p>LinkedBlockingDeque： 使用双向队列实现的有界双端阻塞队列。双端意味着可以像普通队列一样 FIFO（先进先出），也可以像栈一样 FILO（先进后出）。</p></li><li><p>LinkedTransferQueue： 它是ConcurrentLinkedQueue、LinkedBlockingQueue 和 SynchronousQueue 的结合体，但是把它用在 ThreadPoolExecutor 中，和 LinkedBlockingQueue 行为一致，但是是无界的阻塞队列。<br>注意有界队列和无界队列的区别：如果使用有界队列，当队列饱和时并超过最大线程数时就会执行拒绝策略；而如果使用无界队列，因为任务队列永远都可以添加任务，所以设置 maximumPoolSize 没有任何意义。</p></li></ol><h4 id="线程工厂（threadFactory）"><a href="#线程工厂（threadFactory）" class="headerlink" title="线程工厂（threadFactory）"></a>线程工厂（threadFactory）</h4><p>线程工厂指定创建线程的方式，需要实现 ThreadFactory 接口，并实现 newThread(Runnable r) 方法。该参数可以不用指定，Executors 框架已经为我们实现了一个默认的线程工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default thread factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger poolNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup group;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger threadNumber = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String namePrefix;</span><br><span class="line"> </span><br><span class="line">    DefaultThreadFactory() &#123;</span><br><span class="line">        SecurityManager s = System.getSecurityManager();</span><br><span class="line">        group = (s != <span class="keyword">null</span>) ? s.getThreadGroup() :</span><br><span class="line">                              Thread.currentThread().getThreadGroup();</span><br><span class="line">        namePrefix = <span class="string">&quot;pool-&quot;</span> +</span><br><span class="line">                      poolNumber.getAndIncrement() +</span><br><span class="line">                     <span class="string">&quot;-thread-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(group, r,</span><br><span class="line">                              namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">                              <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.isDaemon())</span><br><span class="line">            t.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)</span><br><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="拒绝策略（handler）"><a href="#拒绝策略（handler）" class="headerlink" title="拒绝策略（handler）"></a>拒绝策略（handler）</h4><p>当线程池的线程数达到最大线程数时，需要执行拒绝策略。拒绝策略需要实现 RejectedExecutionHandler 接口，并实现 rejectedExecution(Runnable r, ThreadPoolExecutor executor) 方法。不过 Executors 框架已经为我们实现了 4 种拒绝策略：</p><ol><li>AbortPolicy（默认）：丢弃任务并抛出 RejectedExecutionException 异常。</li><li>CallerRunsPolicy：由调用线程处理该任务。</li><li>DiscardPolicy：丢弃任务，但是不抛出异常。可以配合这种模式进行自定义的处理方式。</li><li>DiscardOldestPolicy：丢弃队列最早的未处理任务，然后重新尝试执行任务。</li></ol><h3 id="功能线程池（不推荐使用）"><a href="#功能线程池（不推荐使用）" class="headerlink" title="功能线程池（不推荐使用）"></a>功能线程池（不推荐使用）</h3><p>嫌上面使用线程池的方法太麻烦？其实Executors已经为我们封装好了 4 种常见的功能线程池，如下：</p><ul><li>定长线程池（FixedThreadPool）</li><li>定时线程池（ScheduledThreadPool ）</li><li>可缓存线程池（CachedThreadPool）</li><li>单线程化线程池（SingleThreadExecutor）</li></ul><h4 id="定长线程池（FixedThreadPool）"><a href="#定长线程池（FixedThreadPool）" class="headerlink" title="定长线程池（FixedThreadPool）"></a>定长线程池（FixedThreadPool）</h4><p>创建方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                                  threadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点：只有核心线程，线程数量固定，执行完立即回收，任务队列为链表结构的有界队列。</strong><br><strong>应用场景：控制线程最大并发数。</strong><br>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建定长线程池对象 &amp; 设置线程池线程数量固定为3</span></span><br><span class="line">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 2. 创建好Runnable类线程对象 &amp; 需执行的任务</span></span><br><span class="line">Runnable task =<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;执行任务啦&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3. 向线程池提交任务</span></span><br><span class="line">fixedThreadPool.execute(task);</span><br></pre></td></tr></table></figure><h4 id="定时线程池（ScheduledThreadPool-）"><a href="#定时线程池（ScheduledThreadPool-）" class="headerlink" title="定时线程池（ScheduledThreadPool ）"></a>定时线程池（ScheduledThreadPool ）</h4><p>创建方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> DEFAULT_KEEPALIVE_MILLIS = <span class="number">10L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE,</span><br><span class="line">          DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</span><br><span class="line">          <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> corePoolSize, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize, threadFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE,</span><br><span class="line">          DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</span><br><span class="line">          <span class="keyword">new</span> DelayedWorkQueue(), threadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点：核心线程数量固定，非核心线程数量无限，执行完闲置 10ms 后回收，任务队列为延时阻塞队列。</strong><br><strong>应用场景：执行定时或周期性的任务。</strong><br>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 定时线程池对象 &amp; 设置线程池线程数量固定为5</span></span><br><span class="line">ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 2. 创建好Runnable类线程对象 &amp; 需执行的任务</span></span><br><span class="line">Runnable task =<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;执行任务啦&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3. 向线程池提交任务</span></span><br><span class="line">scheduledThreadPool.schedule(task, <span class="number">1</span>, TimeUnit.SECONDS); <span class="comment">// 延迟1s后执行任务</span></span><br><span class="line">scheduledThreadPool.scheduleAtFixedRate(task,<span class="number">10</span>,<span class="number">1000</span>,TimeUnit.MILLISECONDS);<span class="comment">// 延迟10ms后、每隔1000ms执行任务</span></span><br></pre></td></tr></table></figure><h4 id="可缓存线程池（CachedThreadPool）"><a href="#可缓存线程池（CachedThreadPool）" class="headerlink" title="可缓存线程池（CachedThreadPool）"></a>可缓存线程池（CachedThreadPool）</h4><p>创建方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(),</span><br><span class="line">                                  threadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点：无核心线程，非核心线程数量无限，执行完闲置 60s 后回收，任务队列为不存储元素的阻塞队列。</strong><br><strong>应用场景：执行大量、耗时少的任务。</strong><br>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建可缓存线程池对象</span></span><br><span class="line">ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line"><span class="comment">// 2. 创建好Runnable类线程对象 &amp; 需执行的任务</span></span><br><span class="line">Runnable task =<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;执行任务啦&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3. 向线程池提交任务</span></span><br><span class="line">cachedThreadPool.execute(task);</span><br></pre></td></tr></table></figure><h4 id="单线程化线程池（SingleThreadExecutor）"><a href="#单线程化线程池（SingleThreadExecutor）" class="headerlink" title="单线程化线程池（SingleThreadExecutor）"></a>单线程化线程池（SingleThreadExecutor）</h4><p>创建方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                                threadFactory));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点：只有 1 个核心线程，无非核心线程，执行完立即回收，任务队列为链表结构的有界队列。</strong><br><strong>应用场景：不适合并发但可能引起 IO 阻塞性及影响 UI 线程响应的操作，如数据库操作、文件操作等。</strong></p><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建单线程化线程池</span></span><br><span class="line">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="comment">// 2. 创建好Runnable类线程对象 &amp; 需执行的任务</span></span><br><span class="line">Runnable task =<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;执行任务啦&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3. 向线程池提交任务</span></span><br><span class="line">singleThreadExecutor.execute(task);</span><br></pre></td></tr></table></figure><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210602153537.png" alt="img"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>Executors 的 4 个功能线程池虽然方便，但现在已经不建议使用了，而是建议直接通过使用 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p><p>其实 Executors 的 4 个功能线程有如下弊端：</p><p>FixedThreadPool 和 SingleThreadExecutor：主要问题是堆积的请求处理队列均采用 LinkedBlockingQueue，可能会耗费非常大的内存，甚至 OOM。<br>CachedThreadPool 和 ScheduledThreadPool：主要问题是线程数最大数是 Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至 OOM。</p><h3 id="线程数量如何设置"><a href="#线程数量如何设置" class="headerlink" title="线程数量如何设置"></a>线程数量如何设置</h3><p>cpu密集型的任务 一般设置 线程数 = 核心数N + 1</p><p>io密集型的任务 一般设置 线程数 = 核心数N*2 + 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前机器的核数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> cpuNum = Runtime.getRuntime().availableProcessors();</span><br></pre></td></tr></table></figure><h3 id="封装线程池"><a href="#封装线程池" class="headerlink" title="封装线程池"></a>封装线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zsc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池管理(线程统一调度管理)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolManager sThreadPoolManagerManager = <span class="keyword">new</span> ThreadPoolManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池维护线程的最少数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE_CORE_POOL = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池维护线程的最大数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE_MAX_POOL = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池维护线程所允许的空闲时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIME_KEEP_ALIVE = <span class="number">10</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池所使用的缓冲队列大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE_WORK_QUEUE = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任务调度周期</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERIOD_TASK_QOS = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 线程池单例创建方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sThreadPoolManagerManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任务缓冲队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;Runnable&gt; mTaskQueue = <span class="keyword">new</span> LinkedList&lt;Runnable&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 线程池超出界线时将任务加入缓冲队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RejectedExecutionHandler mHandler = <span class="keyword">new</span> RejectedExecutionHandler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable task, ThreadPoolExecutor executor)</span> </span>&#123;</span><br><span class="line">            mTaskQueue.offer(task);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 将缓冲队列中的任务重新加载到线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Runnable mAccessBufferThread = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (hasMoreAcquire()) &#123;</span><br><span class="line">                mThreadPool.execute(mTaskQueue.poll());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 创建一个调度线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 通过调度线程周期性的执行缓冲队列中任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> ScheduledFuture&lt;?&gt; mTaskHandler = scheduler.scheduleAtFixedRate(mAccessBufferThread, <span class="number">0</span>,</span><br><span class="line">            PERIOD_TASK_QOS, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadPoolExecutor mThreadPool = <span class="keyword">new</span> ThreadPoolExecutor(SIZE_CORE_POOL, SIZE_MAX_POOL,</span><br><span class="line">            TIME_KEEP_ALIVE, TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(SIZE_WORK_QUEUE), mHandler);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 将构造方法访问修饰符设为私有，禁止任意实例化。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadPoolManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mThreadPool.isShutdown() &amp;&amp; !mThreadPool.prestartCoreThread()) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">            <span class="keyword">int</span> startThread = mThreadPool.prestartAllCoreThreads();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 消息队列检查方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasMoreAcquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !mTaskQueue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 向线程池中添加任务方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeTask</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (task != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mThreadPool.execute(task);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isTaskEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mThreadPool.getActiveCount() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mTaskQueue.clear();</span><br><span class="line">        mThreadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Synchronized</title>
      <link href="2021/04/15/Synchronized/"/>
      <url>2021/04/15/Synchronized/</url>
      
        <content type="html"><![CDATA[<p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210602114224.jpg" alt="img"></p><blockquote><p>前言：造成线程安全问题的主要诱因有两点: 一是<strong>存在共享数据</strong>(也称临界资源)，二是<strong>存在多条线程共同操作共享数据</strong>。因此为了解决这个问题，我们可能需要这样一个方案，当存在多个线程操作共享数据时，需要保证同一时刻<strong>有且只有一个线程在操作共享数据</strong>，其他线程必须等到该线程处理完数据后再进行，这种方式有个高尚的名称叫<strong>互斥锁</strong>，即能达到互斥访问目的的锁，也就是说当一个共享数据被当前正在访问的线程加上互斥锁后，在同一个时刻，其他线程只能处于等待的状态，直到当前线程处理完毕释放该锁。在 Java 中，关键字 synchronized可以保证在同一个时刻，只有一个线程可以执行<strong>某个方法或者某个代码块</strong>(主要是对方法或者代码块中存在共享数据的操作)，同时我们还应该注意到synchronized另外一个重要的作用，synchronized可保证一个线程的变化(主要是共享数据的变化)被其他线程所看到（<strong>保证可见性，完全可以替代Volatile功能</strong>），这点确实也是很重要的。</p></blockquote><h3 id="synchronized的三种应用方式"><a href="#synchronized的三种应用方式" class="headerlink" title="synchronized的三种应用方式"></a>synchronized的三种应用方式</h3><p>synchronized关键字最主要有以下3种应用方式</p><ul><li><p>修饰实例方法，作用于当前实例加锁，进入同步代码前要获得<strong>当前实例</strong>的锁</p></li><li><p>修饰静态方法，作用于当前类对象加锁，进入同步代码前要获得<strong>当前类对象</strong>的锁</p></li><li><p>修饰代码块，指定加锁对象，对给定对象加锁，进入同步代码库前要获得<strong>给定对象</strong>的锁。</p></li></ul><h4 id="1-synchronized作用于实例方法"><a href="#1-synchronized作用于实例方法" class="headerlink" title="1. synchronized作用于实例方法"></a>1. synchronized作用于实例方法</h4><p>所谓的实例对象锁就是用synchronized修饰实例对象中的实例方法，注意是实例方法不包括静态方法，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zsc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/18</span></span><br><span class="line"><span class="comment"> * synchronized作用于实例方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountingSync</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//共享资源(临界资源)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * synchronized 修饰实例方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里没有synchronized 结果很有可能就小于2000000  i++操作并不具备原子性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 锁的是当前实例，也就是AccountingSync的一个实例instance</span></span><br><span class="line"><span class="comment">         * instance实例的下的所有synchronized修饰的实例方法</span></span><br><span class="line"><span class="comment">         * 若此时该实例还有一个实例方式 synchronized test()，线程访问test,也要等待increase方法释放掉锁才可以</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        AccountingSync instance=<span class="keyword">new</span> AccountingSync();</span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(instance);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(instance);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，我们开启两个线程操作同一个共享资源即变量i，由于i++;操作并不具备原子性，该操作是先读取值，然后写回一个新值，相当于原来的值加上1，分两步完成</p><p>如果第二个线程在第一个线程读取旧值和写回新值期间读取i的域值，那么第二个线程就会与第一个线程一起看到同一个值，并执行相同值的加1操作，这也就造成了线程安全失败，因此对于increase方法必须使用synchronized修饰，以便保证线程安全。</p><p>此时我们应该注意到synchronized修饰的是实例方法increase，在这样的情况下，当前线程的锁便是实例对象instance，注意Java中的线程同步锁可以是任意对象。从代码执行结果来看确实是正确的，倘若我们没有使用synchronized关键字，其最终输出结果就很可能小于2000000，这便是synchronized关键字的作用。</p><p>这里我们还需要意识到，<strong>当一个线程正在访问一个对象的 synchronized 实例方法，那么其他线程不能访问该对象的其他 synchronized 方法，毕竟一个对象只有一把锁</strong>。</p><p><strong>当一个线程获取了该对象的锁之后，其他线程无法获取该对象的锁，所以无法访问该对象的其他synchronized实例方法，但是其他线程还是可以访问该实例对象的其他非synchronized方法</strong></p><p>当然如果是一个线程 A 需要访问实例对象 obj1 的 synchronized 方法 f1(当前对象锁是obj1)，另一个线程 B 需要访问实例对象 obj2 的 synchronized 方法 f2(当前对象锁是obj2)，这样是允许的，因为两个实例对象锁并不同相同，此时如果两个线程操作数据并非共享的，线程安全是有保障的，遗憾的是如果两个线程操作的是共享数据，那么线程安全就有可能无法保证了，如下代码将演示出该现象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zsc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/18</span></span><br><span class="line"><span class="comment"> * 创建两个实例，t1和t2都会进入各自的对象锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountingSyncBad</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//new新实例</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> AccountingSyncBad());</span><br><span class="line">        <span class="comment">//new新实例</span></span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(<span class="keyword">new</span> AccountingSyncBad());</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="comment">//join含义:当前线程A等待thread线程终止之后才能从thread.join()返回</span></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上述代码与前面不同的是我们同时创建了两个新实例AccountingSyncBad，</span></span><br><span class="line"><span class="comment">     * 然后启动两个不同的线程对共享变量i进行操作，但很遗憾操作结果是1452317而不是期望结果2000000，</span></span><br><span class="line"><span class="comment">     * 因为上述代码犯了严重的错误，虽然我们使用synchronized修饰了increase方法，但却new了两个不同的实例对象，</span></span><br><span class="line"><span class="comment">     * 这也就意味着存在着两个不同的实例对象锁，因此t1和t2都会进入各自的对象锁，也就是说t1和t2线程使用的是不同的锁，</span></span><br><span class="line"><span class="comment">     * 因此线程安全是无法保证的。解决这种困境的的方式是将synchronized作用于静态的increase方法，这样的话，对象锁就当前类对象，</span></span><br><span class="line"><span class="comment">     * 由于无论创建多少个实例对象，但对于的类对象拥有只有一个，所有在这样的情况下对象锁就是唯一的。</span></span><br><span class="line"><span class="comment">     * ————————————————</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-synchronized作用于静态方法"><a href="#2-synchronized作用于静态方法" class="headerlink" title="2. synchronized作用于静态方法"></a>2. synchronized作用于静态方法</h4><p>当synchronized作用于静态方法时，其锁就是当前类的<strong>class对象锁</strong>。由于静态成员不专属于任何一个实例对象，是类成员，因此通过class对象锁可以控制静态 成员的并发操作。需要注意的是<strong>如果一个线程A调用一个实例对象的非static synchronized方法，而线程B需要调用这个实例对象所属类的静态 synchronized方法，是允许的，不会发生互斥现象</strong>，因为访问静态 synchronized 方法占用的锁是当前类的class对象，而访问非静态 synchronized 方法占用的锁是当前实例对象锁，看如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zsc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/18</span></span><br><span class="line"><span class="comment"> * synchronized作用于静态方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountingSyncClass</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 作用于静态方法,锁是当前class对象,也就是</span></span><br><span class="line"><span class="comment">     * AccountingSyncClass类对应的class对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非静态,访问时锁不一样不会发生互斥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase4Obj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//new新实例</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> AccountingSyncClass());</span><br><span class="line">        <span class="comment">//new新实例</span></span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(<span class="keyword">new</span> AccountingSyncClass());</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();t2.start();</span><br><span class="line"></span><br><span class="line">        t1.join();t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于synchronized关键字修饰的是静态increase方法，与修饰实例方法不同的是，其锁对象是当前类的class对象。<strong>注意代码中的increase4Obj方法是实例方法，其对象锁是当前实例对象，如果别的线程调用该方法，将不会产生互斥现象</strong>，毕竟锁对象不同，但我们应该意识到这种情况下可能会发现线程安全问题(操作了共享静态变量i)。</p><h4 id="3-synchronized同步代码块"><a href="#3-synchronized同步代码块" class="headerlink" title="3. synchronized同步代码块"></a>3. synchronized同步代码块</h4><p>除了使用关键字修饰实例方法和静态方法外，还可以使用同步代码块，在某些情况下，我们编写的方法体可能比较大，同时存在一些比较耗时的操作，而需要同步的代码又只有一小部分，如果直接对整个方法进行同步操作，可能会得不偿失，此时我们可以使用同步代码块的方式对需要同步的代码进行包裹，这样就无需对整个方法进行同步操作了，同步代码块的使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zsc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/18</span></span><br><span class="line"><span class="comment"> * synchronized同步代码块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountingSyncBody</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用类的class对象表示是class对象锁，锁class</span></span><br><span class="line">        <span class="keyword">synchronized</span>(AccountingSyncBody.class)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里用this代表当前实例对象锁</span></span><br><span class="line"><span class="comment">//        synchronized(this)&#123;</span></span><br><span class="line"><span class="comment">//            for(int j=0;j&lt;1000000;j++)&#123;</span></span><br><span class="line"><span class="comment">//                i++;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        AccountingSyncBody instance=<span class="keyword">new</span> AccountingSyncBody();</span><br><span class="line">        AccountingSyncBody instance2=<span class="keyword">new</span> AccountingSyncBody();</span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(instance);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(instance2);</span><br><span class="line">        t1.start();t2.start();</span><br><span class="line">        t1.join();t2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码看出，将synchronized作用于一个给定的实例对象instance，即当前实例对象就是锁对象，每次当线程进入synchronized包裹的代码块时就会要求当前线程持有instance实例对象锁，如果当前有其他线程正持有该对象锁，那么新到的线程就必须等待，这样也就保证了每次只有一个线程执行i++;操作。当然除了instance作为对象外，我们还可以使用this对象(代表当前实例)或者当前类的class对象作为锁</p><blockquote><h5 id="总结：-synchronized有三种实现方式，分别为锁实例方法（非static方法），锁静态方法，锁代码块"><a href="#总结：-synchronized有三种实现方式，分别为锁实例方法（非static方法），锁静态方法，锁代码块" class="headerlink" title="总结： synchronized有三种实现方式，分别为锁实例方法（非static方法），锁静态方法，锁代码块"></a>总结： synchronized有三种实现方式，分别为锁实例方法（非static方法），锁静态方法，锁代码块</h5><ul><li><p>锁实例方法的时候，JVM会给该实例方法的实例对象加锁，有且只有一个线程可以进入该实例方法，其他线程必须要等待进入的线程执行完代码释放锁才能进入，其他线程也不能进入该实例对象的其他synchronized修饰的实例方法。因为锁是加给该实例对象的。但是同一个线程允许可重入操作。加锁的方式为在对象头通过monitor对象管理实现的，下面会有关于可重入操作和加锁的具体解释</p></li><li><p>锁静态方法的时候，JVM会给该静态方法的类对象加锁，也就是无论该Class创建多少实例，都会互斥。要注意的是该类的synchronized修饰的静态方法被锁住的时候，其他线程是可以访问该类synchronized修饰的非static方法的。因为static方法加锁加Class对象上，而非static方法加锁在实例上，两者互不干扰</p></li><li><p>锁代码块的时候，可以指定加锁的类型，synchronized(XXX.class)表示给该代码块加上一个类对象锁。synchronized(this)表示给该代码块加上一个实例对象锁。</p></li></ul></blockquote><h3 id="Synchronized底层语义原理"><a href="#Synchronized底层语义原理" class="headerlink" title="Synchronized底层语义原理"></a>Synchronized底层语义原理</h3><p>JVM中的同步(Synchronization)基于Monitor对象实现， 无论是<strong>显式同步</strong>(有明确的 monitorenter 和 monitorexit 指令,即同步代码块)还是<strong>隐式同步</strong>都是如此。</p><p>在 Java 语言中，同步用的最多的地方可能是被 synchronized 修饰的同步方法。<strong>同步方法 并不是由 monitorenter 和 monitorexit 指令来实现同步的</strong>，<strong>而是由方法调用指令读取运行时常量池中方法的 ACC_SYNCHRONIZED 标志来隐式实现的</strong>，关于这点，稍后详细分析。下面先来了解一个概念Java对象头，这对深入理解synchronized实现原理非常关键。</p><h3 id="理解Java对象头与Monitor"><a href="#理解Java对象头与Monitor" class="headerlink" title="理解Java对象头与Monitor"></a>理解Java对象头与Monitor</h3><h4 id="在-JVM-中，对象在内存中分为三块区域："><a href="#在-JVM-中，对象在内存中分为三块区域：" class="headerlink" title="在 JVM 中，对象在内存中分为三块区域："></a>在 JVM 中，对象在内存中分为三块区域：</h4><ol><li><h5 id="对象头-（这个是重点）"><a href="#对象头-（这个是重点）" class="headerlink" title="对象头 （这个是重点）"></a>对象头 （这个是重点）</h5><p><strong>它实现synchronized的锁对象的基础，一般而言，synchronized使用的锁对象是存储在Java对象头里的，jvm中采用2个字来存储对象头(如果对象是数组则会分配3个字，多出来的1个字记录的是数组长度)，其主要结构是由Mark Word 和 Class Metadata Address （也可以说Klass Point，意思一样，都为类型指针）组成</strong></p><blockquote><p>这个字的本意的word, C++中的概念。JVM是C++开发的</p></blockquote></li></ol><p><strong>Mark Word（标记字段）</strong>：默认存储对象的HashCode，分代年龄和锁标志位信息。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。</p><p><strong>Klass Point（类型指针）</strong>：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><ol start="2"><li><h5 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h5></li></ol><p>这部分主要是存放类的数据信息，父类的信息。如果是数组的实例部分还包括数组的长度，这部分内存按4字节对齐。</p><ol start="3"><li><h5 id="填充数据"><a href="#填充数据" class="headerlink" title="填充数据"></a>填充数据</h5></li></ol><p>由于虚拟机要求对象起始地址必须是8字节的整数倍，填充数据不是必须存在的，仅仅是为了字节对齐。</p><blockquote><p>ps：不知道大家有没有被问过一个空对象占多少个字节？就是8个字节，是因为对齐填充的关系哈，不到8个字节对其填充会帮我们自动补齐。</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210602114236.jpg" alt="img"></p><blockquote><p> <strong>重量级锁也就是通常说synchronized的对象锁，其中指针指向的是monitor对象（也称为管程或监视器锁）的起始地址。每个对象都存在着一个 monitor 与之关联，对象与其 monitor 之间的关系有存在多种实现方式，如monitor可以与对象一起创建销毁或当线程试图获取对象锁时自动生成，但当一个 monitor 被某个线程持有后，它便处于锁定状态。在Java虚拟机(HotSpot)中，monitor是由ObjectMonitor实现的，其主要数据结构如下（位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的）</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ObjectMonitor</span>() &#123;</span><br><span class="line">    _header       = <span class="literal">NULL</span>;</span><br><span class="line">    _count        = <span class="number">0</span>; <span class="comment">//记录个数</span></span><br><span class="line">    _waiters      = <span class="number">0</span>,</span><br><span class="line">    _recursions   = <span class="number">0</span>;</span><br><span class="line">    _object       = <span class="literal">NULL</span>;</span><br><span class="line">    _owner        = <span class="literal">NULL</span>;</span><br><span class="line">    _WaitSet      = <span class="literal">NULL</span>; <span class="comment">//处于wait状态的线程，会被加入到_WaitSet</span></span><br><span class="line">    _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">    _Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">    _succ         = <span class="literal">NULL</span> ;</span><br><span class="line">    _cxq          = <span class="literal">NULL</span> ;</span><br><span class="line">    FreeNext      = <span class="literal">NULL</span> ;</span><br><span class="line">    _EntryList    = <span class="literal">NULL</span> ; <span class="comment">//处于等待锁block状态的线程，会被加入到该列表</span></span><br><span class="line">    _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">    _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">    OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>ObjectMonitor中有两个队列，**_WaitSet （待唤醒的线程）和 _EntryList（也就是等待的线程）**，用来保存ObjectWaiter对象列表( 每个等待锁的线程都会被封装成ObjectWaiter对象)，_owner指向持有ObjectMonitor对象的线程，</p><ol><li><p>当多个线程同时访问一段同步代码时，首先会进入 _EntryList 集合，</p></li><li><p>当线程获取到对象的monitor 后进入 _Owner 区域并把monitor中的owner变量设置为当前线程同时monitor中的计数器count加1</p></li><li><p>若线程调用 wait() 方法，将释放当前持有的monitor，owner变量恢复为null，count自减1，</p></li><li><p>同时该线程进入 WaitSet集合中等待被唤醒。</p></li><li><p>若当前线程执行完毕也将释放monitor(锁)并复位变量的值，以便其他线程进入获取monitor(锁)</p></li></ol><p>由此看来，monitor对象存在于每个Java对象的对象头中(存储的指针的指向)，synchronized锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因，同时也是notify/notifyAll/wait等方法存在于顶级对象Object中的原因</p><h3 id="synchronized代码块底层原理"><a href="#synchronized代码块底层原理" class="headerlink" title="synchronized代码块底层原理"></a>synchronized代码块底层原理</h3><p>现在我们重新定义一个synchronized修饰的同步代码块，在代码块中操作共享变量i，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncCodeBlock</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//同步代码库</span></span><br><span class="line">       <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">           i++;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译上述代码并使用javap反编译后得到字节码如下(这里我们省略一部分没有必要的信息)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">  Last modified 2017-6-2; size 426 bytes</span><br><span class="line">  MD5 checksum c80bc322c87b312de760942820b4fed5</span><br><span class="line">  Compiled from &quot;SyncCodeBlock.java&quot;</span><br><span class="line">public class com.zejian.concurrencys.SyncCodeBlock</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">  //........省略常量池中数据</span><br><span class="line">  //构造函数</span><br><span class="line">  public com.zejian.concurrencys.SyncCodeBlock();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 7: 0</span><br><span class="line">  //===========主要看看syncTask方法实现================</span><br><span class="line">  public void syncTask();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=3, locals=3, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: dup</span><br><span class="line">         2: astore_1</span><br><span class="line">         3: monitorenter  //注意此处，进入同步方法</span><br><span class="line">         4: aload_0</span><br><span class="line">         5: dup</span><br><span class="line">         6: getfield      #2             // Field i:I</span><br><span class="line">         9: iconst_1</span><br><span class="line">        10: iadd</span><br><span class="line">        11: putfield      #2            // Field i:I</span><br><span class="line">        14: aload_1</span><br><span class="line">        15: monitorexit   //注意此处，退出同步方法</span><br><span class="line">        16: goto          24</span><br><span class="line">        19: astore_2</span><br><span class="line">        20: aload_1</span><br><span class="line">        21: monitorexit //注意此处，退出同步方法</span><br><span class="line">        22: aload_2</span><br><span class="line">        23: athrow</span><br><span class="line">        24: return</span><br><span class="line">      Exception table:</span><br><span class="line">      //略其他字节码.......</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;SyncCodeBlock.java&quot;</span><br></pre></td></tr></table></figure><p>主要看的字节码代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3: monitorenter  //进入同步方法</span><br><span class="line">//..........省略其他  </span><br><span class="line">15: monitorexit   //退出同步方法</span><br><span class="line">16: goto          24</span><br><span class="line">//省略其他.......</span><br><span class="line">21: monitorexit //退出同步方法</span><br></pre></td></tr></table></figure><p><strong>显式同步的流程</strong></p><p>从字节码中可知同步语句块的实现使用的是<strong>monitorenter 和 monitorexit</strong> 指令，其中monitorenter指令指向同步代码块的开始位置，monitorexit指令则指明同步代码块的结束位置</p><ol><li><p>当执行monitorenter指令时，当前线程将试图获取 objectref(即对象锁) 所对应的 monitor 的持有权，当 objectref 的 monitor 的进入计数器为 0，那线程可以成功取得 monitor，并将计数器值设置为 1，取锁成功。</p></li><li><p>如果当前线程已经拥有 objectref 的 monitor 的持有权，那它可以重入这个 monitor (关于重入性稍后会分析)，重入时计数器的值也会加 1。</p></li><li><p>倘若其他线程已经拥有 objectref 的 monitor 的所有权，那当前线程将被阻塞，直到正在执行线程执行完毕，即monitorexit指令被执行，执行线程将释放 monitor(锁)并设置计数器值为0 ，其他线程将有机会持有 monitor 。</p></li><li><p>值得注意的是编译器将会确保无论方法通过何种方式完成，方法中调用过的每条 monitorenter 指令都有执行其对应 monitorexit 指令，而无论这个方法是正常结束还是异常结束。</p></li></ol><p>为了保证在方法异常完成时 monitorenter 和 monitorexit 指令依然可以正确配对执行，<strong>编译器会自动产生一个异常处理器，这个异常处理器声明可处理所有的异常，它的目的就是用来执行 monitorexit 指令</strong>。从字节码中也可以看出多了一个monitorexit指令，它就是异常结束时被执行的释放monitor 的指令。</p><h3 id="synchronized方法底层原理"><a href="#synchronized方法底层原理" class="headerlink" title="synchronized方法底层原理"></a>synchronized方法底层原理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> i; <span class="comment">//共享变量i</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">           i++;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译之后的字节码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  Last modified 2017-6-2; size 308 bytes</span><br><span class="line">  MD5 checksum f34075a8c059ea65e4cc2fa610e0cd94</span><br><span class="line">  Compiled from &quot;SyncMethod.java&quot;</span><br><span class="line">public class com.zejian.concurrencys.SyncMethod</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool;</span><br><span class="line"></span><br><span class="line">   //省略没必要的字节码</span><br><span class="line">  //==================syncTask方法======================</span><br><span class="line">  public synchronized void syncTask();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    //方法标识ACC_PUBLIC代表public修饰，ACC_SYNCHRONIZED指明该方法为同步方法</span><br><span class="line">    flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class="line">    Code:</span><br><span class="line">      stack=3, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: dup</span><br><span class="line">         2: getfield      #2                  // Field i:I</span><br><span class="line">         5: iconst_1</span><br><span class="line">         6: iadd</span><br><span class="line">         7: putfield      #2                  // Field i:I</span><br><span class="line">        10: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 12: 0</span><br><span class="line">        line 13: 10</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;SyncMethod.java&quot;</span><br></pre></td></tr></table></figure><p><strong>隐式同步</strong></p><p><strong>方法级的同步是隐式</strong>，即无需通过字节码指令来控制的，它实现在方法调用和返回操作之中。JVM可以从方法常量池中的方法表结构(method_info Structure) 中的 <strong>ACC_SYNCHRONIZED</strong> 访问标志区分一个方法是否同步方法。这便是synchronized锁在同步代码块和同步方法上实现的基本原理</p><ol><li><p>当方法调用时，调用指令将会 检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，执行线程将先持有monitor（虚拟机规范中用的是管程一词）， 然后再执行方法，最后再方法完成(无论是正常完成还是非正常完成)时释放monitor。</p></li><li><p>在方法执行期间，执行线程持有了monitor，其他任何线程都无法再获得同一个monitor。</p></li><li><p>如果一个同步方法执行期间抛 出了异常，并且在方法内部无法处理此异常，那这个<strong>同步方法所持有的monitor将在异常抛到同步方法之外时自动释放</strong></p><blockquote><p>ACC_SYNCHRONIZED会去隐式调用刚才的两个指令：monitorenter和monitorexit。</p><p>所以归根究底，还是monitor对象的争夺。</p></blockquote></li></ol><p>同时我们还必须注意到的是在Java早期版本中，synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的Mutex Lock来实现的，而操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的synchronized效率低的原因。庆幸的是在Java 6之后Java官方对从JVM层面对synchronized较大优化，所以现在的synchronized锁效率也优化得很不错了，Java 6之后，为了减少获得锁和释放锁所带来的性能消耗，引入了轻量级锁和偏向锁</p><h3 id="Java虚拟机对synchronized的优化"><a href="#Java虚拟机对synchronized的优化" class="headerlink" title="Java虚拟机对synchronized的优化"></a>Java虚拟机对synchronized的优化</h3><p>锁的状态总共有四种，<strong>无锁状态、偏向锁、轻量级锁和重量级锁</strong>。随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级的重量级锁，但是锁的升级是单向的，也就是说只能从低到高升级<strong>，不会出现锁的降级</strong>，关于重量级锁，前面我们已详细分析过，下面我们将介绍偏向锁和轻量级锁以及JVM的其他优化手段</p><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>偏向锁是Java 6之后加入的新锁，它是一种针对加锁操作的优化手段，经过研究发现，在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，因此为了减少同一线程获取锁(会涉及到一些CAS操作,耗时)的代价而引入偏向锁。偏向锁的核心思想是，<strong>如果一个线程获得了锁，那么锁就进入偏向模式，此时Mark Word 的结构也变为偏向锁结构，当这个线程再次请求锁时，无需再做任何同步操作，即获取锁的过程，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能</strong>。所以，对于没有锁竞争的场合，偏向锁有很好的优化效果，毕竟极有可能连续多次是同一个线程申请相同的锁。但是对于锁竞争比较激烈的场合，偏向锁就失效了，因为这样场合极有可能每次申请锁的线程都是不相同的，因此这种场合下不应该使用偏向锁，否则会得不偿失，需要注意的是，<strong>偏向锁失败后，并不会立即膨胀为重量级锁，而是先升级为轻量级锁</strong>。下面我们接着了解轻量级锁。</p><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><p>倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)，此时Mark Word 的结构也变为轻量级锁的结构。轻量级锁能够提升程序性能的依据是“<strong>对绝大部分的锁，在整个同步周期内都不存在竞争</strong>”，注意这是经验数据。需要了解的是，轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁。</p><h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><p>轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此<strong>自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，</strong>这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。</p><blockquote><p>关于锁升级的详细内容：<a href="https://www.jianshu.com/p/36eedeb3f912">https://www.jianshu.com/p/36eedeb3f912</a></p></blockquote><h3 id="关于synchronized-可能需要了解的关键点"><a href="#关于synchronized-可能需要了解的关键点" class="headerlink" title="关于synchronized 可能需要了解的关键点"></a>关于synchronized 可能需要了解的关键点</h3><h4 id="synchronized的可重入性"><a href="#synchronized的可重入性" class="headerlink" title="synchronized的可重入性"></a>synchronized的可重入性</h4><p>从互斥锁的设计上来说，当一个线程试图操作一个由其他线程持有的对象锁的临界资源时，将会处于阻塞状态，但当一个线程再次请求自己持有对象锁的临界资源时，这种情况属于重入锁，请求将会成功，在java中synchronized是基于原子性的内部锁机制，是可重入的，因此在一个线程调用synchronized方法的同时在其方法体内部调用该对象另一个synchronized方法，也就是说一个线程得到一个对象锁后再次请求该对象锁，是允许的，这就是synchronized的可重入性。注意由于synchronized是基于monitor实现的，因此每次重入monitor中的计数器仍会加1。</p><h4 id="不可中断性"><a href="#不可中断性" class="headerlink" title="不可中断性"></a>不可中断性</h4><p>不可中断就是指，一个线程获取锁之后，另外一个线程处于阻塞或者等待状态，前一个不释放，后一个也一直会阻塞或者等待，不可以被中断。</p><p>与sleep方法不同的是wait方法调用完成后，线程将被暂停，但<strong>wait方法将会释放当前持有的监视器锁(monitor)<strong>，直到有线程调用notify/notifyAll方法后方能继续执行，而</strong>sleep方法只让线程休眠并不释放锁</strong>。同时notify/notifyAll方法调用后，并不会马上释放监视器锁，而是在相应的synchronized(){}/synchronized方法执行结束后才自动释放锁。</p><blockquote><p>synchronized特性：</p><ol><li><p>有序性  : as-if-serial和happens-before</p></li><li><p>可见性：内存强制刷新</p></li><li><p>原子性：单一线程持有</p></li><li><p>可重入性：计数器</p><p>有序性参考：<a href="https://blog.csdn.net/byhook/article/details/87971081">https://blog.csdn.net/byhook/article/details/87971081</a></p></li></ol></blockquote><h3 id="用synchronized还是Lock呢？"><a href="#用synchronized还是Lock呢？" class="headerlink" title="用synchronized还是Lock呢？"></a>用synchronized还是Lock呢？</h3><p>我们先看看他们的区别：</p><ul><li><p>synchronized是关键字，是JVM层面的底层啥都帮我们做了，而Lock是一个接口，是JDK层面的有丰富的API。</p></li><li><p>synchronized会自动释放锁，而Lock必须手动释放锁。</p></li><li><p>synchronized是不可中断的，Lock可以中断也可以不中断。</p></li><li><p>通过Lock可以知道线程有没有拿到锁，而synchronized不能。</p></li><li><p>synchronized能锁住方法和代码块，而Lock只能锁住代码块。</p></li><li><p>Lock可以使用读锁提高多线程读效率。</p></li><li><p>synchronized是非公平锁，ReentrantLock可以控制是否是公平锁。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 锁 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jaxb从xml读取特殊日期格式为null</title>
      <link href="2021/04/15/jaxb%E4%BB%8Exml%E8%AF%BB%E5%8F%96%E7%89%B9%E6%AE%8A%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E4%B8%BAnull/"/>
      <url>2021/04/15/jaxb%E4%BB%8Exml%E8%AF%BB%E5%8F%96%E7%89%B9%E6%AE%8A%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E4%B8%BAnull/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>解决jaxb从xml文件读取 yyyy-MM-dd HH:mm:ss字段数据返回null 的问题</strong></p></blockquote><h5 id="编写DateAdapter类，处理日期格式"><a href="#编写DateAdapter类，处理日期格式" class="headerlink" title="编写DateAdapter类，处理日期格式"></a>编写DateAdapter类，处理日期格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zsc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/30</span></span><br><span class="line"><span class="comment"> * jaxb从xml文件读取特殊格式日期（解决读取 yyyy-MM-dd HH:mm:ss返回null 的问题）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateAdapter</span> <span class="keyword">extends</span> <span class="title">XmlAdapter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 其中格式可以根据不同的输入来定义不同格式。</span></span><br><span class="line">    <span class="keyword">private</span> SimpleDateFormat yyyyMMddHHmmss = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">unmarshal</span><span class="params">(String v)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> yyyyMMddHHmmss.parse(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">marshal</span><span class="params">(Date v)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> yyyyMMddHHmmss.format(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在日期字段中添加注解：-XmlJavaTypeAdapter-DateAdapter-class"><a href="#在日期字段中添加注解：-XmlJavaTypeAdapter-DateAdapter-class" class="headerlink" title="在日期字段中添加注解：@XmlJavaTypeAdapter(DateAdapter.class)"></a>在日期字段中添加注解：@XmlJavaTypeAdapter(DateAdapter.class)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XmlElement(name = &quot;IssuedTime&quot;)</span></span><br><span class="line"><span class="meta">@XmlJavaTypeAdapter(DateAdapter.class)</span></span><br><span class="line"><span class="keyword">private</span> Date issuedTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@XmlElement(name = &quot;InsuranceDueDate&quot;)</span></span><br><span class="line"><span class="meta">@XmlJavaTypeAdapter(DateAdapter.class)</span></span><br><span class="line"><span class="keyword">private</span> Date insuranceDueDate;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 问题随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL创建用户</title>
      <link href="2021/04/12/MySQL%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/"/>
      <url>2021/04/12/MySQL%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>MySQL创建可读用户和指定数据库用户</strong></p><p><strong>必须在Root用户下创建</strong></p></blockquote><p>MySQL 赋予用户权限命令的简单格式可概括为：<br>grant 权限 on 数据库对象 to 用户</p><h5 id="创建数据库仅可读用户"><a href="#创建数据库仅可读用户" class="headerlink" title="创建数据库仅可读用户"></a>创建数据库仅可读用户</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># reader是用户名,xxxxxx为密码；<span class="keyword">GRANT</span>后面跟的是用户权限，用户名@后面跟的是可连接的ip地址，<span class="operator">%</span>表示任意ip都可登陆</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">Select</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> reader@&quot;%&quot;  IDENTIFIED <span class="keyword">BY</span> &quot;xxxxxx&quot;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h5 id="创建指定数据库用户"><a href="#创建指定数据库用户" class="headerlink" title="创建指定数据库用户"></a>创建指定数据库用户</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个用户xh_dev_user仅访问xh_dev这一个数据库。xxxxxx为密码，xh_dev_user为用户名</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,update,<span class="keyword">delete</span> <span class="keyword">ON</span> xh_dev.<span class="operator">*</span> <span class="keyword">TO</span> xh_dev_user@&quot;%&quot; IDENTIFIED <span class="keyword">BY</span> &quot;xxxxxx&quot;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 用户管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口号被占用</title>
      <link href="2021/04/10/%E7%AB%AF%E5%8F%A3%E5%8F%B7%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
      <url>2021/04/10/%E7%AB%AF%E5%8F%A3%E5%8F%B7%E8%A2%AB%E5%8D%A0%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>我们在启动本地项目的时候，经常出现项目端口被占用的情况。如下所示：</strong></p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605164110.png" alt="image-20210605164110092"></p><p>这个时候我们需要在本地结束这个端口占用的进程。</p><p><strong>过程如下：</strong></p><p><strong>第一步</strong>：运行windows的cmd.   查看端口被谁占用，占用者的进程号</p><p>cmd输入 <code>netstat  -ano|findstr  11006</code>回车，这里的11006指的是被占用端口，如果你的是其他比如8080，就把11006换成8080回车。我这里查询到是17508号进行</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605165635.png" alt="image-20210605165635768"></p><p><strong>第二步</strong>：kill掉该进程，释放端口。cmd输入<code>taskkill /pid 17508 /f</code> 回车，17508即占用该端口的进程号，如果你是其他就换掉，（注意进程号后面加空格）  执行完提示你：成功: 已终止 PID 为 17508 的进程。</p><p><strong>回到项目重新启动即可。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 问题随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap解析</title>
      <link href="2021/04/05/HashMap%E8%A7%A3%E6%9E%90/"/>
      <url>2021/04/05/HashMap%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="HashMap源码解析JDK1-8"><a href="#HashMap源码解析JDK1-8" class="headerlink" title="HashMap源码解析JDK1.8"></a>HashMap源码解析JDK1.8</h3><p>先看看hashMap在jdk      1.8的结构，用的是<strong>数组+链表+红黑树</strong>的结构，也叫哈希桶，在jdk 1.8之前都是数组+链表的结构，因为在链表的查询操作都是O(N)的时间复杂度，而且hashMap中查询操作也是占了很大比例的，如果当节点数量多，转换为红黑树结构，那么将会提高很大的效率，因为红黑树结构中，增删改查都是O(log n)。 </p><p>哈希桶就是数组里面的一个位置中所占所有数据，例如，下图中，绿色节点所占的该数组的位置，以及它连接的链表，整体为一个哈希桶。</p><h3 id="hashMap的属性"><a href="#hashMap的属性" class="headerlink" title="hashMap的属性"></a>hashMap的属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt;</span><br><span class="line">    implements Map&lt;K,V&gt;, Cloneable, Serializable &#123;</span><br><span class="line">    //序列号，序列化的时候使用。</span><br><span class="line">    private static final long serialVersionUID = 362498820763181265L;</span><br><span class="line">    /**默认容量，1向左移位4个，00000001变成00010000，也就是2的4次方为16，使用移位是因为移位是计算机基础运算，效率比加减乘除快。**/</span><br><span class="line">    static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;</span><br><span class="line">    //最大容量，2的30次方。</span><br><span class="line">    static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br><span class="line">    //加载因子，用于扩容使用。</span><br><span class="line">    static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class="line">    //当某个桶节点数量大于8时，会转换为红黑树。</span><br><span class="line">    static final int TREEIFY_THRESHOLD = 8;</span><br><span class="line">    //当某个桶节点数量小于6时，会转换为链表，前提是它当前是红黑树结构。</span><br><span class="line">    static final int UNTREEIFY_THRESHOLD = 6;</span><br><span class="line">    //当整个hashMap中元素数量大于64时，也会进行转为红黑树结构。</span><br><span class="line">    static final int MIN_TREEIFY_CAPACITY = 64;</span><br><span class="line">    //存储元素的数组，transient关键字表示该属性不能被序列化</span><br><span class="line">    transient Node&lt;K,V&gt;[] table;</span><br><span class="line">    //将数据转换成set的另一种存储形式，这个变量主要用于迭代功能。</span><br><span class="line">    transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line">    //元素数量</span><br><span class="line">    transient int size;</span><br><span class="line">    //统计该map修改的次数</span><br><span class="line">    transient int modCount;</span><br><span class="line">    //临界值，也就是元素数量达到临界值时，会进行扩容。</span><br><span class="line">    int threshold;</span><br><span class="line">    //也是加载因子，只不过这个是变量。</span><br><span class="line">    final float loadFactor;  </span><br></pre></td></tr></table></figure><p>  这里讲讲为什么默认容量大小为16，加载因子为0.75，主要原因是这两个常量的值都是经过大量的计算和统计得出来的最优解，仅仅是这样而已。</p><p>上面是hashMap的属性，尽量的解释给大家，下面再说说它里面的内部类，并不是所有的内部类，只说常用的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;  </span><br><span class="line">        TreeNode&lt;K,V&gt; left;</span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    </span><br><span class="line">        boolean red;</span><br><span class="line">        TreeNode(int hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            super(hash, key, val, next);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 使用静态内部类，是为了方便调用，而不用每次调用里面的属性或者方法都需要new一个对象。这是一个红黑树的结构，如果没有学过红黑树的同学，自己去看一下，内容太多，就不在这里阐述了。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        final int hash;</span><br><span class="line">        final K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"> </span><br><span class="line">        Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            this.hash = hash;</span><br><span class="line">            this.key = key;</span><br><span class="line">            this.value = value;</span><br><span class="line">            this.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 里面还包含了一个结点内部类，是一个单向链表。上面这两个内部类再加上之前的Node&lt;K,V&gt;[] table属性，组成了hashMap的结构，哈希桶。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>大致懂了hashMap的结构，我们来看看构造方法，一共有3个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public HashMap() &#123;</span><br><span class="line">    this.loadFactor = DEFAULT_LOAD_FACTOR; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">public HashMap(int initialCapacity) &#123;</span><br><span class="line">    this(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">public HashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class="line">    if (initialCapacity &lt; 0)</span><br><span class="line">        throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    if (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</span><br><span class="line">        throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    this.loadFactor = loadFactor;</span><br><span class="line">    this.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 第一个，空参构造，使用默认的加载因子0.75；第二个，设置初始容量，并使用默认的加载因子；第三个，设置初始容量和加载因子，其实第二个构造方法也是调用了第三个。下面，在看看最后一个构造函数。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> public HashMap(Map&lt;? extends K, ? extends V&gt; m) &#123;</span><br><span class="line">    this.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, false);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">final void putMapEntries(Map&lt;? extends K, ? extends V&gt; m, boolean evict) &#123;</span><br><span class="line">    //获取该map的实际长度</span><br><span class="line">    int s = m.size();</span><br><span class="line">    if (s &gt; 0) &#123;</span><br><span class="line">        //判断table是否初始化，如果没有初始化</span><br><span class="line">        if (table == null) &#123; // pre-size</span><br><span class="line">            /**求出需要的容量，因为实际使用的长度=容量*0.75得来的，+1是因为小数相除，基本都不会是整数，容量大小不能为小数的，后面转换为int，多余的小数就要被丢掉，所以+1，例如，map实际长度22，22/0.75=29.3,所需要的容量肯定为30，有人会问如果刚刚好除得整数呢，除得整数的话，容量大小多1也没什么影响**/</span><br><span class="line">            float ft = ((float)s / loadFactor) + 1.0F;</span><br><span class="line">            //判断该容量大小是否超出上限。</span><br><span class="line">            int t = ((ft &lt; (float)MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (int)ft : MAXIMUM_CAPACITY);</span><br><span class="line">            /**对临界值进行初始化，tableSizeFor(t)这个方法会返回大于t值的，且离其最近的2次幂，例如t为29，则返回的值是32**/</span><br><span class="line">            if (t &gt; threshold)</span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        //如果table已经初始化，则进行扩容操作，resize()就是扩容。</span><br><span class="line">        else if (s &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        //遍历，把map中的数据转到hashMap中。</span><br><span class="line">        for (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, false, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 该构造函数，传入一个Map，然后把该Map转为hashMap，resize方法在下面添加元素的时候会详细讲解，在上面中entrySet方法会返回一个Set&lt;Map.Entry&lt;K, V&gt;&gt;，泛型为Map的内部类Entry，它是一个存放key-value的实例，也就是Map中的每一个key-value就是一个Entry实例，为什么使用这个方式进行遍历，因为效率高，具体自己百度一波，putVal方法把取出来的每个key-value存入到hashMap中，待会会仔细讲解。</p><p> 构造函数和属性讲得差不多了，下面要讲解的是增删改查的操作以及常用的、重要的方法，毕竟里面的方法太多了，其它的就自己去看看吧。</p><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>   在讲解put方法之前，先看看hash方法，看怎么计算哈希值的。</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   static final int hash(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    /**先获取到key的hashCode，然后进行移位再进行异或运算，为什么这么复杂，不用想肯定是为了减少hash冲突**/</span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>下面来看看put方法。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">    public V put(K key, V value) &#123;</span><br><span class="line">    /**四个参数，第一个hash值，第四个参数表示如果该key存在值，如果为null的话，则插入新的value，最后一个参数，在hashMap中没有用，可以不用管，使用默认的即可**/</span><br><span class="line">    return putVal(hash(key), key, value, false, true);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">               boolean evict) &#123;</span><br><span class="line">    //tab 哈希数组，p 该哈希桶的首节点，n hashMap的长度，i 计算出的数组下标</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class="line">    //获取长度并进行扩容，使用的是懒加载，table一开始是没有加载的，等put后才开始加载</span><br><span class="line">    if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    /**如果计算出的该哈希桶的位置没有值，则把新插入的key-value放到此处，此处就算没有插入成功，也就是发生哈希冲突时也会把哈希桶的首节点赋予p**/</span><br><span class="line">    if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class="line">        tab[i] = newNode(hash, key, value, null);</span><br><span class="line">    //发生哈希冲突的几种情况</span><br><span class="line">    else &#123;</span><br><span class="line">        // e 临时节点的作用， k 存放该当前节点的key </span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        //第一种，插入的key-value的hash值，key都与当前节点的相等，e = p，则表示为首节点</span><br><span class="line">        if (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        //第二种，hash值不等于首节点，判断该p是否属于红黑树的节点</span><br><span class="line">        else if (p instanceof TreeNode)</span><br><span class="line">            /**为红黑树的节点，则在红黑树中进行添加，如果该节点已经存在，则返回该节点（不为null），该值很重要，用来判断put操作是否成功，如果添加成功返回null**/</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="line">        //第三种，hash值不等于首节点，不为红黑树的节点，则为链表的节点</span><br><span class="line">        else &#123;</span><br><span class="line">            //遍历该链表</span><br><span class="line">            for (int binCount = 0; ; ++binCount) &#123;</span><br><span class="line">                //如果找到尾部，则表明添加的key-value没有重复，在尾部进行添加</span><br><span class="line">                if ((e = p.next) == null) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, null);</span><br><span class="line">                    //判断是否要转换为红黑树结构</span><br><span class="line">                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) </span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                //如果链表中有重复的key，e则为当前重复的节点，结束循环</span><br><span class="line">                if (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                    break;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //有重复的key，则用待插入值进行覆盖，返回旧值。</span><br><span class="line">        if (e != null) &#123; </span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            if (!onlyIfAbsent || oldValue == null)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //到了此步骤，则表明待插入的key-value是没有key的重复，因为插入成功e节点的值为null</span><br><span class="line">    //修改次数+1</span><br><span class="line">    ++modCount;</span><br><span class="line">    //实际长度+1，判断是否大于临界值，大于则扩容</span><br><span class="line">    if (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    //添加成功</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><p>上面就是具体的元素添加，在元素添加里面涉及到扩容，我们来看看扩容方法resize。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    //把没插入之前的哈希数组做我诶oldTal</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    //old的长度</span><br><span class="line">    int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class="line">    //old的临界值</span><br><span class="line">    int oldThr = threshold;</span><br><span class="line">    //初始化new的长度和临界值</span><br><span class="line">    int newCap, newThr = 0;</span><br><span class="line">    //oldCap &gt; 0也就是说不是首次初始化，因为hashMap用的是懒加载</span><br><span class="line">    if (oldCap &gt; 0) &#123;</span><br><span class="line">        //大于最大值</span><br><span class="line">        if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            //临界值为整数的最大值</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            return oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        //标记##，其它情况，扩容两倍，并且扩容后的长度要小于最大值，old长度也要大于16</span><br><span class="line">        else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            //临界值也扩容为old的临界值2倍</span><br><span class="line">            newThr = oldThr &lt;&lt; 1; </span><br><span class="line">    &#125;</span><br><span class="line">    /**如果oldCap&lt;0，但是已经初始化了，像把元素删除完之后的情况，那么它的临界值肯定还存在，        </span><br><span class="line">       如果是首次初始化，它的临界值则为0</span><br><span class="line">    **/</span><br><span class="line">    else if (oldThr &gt; 0) </span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    //首次初始化，给与默认的值</span><br><span class="line">    else &#123;               </span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        //临界值等于容量*加载因子</span><br><span class="line">        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    //此处的if为上面标记##的补充，也就是初始化时容量小于默认值16的，此时newThr没有赋值</span><br><span class="line">    if (newThr == 0) &#123;</span><br><span class="line">        //new的临界值</span><br><span class="line">        float ft = (float)newCap * loadFactor;</span><br><span class="line">        //判断是否new容量是否大于最大值，临界值是否大于最大值</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (int)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    //把上面各种情况分析出的临界值，在此处真正进行改变，也就是容量和临界值都改变了。</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    //表示忽略该警告</span><br><span class="line">    @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class="line">        //初始化</span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">    //赋予当前的table</span><br><span class="line">    table = newTab;</span><br><span class="line">    //此处自然是把old中的元素，遍历到new中</span><br><span class="line">    if (oldTab != null) &#123;</span><br><span class="line">        for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            //临时变量</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            //当前哈希桶的位置值不为null，也就是数组下标处有值，因为有值表示可能会发生冲突</span><br><span class="line">            if ((e = oldTab[j]) != null) &#123;</span><br><span class="line">                //把已经赋值之后的变量置位null，当然是为了好回收，释放内存</span><br><span class="line">                oldTab[j] = null;</span><br><span class="line">                //如果下标处的节点没有下一个元素</span><br><span class="line">                if (e.next == null)</span><br><span class="line">                    //把该变量的值存入newCap中，e.hash &amp; (newCap - 1)并不等于j</span><br><span class="line">                    newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">                //该节点为红黑树结构，也就是存在哈希冲突，该哈希桶中有多个元素</span><br><span class="line">                else if (e instanceof TreeNode)</span><br><span class="line">                    //把此树进行转移到newCap中</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">                else &#123; /**此处表示为链表结构，同样把链表转移到newCap中，就是把链表遍历后，把值转过去，在置位null**/</span><br><span class="line">                    Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    do &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                            if (loTail == null)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            else</span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            if (hiTail == null)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            else</span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; while ((e = next) != null);</span><br><span class="line">                    if (loTail != null) &#123;</span><br><span class="line">                        loTail.next = null;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (hiTail != null) &#123;</span><br><span class="line">                        hiTail.next = null;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //返回扩容后的hashMap</span><br><span class="line">    return newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上部分内容就是整个扩容过程的操作，下面再来看看删除方法，remove。</p><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">public V remove(Object key) &#123;</span><br><span class="line">    //临时变量</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    /**调用removeNode(hash(key), key, null, false, true)进行删除，第三个value为null，表示，把key的节点直接都删除了，不需要用到值，如果设为值，则还需要去进行查找操作**/</span><br><span class="line">    return (e = removeNode(hash(key), key, null, false, true)) == null ?</span><br><span class="line">        null : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**第一参数为哈希值，第二个为key，第三个value，第四个为是为true的话，则表示删除它key对应的value，不删除key,第四个如果为false，则表示删除后，不移动节点**/</span><br><span class="line">final Node&lt;K,V&gt; removeNode(int hash, Object key, Object value,</span><br><span class="line">                           boolean matchValue, boolean movable) &#123;</span><br><span class="line">    //tab 哈希数组，p 数组下标的节点，n 长度，index 当前数组下标</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index;</span><br><span class="line">    //哈希数组不为null，且长度大于0，然后获得到要删除key的节点所在是数组下标位置</span><br><span class="line">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - 1) &amp; hash]) != null) &#123;</span><br><span class="line">        //nodee 存储要删除的节点，e 临时变量，k 当前节点的key，v 当前节点的value</span><br><span class="line">        Node&lt;K,V&gt; node = null, e; K k; V v;</span><br><span class="line">        //如果数组下标的节点正好是要删除的节点，把值赋给临时变量node</span><br><span class="line">        if (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">        //也就是要删除的节点，在链表或者红黑树上，先判断是否为红黑树的节点</span><br><span class="line">        else if ((e = p.next) != null) &#123;</span><br><span class="line">            if (p instanceof TreeNode)</span><br><span class="line">                //遍历红黑树，找到该节点并返回</span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">            else &#123; //表示为链表节点，一样的遍历找到该节点</span><br><span class="line">                do &#123;</span><br><span class="line">                    if (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != null &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node = e;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    /**注意，如果进入了链表中的遍历，那么此处的p不再是数组下标的节点，而是要删除结点的上一个结点**/</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; while ((e = e.next) != null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //找到要删除的节点后，判断!matchValue，我们正常的remove删除，!matchValue都为true</span><br><span class="line">        if (node != null &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != null &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            //如果删除的节点是红黑树结构，则去红黑树中删除</span><br><span class="line">            if (node instanceof TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable);</span><br><span class="line">            //如果是链表结构，且删除的节点为数组下标节点，也就是头结点，直接让下一个作为头</span><br><span class="line">            else if (node == p)</span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            else /**为链表结构，删除的节点在链表中，把要删除的下一个结点设为上一个结点的下一个节点**/</span><br><span class="line">                p.next = node.next;</span><br><span class="line">            //修改计数器</span><br><span class="line">            ++modCount;</span><br><span class="line">            //长度减一</span><br><span class="line">            --size;</span><br><span class="line">            /**此方法在hashMap中是为了让子类去实现，主要是对删除结点后的链表关系进行处理**/</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            //返回删除的节点</span><br><span class="line">            return node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //返回null则表示没有该节点，删除失败</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 删除还有clear方法，把所有的数组下标元素都置位null，下面在来看看较为简单的获取元素与修改元素操作。</p><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> public V get(Object key) &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    //也是调用getNode方法来完成的</span><br><span class="line">    return (e = getNode(hash(key), key)) == null ? null : e.value;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</span><br><span class="line">    //first 头结点，e 临时变量，n 长度,k key</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</span><br><span class="line">    //头结点也就是数组下标的节点</span><br><span class="line">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">        (first = tab[(n - 1) &amp; hash]) != null) &#123;</span><br><span class="line">        //如果是头结点，则直接返回头结点</span><br><span class="line">        if (first.hash == hash &amp;&amp; </span><br><span class="line">            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            return first;</span><br><span class="line">        //不是头结点</span><br><span class="line">        if ((e = first.next) != null) &#123;</span><br><span class="line">            //判断是否是红黑树结构</span><br><span class="line">            if (first instanceof TreeNode)</span><br><span class="line">                //去红黑树中找，然后返回</span><br><span class="line">                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            do &#123; //链表节点，一样遍历链表，找到该节点并返回</span><br><span class="line">                if (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                    return e;</span><br><span class="line">            &#125; while ((e = e.next) != null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //找不到，表示不存在该节点</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><ul><li>元素的修改也是put方法，因为key是唯一的，所以修改元素，是把新值覆盖旧值。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap</title>
      <link href="2021/04/02/HashMap/"/>
      <url>2021/04/02/HashMap/</url>
      
        <content type="html"><![CDATA[<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><h5 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h5><p>Hash表也称散列表，直译为哈希表，hash表是一种根据关键字值（key-value）而直接进行访问的数据结构。</p><p>在哈希表的键值对关系中，key到value中间还存在着一个映射值，这个映射值就是数组的下标index，key正是通过映射到数组对应的下标index而访问到value值的，通过一个映射函数f(key)映射到数组下标，这个函数我们称之为哈希函数</p><h5 id="Hash冲突"><a href="#Hash冲突" class="headerlink" title="Hash冲突"></a>Hash冲突</h5><p>哈希表中，每个key通过哈希函数的计算都会得到一个唯一的index，但并不是每个index都对应一个唯一的key，就是说可能有两个以上的key映射到同一个index，这就产生了<strong>哈希冲突</strong>的问题</p><p>一个好的hash算法，应该是尽量避免不同的key映射出相同的index，这样才能减少哈希冲突的出现。比如在HashMap中解决哈希冲突采用的是<strong>拉链法</strong>，这种方法把冲突于某个数组下标的数据都保存到对应数组单元中一个链表中，如下图所示，这种数据结构中数组单元保存不是单一的数值，而是一个链表。按照这种方式，如果哈希冲突越多，可能造成数组的利用率就越低，因为有些数组单元可能被闲置，而数组单元上的链表可能会越大，这势必影响到Map的性能，所以尽可能地避免哈希冲突很重要<br>                                 <img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210531133359.png" alt="img"></p><h5 id="常见的hash算法"><a href="#常见的hash算法" class="headerlink" title="常见的hash算法"></a>常见的hash算法</h5><p>a. 直接定址法：直接以关键字k或者k加上某个常数（k+c）作为哈希地址（H(k)=ak+b）。</p><p>b. 数字分析法：提取关键字中取值比较均匀的数字作为哈希地址（如一组出生日期，相较于年-月，月-日的差别要大得多，可以降低冲突概率）</p><p>c. 分段叠加法：按照哈希表地址位数将关键字分成位数相等的几部分，其中最后一部分可以比较短。然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。</p><p>d. 平方取中法：如果关键字各个部分分布都不均匀的话，可以先求出它的平方值，然后按照需求取中间的几位作为哈希地址。</p><p>e. 伪随机数法：选择一随机函数，取关键字的随机值作为散列地址，通常用于关键字长度不同的场合。</p><p>f. 除留余数法：用关键字k除以某个不大于哈希表长度m的数p，将所得余数作为哈希表地址（H(k)=k%p, p&lt;=m; p一般取m或素数）。</p><h5 id="解决hash冲突"><a href="#解决hash冲突" class="headerlink" title="解决hash冲突"></a>解决hash冲突</h5><p><strong>开放定址法</strong>： </p><p>所谓的开放定址法就是一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入<br>公式为：fi(key) = (f(key)+di) MOD m (di=1,2,3,……,m-1) </p><p>当冲突发生时，使用某种探测技术在散列表中形成一个探测序列。沿此序列逐个单元地查找，直到找到给定的关键字，或者<br>碰到一个开放的地址（即该地址单元为空）为止（若要插入，在探查到开放的地址，则可将待插入的新结点存人该地址单元）。查找时探测到开放的地址则表明表中无待查的关键字，即查找失败。</p><p><strong>再哈希法</strong>：</p><p>再哈希法又叫双哈希法，有多个不同的Hash函数，当发生冲突时，使用第二个，第三个，….，等哈希函数<br>计算地址，直到无冲突。虽然不易发生聚集，但是增加了计算时间。</p><p><strong>链地址法</strong>：</p><p>链地址法的基本思想是：每个哈希表节点都有一个next指针，多个哈希表节点可以用next指针构成一个单向链表，被分配到同一个索引上的多个节点可以用这个单向 链表连接起来，如：<br>键值对k2, v2与键值对k1, v1通过计算后的索引值都为2，这时及产生冲突，但是可以通道next指针将k2, k1所在的节点连接起来，这样就解决了哈希的冲突问题 </p><p><strong>建立公共溢出区</strong>：</p><p>这种方法的基本思想是：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表</p><h4 id="计算符号"><a href="#计算符号" class="headerlink" title="计算符号"></a>计算符号</h4><blockquote><ul><li>&lt;&lt; : 左移运算符，num &lt;&lt; 1,相当于num乘以2 低位补0</li><li><strong>&gt;&gt;</strong>: 右移运算符</li><li><strong>&gt;&gt;&gt;</strong> : 无符号右移，忽略符号位，空位都以0补齐</li><li>^ : 位异或 第一个操作数的的第n位于第二个操作数的第n位相反，那么结果的第n为也为1，否则为0 <code>(1^1=0 1^0=1 0^0=0)</code></li><li>&amp; : 与运算 第一个操作数的的第n位于第二个操作数的第n位如果都是1，那么结果的第n为也为1，否则为0<code>(1&amp;1=1 1&amp;0=0 0&amp;0=0)</code></li><li>| : 或运算 第一个操作数的的第n位于第二个操作数的第n位 只要有一个是1，那么结果的第n为也为1，否则为0<code>(1|1=1 1|0=1 0|0=0)</code></li><li>~ : 非运算 操作数的第n位为1，那么结果的第n位为0，反之，也就是取反运算(一元操作符：只操作一个数)<code>( ~1=0 ~0=1)</code></li></ul></blockquote><h3 id="正文HashMap"><a href="#正文HashMap" class="headerlink" title="正文HashMap"></a>正文HashMap</h3><h4 id="组成结构"><a href="#组成结构" class="headerlink" title="组成结构"></a>组成结构</h4><p>HashMap是我们非常常用的数据结构，由<strong>数组和链表组合构成</strong>的数据</p><p>大概如下，数组里面每个地方都存了Key-Value这样的实例，在Java7叫Entry在Java8中叫Node。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210531141114.jpeg" alt="img"></p><p>因为他本身所有的位置都为null，在put插入的时候会根据key的hash值去计算一个index值。</p><p>因为他本身所有的位置都为null，在put插入的时候会根据key的hash值去计算一个index值。</p><p>就比如我put（”张三“，3），我插入了为”帅丙“的元素，这个时候我们会通过哈希函数计算出插入的位置，计算出来index是2那结果如下。  index =  index(hash(“张三”))= 2</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210602161537.png" alt="image-20210602161537043"></p><p>我们都知道数组长度是有限的，在有限的长度里面我们使用哈希，哈希本身就存在概率性，就是”张三“和”李四“我们都去hash有一定的概率会一样，就像上面的情况我再次哈希”李四“极端情况也会hash到一个值上，那就形成了链表。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210602161620.png" alt="image-20210602161620487"></p><p>每一个节点都会保存自身的hash、key、value、以及下个节点，我看看Node的源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line">..........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h4><p>index的获取很简单，就是把h对 length-1取模，其中length为数组长度，所以关键的是h是怎么计算得到的，也很简单</p><p>就是通过 h = (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)得到的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//获取index的方法，1.7源码，1.8中用tab[(n - 1) &amp; hash]代替，但原理一样</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="容量为什么是2的幂次方"><a href="#容量为什么是2的幂次方" class="headerlink" title="容量为什么是2的幂次方"></a>容量为什么是2的幂次方</h4><p>2的幂次方是指数组长度length的大小，假如length等于2的幂次方，那样length-1的二进制数据的低位就全部为1了，比如当数组长度为16，那么15的二进制就为1111，只有这样，在计算数组下标index的时候才能更好地利用h的散列性，举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">比如 length-<span class="number">1</span>=<span class="number">15</span>，二进制即为<span class="number">1111</span>，分别跟三个不同的h值进行与运算，计算如下</span><br><span class="line"></span><br><span class="line"><span class="number">1111</span> &amp; <span class="number">101010100101001001000</span> 结果：<span class="number">1000</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="number">1111</span> &amp; <span class="number">101000101101001001001</span> 结果：<span class="number">1001</span> = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="number">1111</span> &amp; <span class="number">101010101101101001010</span> 结果：<span class="number">1010</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="number">1111</span> &amp; <span class="number">101100100111001101100</span> 结果： <span class="number">1100</span> = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">但是如果length为<span class="number">11</span>的话，那么length-<span class="number">1</span>的二进制则表示为<span class="number">1010</span>，与同样的三个h值与运算，计算如下</span><br><span class="line"></span><br><span class="line"><span class="number">1010</span> &amp; <span class="number">101010100101001001000</span> 结果：<span class="number">1000</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="number">1010</span> &amp; <span class="number">101000101101001001001</span> 结果：<span class="number">1000</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="number">1010</span> &amp; <span class="number">101010101101101001010</span> 结果：<span class="number">1010</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="number">1010</span> &amp; <span class="number">101100100111001101100</span> 结果： <span class="number">1000</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">很明显，当数组长度为<span class="number">16</span>的时候，没有产生哈希冲突，而为<span class="number">11</span>的时候，产生了<span class="number">3</span>次哈希冲突，所以这就说明了为什么HashMap的容量建议为<span class="number">2</span>的幂次方</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="put方法流程"><a href="#put方法流程" class="headerlink" title="put方法流程"></a>put方法流程</h4><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210531152803.png" alt="在这里插入图片描述" style="zoom:80%;" /><ol><li>判断数组是否为空，<strong>为空进行初始化</strong>;   懒加载，只有真正存值的时候才会创建数组</li><li>不为空，计算 k 的 hash 值，通过(n - 1) &amp; hash计算应当存放在数组中的<strong>下标 index</strong>;</li><li>查看 table[index] 是否存在数据，<strong>没有数据就构造一个Node节点存放在 table[index] 中</strong>；</li><li>存在数据，说明发生了hash冲突(存在二个节点key的hash值一样), 继续判断key是否相等，相等，用新的value替换原数据(onlyIfAbsent为false)；</li><li>如果不相等，判断当前节点类型是不是树型节点，如果是树型节点，创造树型节点插入红黑树中；(如果当前节点是树型节点证明当前已经是红黑树了)</li><li>如果不是树型节点，创建普通Node加入链表中；判断链表长度是否大于 8并且数组长度大于64， 大于的话链表转换为红黑树；</li><li>插入完成之后判断当前节点数是否大于阈值，如果大于开始扩容为原数组的二倍。</li></ol><h4 id="get方法流程"><a href="#get方法流程" class="headerlink" title="get方法流程"></a>get方法流程</h4><ol><li>调用key的hashcode方法，得到一个hashcode，通过hashcode计算下标index定位到map中<strong>数组对应的下标</strong>，就是定位到HashMap中的具体的某一个桶。</li><li>判断这个桶是否为空，如果是，就结束判断，返回null；如果不是空，就转到第三步。</li><li>判断桶中对象的key值与传入的key值是否相等并且用<strong>equals方法</strong>判断他们是否为同一个对象，如果判断结果为真，就返回这个对象的value值；如果为假，就转到第四步。</li><li>判断这个对象它指向下一个<strong>对象的next指针</strong>的是不是为空，如果是空，就结束判断，返回null；如果next指针不是空，就取出它所指对象，重复上面第三步的判断操作，直到取出对应的value值，或者直到桶中的对象被遍历完，返回一个null值。</li></ol><h4 id="插入链表方式"><a href="#插入链表方式" class="headerlink" title="插入链表方式"></a>插入链表方式</h4><p><strong>java8之前是头插法</strong>，就是说新来的值会取代原有的值，原有的值就顺推到链表中去，就像上面的例子一样，因为写这个代码的作者认为后来的值被查找的可能性更大一点，提升查找的效率。</p><h4 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h4><p>有两个因素：</p><ul><li>Capacity：HashMap当前长度。</li><li>LoadFactor：负载因子，默认值0.75f</li></ul><p>当HashMap的当前长度达到总长度的0.75。触发扩容。扩容时，新建一个空HashMap，长度为原Map的2倍，然后对数据重新Hash,存入新的Map</p><h4 id="头插法造成的问题"><a href="#头插法造成的问题" class="headerlink" title="头插法造成的问题"></a>头插法造成的问题</h4><p>我们要在容量为2的容器里面<strong>用不同线程</strong>插入A，B，C，假如我们在resize之前打个短点，那意味着数据都插入了但是还没resize那扩容前可能是这样的。</p><p>我们可以看到链表的指向A-&gt;B-&gt;C</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210531143256.jpeg" alt="img"></p><p>因为resize的赋值方式，也就是使用了<strong>单链表的头插入方式，同一位置上新元素总会被放在链表的头部位置</strong>，在旧数组中同一条Entry链上的元素，通过重新计算索引位置后，有可能被放到了新数组的不同位置上。</p><p>就可能出现下面的情况，大家发现问题没有？</p><p>B的下一个指针指向了A</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210531143332.jpeg" alt="img"></p><p>一旦几个线程都调整完成，就可能出现环形链表</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210531143339.jpeg" alt="img"></p><h4 id="JDK1-8尾插法"><a href="#JDK1-8尾插法" class="headerlink" title="JDK1.8尾插法"></a>JDK1.8尾插法</h4><p>因为<strong>java8之后链表有红黑树</strong>的部分，大家可以看到代码已经多了很多if else的逻辑判断了，红黑树的引入巧妙的将原本O(n)的时间复杂度降低到了O(logn)。</p><blockquote><p>JDK1.8中，当链表的长度大于8，数组长度大于等于 64,这个链表就会进化为红黑树。当红黑树的个数小于6，就会退化为链表</p><p>当hash冲突很多的时候，红黑树查询效率比链表要高</p></blockquote><p><strong>使用头插</strong>会改变链表的上的顺序，但是如果<strong>使用尾插</strong>，在扩容时会保持链表元素原本的顺序，就不会出现链表成环的问题了。</p><p>就是说原本是A-&gt;B，在扩容后那个链表还是A-&gt;B</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210531143710.jpeg" alt="img"></p><p>Java7在多线程操作HashMap时可能引起死循环，原因是扩容转移后前后链表顺序倒置，在转移过程中修改了原来链表中节点的引用关系。</p><p>Java8在同样的前提下并不会引起死循环，原因是扩容转移后前后链表顺序不变，保持之前节点的引用关系。</p><p>我认为即使不会出现死循环，但是通过源码看到put/get方法都没有加同步锁，多线程情况最容易出现的就是：无法保证上一秒put的值，下一秒get的时候还是原值，所以线程安全还是无法保证。</p><h3 id="HashMap总结"><a href="#HashMap总结" class="headerlink" title="HashMap总结"></a>HashMap总结</h3><blockquote><ul><li><strong>组成结构</strong>：本质是一个哈希表，JDK1.7是数组加链表，JDK1.8是数组+链表+红黑树，当时链表长度&gt;8并且数组长度&gt;64的时候链表进化成树，目的是保证查询效率。JDK1.7是头插法，1.8是尾插法。头插法扩容容易造成死循环</li><li><strong>index的下标计算</strong>：先根据hash函数计算出hashcode，在对数组长度大小-1取模，目的是让index更加的散列</li><li><strong>长度为什么是二次幂</strong>：也是为了让index更加的散列。因为计算index是根据len-1进行取模。</li><li><strong>put方法</strong>：如果是hashmap为空，第一次进行初始化。根据key计算出来index,构建一个Note节点放入数组中，如果该节点有值，说说明产生了hash冲突，判断key是否相等，相等则替换。不等则判断该节点是树还是链表，加入进对应的树或者链表，判断需不需要扩容操作。</li><li><strong>get方法</strong>：判断是否为空，为空直接返回null，根据key计算到index，若index没有Note，则返回null，若存在节点， equals判断是否相等，相等返回该值，不等则遍历该节点下的树或者链表。</li><li><strong>扩容</strong>：负载因子0.75，超过这个阈值则扩容，长度翻倍。里面的数据，重新hash存值。</li></ul></blockquote><h4 id="HashMap线程安全问题"><a href="#HashMap线程安全问题" class="headerlink" title="HashMap线程安全问题"></a>HashMap线程安全问题</h4><p>在并发的情况下，我们一般都会使用<strong>HashTable</strong>或者<strong>ConcurrentHashMap</strong>，但是因为前者的<strong>并发度</strong>的原因基本上没啥使用场景了，所以存在线程不安全的场景我们都使用的是ConcurrentHashMap。</p><p>HashTable实现安全很简单，直接get/put加锁</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210531144134.jpeg" alt="img"></p><h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><p><strong>HashTable和HashMap的区别</strong></p><p><strong>Hashtable 是不允许键或值为 null 的，HashMap 的键值则都可以为 null。</strong></p><p><strong>实现方式不同</strong>：Hashtable 继承了 Dictionary类，而 HashMap 继承的是 AbstractMap 类。</p><p><strong>初始化容量不同</strong>：HashMap 的初始容量为：16，Hashtable 初始容量为：11，两者的负载因子默认都是：0.75。</p><p><strong>扩容机制不同</strong>：当现有容量大于总容量 * 负载因子时，HashMap 扩容规则为当前容量翻倍，Hashtable 扩容规则为当前容量翻倍 + 1。</p><p><strong>迭代器不同</strong>：HashMap 中的 Iterator 迭代器是 fail-fast 的，而 Hashtable 的 Enumerator 不是 fail-fast 的。</p><p>所以，当其他线程改变了HashMap 的结构，如：增加、删除元素，将会抛出ConcurrentModificationException 异常，而 Hashtable 则不会。</p><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>ConcurrentHashMap 底层是基于 <code>数组 + 链表</code> 组成的，不过在 jdk1.7 和 1.8 中具体实现稍有不同。</p><h4 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h4><p>先说一下他在1.7中的数据结构吧：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210531144833.jpeg" alt="img"></p><p>如图所示，是由 Segment 数组、HashEntry 组成，和 HashMap 一样，仍然是<strong>数组加链表</strong>。</p><p>Segment 是 ConcurrentHashMap 的一个内部类</p><p>HashEntry跟HashMap差不多的，但是不同点是，他使用volatile去修饰了他的数据Value还有下一个节点next。</p><h5 id="关于分段锁"><a href="#关于分段锁" class="headerlink" title="关于分段锁"></a>关于分段锁</h5><p>分段Segment继承了重入锁ReentrantLock，有了锁的功能，每个锁控制的是一段，当每个Segment越来越大时，锁的粒度就变得有些大了。</p><ul><li>分段锁的优势在于保证在操作不同段 map 的时候可以并发执行，操作同段 map 的时候，进行锁的竞争和等待。这相对于直接对整个map同步synchronized是有优势的。</li><li>理论上 ConcurrentHashMap 支持 CurrencyLevel (Segment 数组数量)的线程并发。Segment 指定大小就是不可变的，默认是16。 </li></ul><h4 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h4><p>抛弃了原有的 Segment 分段锁，而采用了 <code>CAS + synchronized</code> 来保证并发安全性。</p><p>跟HashMap很像，也把之前的HashEntry改成了Node，但是作用不变，把值和next采用了volatile去修饰，保证了可见性，并且也引入了红黑树，在链表大于一定值的时候会转换（默认是8）。</p><p><strong>put操作</strong></p><p>ConcurrentHashMap在进行put操作的还是比较复杂的，大致可以分为以下步骤：</p><ol><li>根据 key 计算出 hashcode 。</li><li>判断是否需要进行初始化。</li><li>即为当前 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功。</li><li>如果当前位置的 hashcode == MOVED == -1,则需要进行扩容。</li><li>如果都不满足，则利用 synchronized 锁写入数据。</li><li>如果数量大于 TREEIFY_THRESHOLD 则要转换为红黑树。</li></ol><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210531151634.jpeg"></p><p><strong>get操作</strong></p><ul><li>根据计算出来的 hashcode 寻址，如果就在桶上那么直接返回值。</li><li>如果是红黑树那就按照树的方式获取值。</li><li>就不满足那就按照链表的方式遍历获取值。</li></ul><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210531151720.jpeg" alt="img"></p><h4 id="为什么放弃了分段锁"><a href="#为什么放弃了分段锁" class="headerlink" title="为什么放弃了分段锁"></a>为什么放弃了分段锁</h4><p>缺点在于分成很多段时会比较**浪费内存空间(**不连续，碎片化); 操作map时竞争同一个分段锁的概率非常小时，分段锁反而会造成更新等操作的长时间等待; <strong>当某个段很大时，分段锁的性能会下降</strong>。</p><h4 id="为什么不用ReentrantLock而用synchronized"><a href="#为什么不用ReentrantLock而用synchronized" class="headerlink" title="为什么不用ReentrantLock而用synchronized ?"></a>为什么不用ReentrantLock而用synchronized ?</h4><ul><li>减少内存开销:如果使用ReentrantLock则需要节点继承AQS来获得同步支持，增加内存开销，而1.8中只有头节点需要进行同步。</li><li>内部优化:synchronized则是JVM直接支持的，JVM能够在运行时作出相应的优化措施：锁粗化、锁消除、锁自旋等等。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1.8 在 1.7 的数据结构上做了大的改动，采用红黑树之后可以保证查询效率（<code>O(logn)</code>），甚至取消了 ReentrantLock 改为了 synchronized，这样可以看出在新版的 JDK 中对 synchronized 优化是很到位的。</p><p>jdk8 放弃了分段锁而是用了Node锁，减低锁的粒度，提高性能，并使用CAS操作来确保Node的一些操作的原子性，取代了锁。</p><blockquote><p>参考文章：<a href="https://my.oschina.net/pingpangkuangmo/blog/817973">https://my.oschina.net/pingpangkuangmo/blog/817973</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="2021/04/01/%E5%8F%8D%E5%B0%84/"/>
      <url>2021/04/01/%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h4 id="如何通过反射创建对象"><a href="#如何通过反射创建对象" class="headerlink" title="如何通过反射创建对象"></a>如何通过反射创建对象</h4><p>简单的说，反射机制就是在程序的运行过程中被允许对程序本身进行操作，比如<strong>自我检查</strong>，<strong>进行装载</strong>，还可以<strong>获取类本身</strong>，类的所有成员变量和方法，类的对象，还可以在运行过程中动态的创建<strong>类的实例</strong>，通过实例来调用类的方法，这就是反射机制一个比较重要的功能了。那么要通过程序来理解反射机制，首先要理解类的加载过程</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210531171052.png"></p><p>在Java程序执行的时候，要经历三个步骤：加载、连接和初始化。首先程序要加载到JVM的方法区中，然后进行连接，最后初始化。这里就主要介绍一下类的加载。如上图，首先，JVM会从硬盘中读取Java源文件并将其加载到方法区中同时生成<strong>类名.class</strong>文件，也就是类对象，这个类对象中包含了我们创建类的实例时所需要的模板信息，也就是源代码中的成员变量和方法等。Class本身也是一个类，它的主要功能之一就是生成类加载时的class文件，为类的初始化及实例化做准备。而我们在程序中通过关键字new创建的对象创建的是<strong>类的对象</strong>，而不是类对象，二者的区别如图中所示。</p><h4 id="反射的作用和意义"><a href="#反射的作用和意义" class="headerlink" title="反射的作用和意义"></a>反射的作用和意义</h4><p>1、<strong>反射的应用场合</strong>：在编译时根本无法知道该对象或类可能属于哪些类，程序只依靠运行时信息来发现该对象和类的真实信息.</p><p>2、反射的作用：通过反射可以使程序代码访问装载到JVM 中的类的内部信息</p><p>获取已装载类的成员变量信息</p><p>获取已装载类的方法</p><p>获取已装载类的构造方法信息</p><p>利用反射机制可以获取类对象（也就是我们前面介绍的类对象，获取类对象之后我们便获取了类的模板，可以对类进行一些操作），有以下三种方法：</p><p>1.类名.class()</p><p>2.对象名.getClass()</p><p>3.Class.forName(具体的类名)</p><p><strong>用反射创建一个对象：</strong></p><p><img src="https://img-blog.csdn.net/20180729102433305?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MjA5MzYx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 示例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class clz = Class.forName(<span class="string">&quot;cn.itcast_01.User&quot;</span>);</span><br><span class="line">Object obj = clz.newInstance(); <span class="comment">// 创建一个对象 </span></span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>反射机制在我们所学习的框架中有很大的应用，而在我们实际开发中用的并不多</strong></p><blockquote><p> IOC运用反射机制和工厂模式的概念</p><p> 在传统的开发过程中，对象是程序使用使用new创建出来的；但是在spring中是通过IOC容器创建，再推送给调用者。</p></blockquote><h5 id="Spring-中的反射"><a href="#Spring-中的反射" class="headerlink" title="Spring 中的反射:"></a>Spring 中的反射:</h5><ol><li>创建 Bean 实例时的反射：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过类加载器，根据 class 路径，得到其类对象</span></span><br><span class="line">Class&lt;?&gt; clz = Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;org.deppwang.litespring.v1.service.PetStoreService&quot;</span>);</span><br><span class="line"><span class="comment">// 根据类对象生成 Bean 实例</span></span><br><span class="line"><span class="keyword">return</span> clz.newInstance();</span><br></pre></td></tr></table></figure><ol start="2"><li>构造方法依赖注入时的反射：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射获取当前类所有的构造方法信息（Constructor 对象）</span></span><br><span class="line">Constructor&lt;?&gt;[] candidates = beanClass.getDeclaredConstructors();</span><br><span class="line"><span class="comment">// 设置构造方法参数实例</span></span><br><span class="line">Object[] argsToUse = <span class="keyword">new</span> Object[parameterTypes.length];</span><br><span class="line">argsToUse[i] = getBean(beanNames.get(i));</span><br><span class="line"><span class="comment">// 使用带有参数的 Constructor 对象实现实例化 Bean。此时使用反射跟上面一样（newInstance0），只是多了参数</span></span><br><span class="line"><span class="keyword">return</span> constructorToUse.newInstance(argsToUse);</span><br></pre></td></tr></table></figure><ol start="3"><li>setter() 方法依赖注入时的反射</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射获取当前类所有的方法信息（Method 对象）</span></span><br><span class="line">Method[] methods = bean.getClass().getDeclaredMethods();</span><br><span class="line"><span class="comment">// 获得方法参数实例</span></span><br><span class="line">Object propertyBean = getBean(propertyName);</span><br><span class="line"><span class="comment">// 通过反射执行调用 setter() 方法。invoke：调用方法，propertyBean 作为方法的参数</span></span><br><span class="line">method.invoke(bean, propertyBean);</span><br></pre></td></tr></table></figure><ol start="4"><li>@Autowired 依赖注入时的反射</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射得到当前类所有的字段信息（Field 对象）</span></span><br><span class="line">Field[] fields = bean.getClass().getDeclaredFields();</span><br><span class="line"><span class="comment">// 判断字段是否有 @Autowired 注解</span></span><br><span class="line">Annotation ann = field.getAnnotation(Autowired.class);</span><br><span class="line"><span class="comment">// 设置字段可连接，相当于将非 public（private、default、protect）更改为 public</span></span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 通过反射设置字段的值</span></span><br><span class="line">field.set(bean, getBean(field.getName()));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中show profile详解</title>
      <link href="2021/03/30/MySQL%E4%B8%ADshow-profile%E8%AF%A6%E8%A7%A3/"/>
      <url>2021/03/30/MySQL%E4%B8%ADshow-profile%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当我们在优化sql的时候可以使用explain来查看执行计划，可当根据执行计划优化完毕之后我们的sql的运行时间还是比较长，这时我们可以使用show profile更细粒度的分析，show-profile，可以提高用来分析当前会话中语句执行的资源消耗情况,可以用于sql调优的测量.</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/show-profile.html">Show Profile官方文档地址</a></p></blockquote><h4 id="1-基本语法："><a href="#1-基本语法：" class="headerlink" title="1.  基本语法："></a>1.  基本语法：</h4><ul><li><p>查看是否开启：<code>show variables like &quot;%pro%&quot;;</code>   </p></li><li><p>开启：<code>set profiling = 1</code></p></li><li><p>查看SQL执行时间：<code>show profiles;</code></p></li><li><p>查看记录中第一条SQL详细时间：<code>show profile for query 1;</code></p></li></ul><blockquote><h5 id="关于show-Profile的基本用法请看上篇文章：通过Query-Profiler查看MySQL语句运行时间"><a href="#关于show-Profile的基本用法请看上篇文章：通过Query-Profiler查看MySQL语句运行时间" class="headerlink" title="关于show Profile的基本用法请看上篇文章：通过Query Profiler查看MySQL语句运行时间"></a>关于show Profile的基本用法请看上篇文章：<a href="https://blog.csdn.net/qq_44161695/article/details/115130418">通过Query Profiler查看MySQL语句运行时间</a></h5></blockquote><h4 id="2-通过type指定显示其他信息"><a href="#2-通过type指定显示其他信息" class="headerlink" title="2. 通过type指定显示其他信息"></a>2. 通过type指定显示其他信息</h4><p>我们看一下官方提供的profile语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> PROFILE [type [, type] ... ]</span><br><span class="line">    [<span class="keyword">FOR</span> QUERY n]</span><br><span class="line">    [LIMIT row_count [<span class="keyword">OFFSET</span> <span class="keyword">offset</span>]]</span><br><span class="line"></span><br><span class="line">type: &#123;</span><br><span class="line">    <span class="keyword">ALL</span>                显示所有信息</span><br><span class="line">  <span class="operator">|</span> BLOCK IO           显示块输入和输出操作的数量</span><br><span class="line">  <span class="operator">|</span> CONTEXT SWITCHES   显示自愿上下文切换和非自愿上下文切换的数量</span><br><span class="line">  <span class="operator">|</span> CPU                显示用户和系统的CPU使用时间</span><br><span class="line">  <span class="operator">|</span> IPC                显示已发送和已接收消息（messages）的数量</span><br><span class="line">  <span class="operator">|</span> MEMORY             <span class="comment">-- 尚未生效</span></span><br><span class="line">  <span class="operator">|</span> PAGE FAULTS        显示主要和次要页面错误的数量</span><br><span class="line">  <span class="operator">|</span> SOURCE             显示源代码中函数名称以及该函数所在文件的名称和行号</span><br><span class="line">  <span class="operator">|</span> SWAPS              显示SWAP数量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-show-profile返回的行和列"><a href="#3-show-profile返回的行和列" class="headerlink" title="3. show profile返回的行和列"></a>3. show profile返回的行和列</h4><p>如下图所示，是执行一个<code>show profile all for query 3;</code>命令显示的结果集。我们根据行和列分别来分析一个每个字段的含义。<br><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210606110439.png" alt="在这里插入图片描述"></p><h5 id="行字段的含义："><a href="#行字段的含义：" class="headerlink" title="行字段的含义："></a>行字段的含义：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+------+-----+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field               <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>  <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+------+-----+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> QUERY_ID            <span class="operator">|</span> <span class="type">int</span>(<span class="number">20</span>)      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>        <span class="operator">|</span>       <span class="operator">|</span> # 语句ID</span><br><span class="line"><span class="operator">|</span> STATE               <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span>          <span class="operator">|</span>       <span class="operator">|</span> # 状态</span><br><span class="line"><span class="operator">|</span> DURATION            <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">9</span>,<span class="number">6</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0.000000</span> <span class="operator">|</span>       <span class="operator">|</span> # 持续时间，单位s</span><br><span class="line"><span class="operator">|</span> CPU_USER            <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">9</span>,<span class="number">6</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 用户态CPU时间，单位s</span><br><span class="line"><span class="operator">|</span> CPU_SYSTEM          <span class="operator">|</span> <span class="type">decimal</span>(<span class="number">9</span>,<span class="number">6</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 系统态CPU时间，单位s</span><br><span class="line"><span class="operator">|</span> CONTEXT_VOLUNTARY   <span class="operator">|</span> <span class="type">int</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 自愿上下文切换次数</span><br><span class="line"><span class="operator">|</span> CONTEXT_INVOLUNTARY <span class="operator">|</span> <span class="type">int</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 非自愿上下文切换次数</span><br><span class="line"><span class="operator">|</span> BLOCK_OPS_IN        <span class="operator">|</span> <span class="type">int</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 块输入次数</span><br><span class="line"><span class="operator">|</span> BLOCK_OPS_OUT       <span class="operator">|</span> <span class="type">int</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 块输出次数</span><br><span class="line"><span class="operator">|</span> MESSAGES_SENT       <span class="operator">|</span> <span class="type">int</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 发送的消息数量</span><br><span class="line"><span class="operator">|</span> MESSAGES_RECEIVED   <span class="operator">|</span> <span class="type">int</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 接收的消息数量</span><br><span class="line"><span class="operator">|</span> PAGE_FAULTS_MAJOR   <span class="operator">|</span> <span class="type">int</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 主要页面错误数量</span><br><span class="line"><span class="operator">|</span> PAGE_FAULTS_MINOR   <span class="operator">|</span> <span class="type">int</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 次要页面错误数量</span><br><span class="line"><span class="operator">|</span> SWAPS               <span class="operator">|</span> <span class="type">int</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 交换次数</span><br><span class="line"><span class="operator">|</span> SOURCE_FUNCTION     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 源代码函数</span><br><span class="line"><span class="operator">|</span> SOURCE_FILE         <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 源代码文件</span><br><span class="line"><span class="operator">|</span> SOURCE_LINE         <span class="operator">|</span> <span class="type">int</span>(<span class="number">20</span>)      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>       <span class="operator">|</span> # 源代码行数</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+--------------+------+-----+----------+-------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="列字段的含义："><a href="#列字段的含义：" class="headerlink" title="列字段的含义："></a>列字段的含义：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">*</span> Sending data (最重要的一个过程★★★★★)</span><br><span class="line">  线程正在读取和处理一条<span class="keyword">SELECT</span>语句的行，并且将数据发送至客户端。由于在此期间会执行大量   的磁盘访问（读操作），</span><br><span class="line">  这个状态在一个指定查询的生命周期中经常是耗时最长的。</span><br><span class="line">  这个字段才是<span class="keyword">SQL</span>真正运行采集<span class="operator">+</span>相应数据的时间，而非executing；</span><br><span class="line">  </span><br><span class="line">  <span class="comment">--以下按照首字母顺序依次排序</span></span><br><span class="line">  </span><br><span class="line"><span class="operator">*</span> After <span class="keyword">create</span></span><br><span class="line">  这个状态当线程创建一个表（包括内部临时表）时，在这个建表功能结束时出现。即使某些错误导致建表失败，也会使用这个状态。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Analyzing</span><br><span class="line">  当计算MyISAM表索引分布时。（比如进行ANALYZE <span class="keyword">TABLE</span>时）</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> checking permissions</span><br><span class="line">  这个线程检查服务器是否有具有执行该语句的所需权限。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Checking <span class="keyword">table</span></span><br><span class="line">  线程正在执行表检查操作。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> cleaning up</span><br><span class="line">  线程处理一个命令，并正准备释放内存和重置某些状态变量。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> closing tables</span><br><span class="line">  线程正在将变更的表中的数据刷新到磁盘上并正在关闭使用过的表。这应该是一个快速的操作。如果不是这样的话</span><br><span class="line">  则应该检查硬盘空间是否已满或者硬盘IO是否达到瓶颈。 </span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> converting HEAP <span class="keyword">to</span> MyISAM</span><br><span class="line">  线程将一个内部临时表转换为磁盘上的MyISAM表。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> <span class="keyword">copy</span> <span class="keyword">to</span> tmp <span class="keyword">table</span> </span><br><span class="line">  线程正在处理一个<span class="keyword">ALTER</span> <span class="keyword">TABLE</span>语句。这个状态发生在新的表结构已经创建之后，但是在数据被复制进入之前。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Copying <span class="keyword">to</span> <span class="keyword">group</span> <span class="keyword">table</span></span><br><span class="line">  如果一个语句有不同的<span class="keyword">ORDER</span> <span class="keyword">BY</span>和<span class="keyword">GROUP</span> <span class="keyword">BY</span>条件，数据会被复制到一个临时表中并且按组排序。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Copying <span class="keyword">to</span> tmp <span class="keyword">table</span></span><br><span class="line">  线程将数据写入内存中的临时表。  正在创建临时表以存放部分查询结果</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Copying <span class="keyword">to</span> tmp <span class="keyword">table</span> <span class="keyword">on</span> disk</span><br><span class="line">  线程正在将数据写入磁盘中的临时表。临时表的结果集过大。所以线程将临时表由基于内存模式改为基于磁盘模式，以节省内存。</span><br><span class="line">  但是这个过程会异常的缓慢！！</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Creating index</span><br><span class="line">  线程正在对一个MyISAM表执行<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ... ENABLE KEYS语句。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Creating sort index</span><br><span class="line">  线程正在使用内部临时表处理一个<span class="keyword">SELECT</span> 操作。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> creating <span class="keyword">table</span></span><br><span class="line">  线程正在创建一个表，包括创建临时表。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Creating tmp <span class="keyword">table</span></span><br><span class="line">  线程正在创建一个临时表在内存或者磁盘上。</span><br><span class="line">  如果这个表创建在内存上但是之后被转换到磁盘上，这个状态在运行Copying <span class="keyword">to</span> tmp <span class="keyword">table</span> <span class="keyword">on</span> disk 的时候保持。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> deleting <span class="keyword">from</span> main <span class="keyword">table</span></span><br><span class="line">  线程正在执行多表删除的第一部分，只从第一个表中删除。并且保存列和偏移量用来从其他（参考）表删除。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> deleting <span class="keyword">from</span> reference tables</span><br><span class="line">  线程正在执行多表删除的第二部分，并从其他表中删除匹配的行。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> discard_or_import_tablespace</span><br><span class="line">  线程正在执行<span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ... DISCARD TABLESPACE 或 <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ... IMPORT TABLESPACE语句。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> <span class="keyword">end</span></span><br><span class="line">  这个状态出现在结束时，但是在对<span class="keyword">ALTER</span> <span class="keyword">TABLE</span>, <span class="keyword">CREATE</span> <span class="keyword">VIEW</span>, <span class="keyword">DELETE</span>, <span class="keyword">INSERT</span>, <span class="keyword">SELECT</span>,   或者 UPDATE 语句进行清理之前。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> executing</span><br><span class="line">  该线程已开始执行一条语句。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Execution <span class="keyword">of</span> init_command</span><br><span class="line">  线程正在执行处于init_command系统变量的值中的语句。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> freeing items</span><br><span class="line"><span class="operator">*</span> 线程已经执行了命令。在这个状态中涉及的查询缓存可以得到一些释放。这个状态通常后面跟随cleaning up状态。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Flushing tables</span><br><span class="line">  线程正在执行FLUSH TABLES 并且等待所有线程关闭他们的表。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> FULLTEXT initialization</span><br><span class="line">  服务器正在准备进行自然语言全文检索。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> init</span><br><span class="line">  这个状态出现在线程初始化<span class="keyword">ALTER</span> <span class="keyword">TABLE</span>, <span class="keyword">DELETE</span>, <span class="keyword">INSERT</span>, <span class="keyword">SELECT</span>, 或 UPDATE语句之前。</span><br><span class="line">  服务器在这种状态下进行的操作，包括：刷新全日志、Innodb日志，和一些查询缓存清理操作。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Killed</span><br><span class="line">  程序对线程发送了KILL语句，并且它应该放弃下一次对KILL标记的检查。</span><br><span class="line">  这个标记在每一个MySQL的主要循环中被检查，但在某些情况下，它可能需要令线程在很短的时间内死亡。</span><br><span class="line">  如果这个线程被其他线程锁住了，这个KILL操作会在其他线程释放锁的瞬时执行。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> logging slow query</span><br><span class="line">  这个线程正在将语句写入慢查询日志。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> <span class="keyword">NULL</span></span><br><span class="line">  没有操作的状态。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> login</span><br><span class="line">  线程连接的初始状态。直到客户端已经成功验证。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> manage keys</span><br><span class="line">  服务器启用或禁用表索引。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Opening tables, Opening <span class="keyword">table</span></span><br><span class="line">  线程正试图打开一张表</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> optimizing</span><br><span class="line">  服务器执行查询的初步优化。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> preparing</span><br><span class="line"> 在查询优化过程中出现这个状态。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Purging <span class="keyword">old</span> relay logs</span><br><span class="line">  线程正在移除不必要的中继日志文件。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> query <span class="keyword">end</span></span><br><span class="line">  这个状态出现在处理一个查询之后，但是在freeing items状态之前。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Reading <span class="keyword">from</span> net</span><br><span class="line">  服务器正在从网络阅读数据包。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Removing duplicates</span><br><span class="line">  查询正在使用<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>，这种情况下MySQL不能在早期阶段优化掉一些<span class="keyword">distinct</span>操作。</span><br><span class="line">  因此，MySQL需要一个额外的阶段，在将结果发送到客户端之前删除所有重复的行。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> removing tmp <span class="keyword">table</span></span><br><span class="line">  线程正在移除一个内置临时表，在执行一条<span class="keyword">SELECT</span>语句之后。 如果没有临时表产生，那么这个状态不被使用。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> rename</span><br><span class="line"><span class="operator">*</span> 线程正在重命名一张表。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> rename <span class="keyword">result</span> <span class="keyword">table</span></span><br><span class="line">  线程正在处理<span class="keyword">ALTER</span> <span class="keyword">TABLE</span>语句，创建新的表，并且重命名它来代替原有的表。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Reopen tables</span><br><span class="line">  线程获得了表锁，但是在取得表锁之后才发现该表的底层结构已经发生了变化。线程释放这个锁，关闭表，并试图重新打开该表。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Repair <span class="keyword">by</span> sorting</span><br><span class="line">  修复代码正在使用一个分类来创建索引。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Repair done</span><br><span class="line">  线程完成一个多线程的MyISAM表的修复。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Repair <span class="keyword">with</span> keycache</span><br><span class="line">  修复代码正在通过索引缓存一个接一个地使用创建索引。这比通过分类修复要慢很多。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Rolling back</span><br><span class="line">  线程正在回滚一个事务</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Searching <span class="keyword">rows</span> <span class="keyword">for</span> update</span><br><span class="line">  线程正在进行第一阶段，在更新前寻找所有匹配的行。如果update正在更改用于查找相关行的索引，则必须这么做。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> setup</span><br><span class="line">  线程正开始进行一个<span class="keyword">ALTER</span> <span class="keyword">TABLE</span>操作。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Sorting <span class="keyword">for</span> <span class="keyword">group</span></span><br><span class="line">  线程正在执行一个由<span class="keyword">GROUP</span> <span class="keyword">BY</span>指定的排序。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Sorting <span class="keyword">for</span> <span class="keyword">order</span></span><br><span class="line">  线程正在执行一个由<span class="keyword">ORDER</span> <span class="keyword">BY</span>指定的排序。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Sorting index</span><br><span class="line">  线程正在对索引页进行排序，为了对MyISAM表进行操作时获得更优的性能。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Sorting <span class="keyword">result</span></span><br><span class="line"> 对于一个<span class="keyword">SELECT</span>语句，这与创建排序索引相似，但是是对非临时表。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> statistics</span><br><span class="line">  服务器计算统计去规划一个查询。如果一个线程长时间处于这个状态，这个服务器的磁盘可能在执行其他工作。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> <span class="keyword">System</span> lock</span><br><span class="line"> 这个线程正在请求或者等待一个内部的或外部的系统表锁。如果这个状态是由于外部锁的请求产生的，并且你没有使用多个正在访问相同的表的mysql服务器</span><br><span class="line"> </span><br><span class="line"><span class="operator">*</span> Waiting <span class="keyword">for</span> <span class="keyword">table</span> level lock</span><br><span class="line">  系统锁定后的下一个线程状态。线程已获得外部锁并且将请求内部表锁。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Updating</span><br><span class="line">  线程寻找更新匹配的行并进行更新。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> updating main <span class="keyword">table</span></span><br><span class="line">  线程正在执行多表更新的第一部分，只从第一个表中更新。并且保存列和偏移量用来从其他（参考）表更新。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> updating reference tables</span><br><span class="line">  线程正在执行多表更新的第二部分，并从其他表中更新匹配的行。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> <span class="keyword">User</span> lock</span><br><span class="line">  线程正在请求或等待一个GET_LOCK()调用所要求的咨询锁。对于<span class="keyword">SHOW</span> PROFILE，这个状态意味这线程正在请求锁。（而非等待）</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> <span class="keyword">User</span> sleep</span><br><span class="line">  线程调用了一个SLEEP()。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Waiting <span class="keyword">for</span> <span class="keyword">commit</span> lock</span><br><span class="line">  一个显式或隐式语句在提交时等待释放读锁</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Waiting <span class="keyword">for</span> <span class="keyword">global</span> read lock</span><br><span class="line">  等待全局读锁。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Waiting <span class="keyword">for</span> <span class="keyword">release</span> <span class="keyword">of</span> readlock</span><br><span class="line">  等待释放读锁。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Waiting <span class="keyword">for</span> tables, Waiting <span class="keyword">for</span> <span class="keyword">table</span>, Waiting <span class="keyword">for</span> <span class="keyword">table</span> flush</span><br><span class="line">  线程获得一个通知，底层表结构已经发生变化，它需要重新打开表来获取新的结构。然而，重新打开表，它必须等到所有其他线程关闭这个有问题的表。</span><br><span class="line">  这个通知产生通常因为另一个线程对问题表执行了FLUSH TABLES或者以下语句之一：</span><br><span class="line">  FLUSH TABLES tbl_name, <span class="keyword">ALTER</span> <span class="keyword">TABLE</span>, RENAME <span class="keyword">TABLE</span>, REPAIR <span class="keyword">TABLE</span>, ANALYZE <span class="keyword">TABLE</span>, <span class="keyword">or</span> OPTIMIZE TABLE.</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Waiting <span class="keyword">for</span> lock_type lock</span><br><span class="line">  等待各个种类的表锁。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Waiting <span class="keyword">on</span> cond</span><br><span class="line"> 一个普通的状态，线程正在等待一个条件为真。没有特定的状态信息可用。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> Writing <span class="keyword">to</span> net</span><br><span class="line">  服务器正在写一个网络数据包。</span><br></pre></td></tr></table></figure><h4 id="3-SQL执行过程中可能导致时间慢的原因"><a href="#3-SQL执行过程中可能导致时间慢的原因" class="headerlink" title="3. SQL执行过程中可能导致时间慢的原因"></a>3. SQL执行过程中可能导致时间慢的原因</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Sending data (最重要的一个过程★★★★★)</span><br><span class="line">  线程正在读取和处理一条<span class="keyword">SELECT</span>语句的行，并且将数据发送至客户端。由于在此期间会执行大量</span><br><span class="line">  的磁盘访问（读操作），这个状态在一个指定查询的生命周期中经常是耗时最长的。</span><br><span class="line">  </span><br><span class="line">  对于一个普通查询来说，这个参数过大可分为两种情况</span><br><span class="line">  <span class="number">1.</span> 第一种是<span class="keyword">SQL</span>本身，比如没有建立正确的索引，索引失效等等情况，这种数据体现在CPU_user 和CPU_sysyem字段 时间过长；</span><br><span class="line">  <span class="number">2.</span> 第二种是相应数据量过大，导致CPU调度时上下文频繁切换。这种数据体现在CONTEXT_INVOLUNTARY和CONTEXT_VOLUNTARY字段 时间过长;</span><br><span class="line">     像：外网使用Navicat连接到远程数据库中。查询一个普通的<span class="keyword">SQL</span>，在本地MySQL执行速度很快，但是使用远程服务器的MySQL就异常的缓慢。</span><br><span class="line">  这时若查询profile详情，就会发现大量相应数据传输IO导致频繁的上下文切换消耗了大量的时间。</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span> converting HEAP <span class="keyword">to</span> MyISAM</span><br><span class="line">   原译指的是：线程将一个内部临时表转换为磁盘上的MyISAM表。</span><br><span class="line">   我们实际操作中可能出现的问题就是查询结果太大了导致内存不够，往磁盘上搬。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>Creating tmp <span class="keyword">table</span></span><br><span class="line">  创建了临时表</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>Coping <span class="keyword">to</span> tmp <span class="keyword">table</span> <span class="keyword">on</span> disk</span><br><span class="line">  把内存中临时表复制到磁盘</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>locked</span><br><span class="line">  加锁</span><br><span class="line"></span><br><span class="line"><span class="comment">------------------------------------------------ </span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>，<span class="number">4</span> 可以修改一下tmp_table_size和max_heap_table_size两个参数来调整</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h6 id="show-profile语句已经弃用，并将在以后版本中移除，建议使用-Performance-Schema-Performance-Schema文档"><a href="#show-profile语句已经弃用，并将在以后版本中移除，建议使用-Performance-Schema-Performance-Schema文档" class="headerlink" title="show profile语句已经弃用，并将在以后版本中移除，建议使用 Performance Schema Performance Schema文档"></a>show profile语句已经弃用，并将在以后版本中移除，建议使用 Performance Schema <a href="https://dev.mysql.com/doc/refman/5.7/en/performance-schema-query-profiling.html">Performance Schema文档</a></h6></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> SQL优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Query Profiler查看MySQL语句运行时间</title>
      <link href="2021/03/20/%E9%80%9A%E8%BF%87Query-Profiler%E6%9F%A5%E7%9C%8BMySQL%E8%AF%AD%E5%8F%A5%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/"/>
      <url>2021/03/20/%E9%80%9A%E8%BF%87Query-Profiler%E6%9F%A5%E7%9C%8BMySQL%E8%AF%AD%E5%8F%A5%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote><p><strong>Query Profiler是MYSQL自带的一种query诊断分析工具</strong>，通过它可以分析出一条SQL语句的性能瓶颈在什么地方。通常我们是使用的explain,以及slow query log都无法做到精确分析，</p></blockquote><p> <strong>但是Query Profiler却可以定位出一条SQL语句执行的各种资源消耗情况，比如CPU，IO等，以及该SQL执行所耗费的时间等。</strong></p><p>Show profiles是5.0.37之后添加的，要想使用此功能，要确保版本在5.0.37之后。</p><hr><h5 id="登录MySQL查看数据库版本方法"><a href="#登录MySQL查看数据库版本方法" class="headerlink" title="登录MySQL查看数据库版本方法"></a>登录MySQL查看数据库版本方法</h5><p>登录：<code>mysql -u username -p</code><br>使用想选择的数据库：<code> use databses</code><br>查看版本：<code>show variables like &quot;%version%&quot;;  或者  select version();</code> </p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210606105113.png" alt="在这里插入图片描述"></p><h5 id="查看profile是否开启，数据库默认是不开启的"><a href="#查看profile是否开启，数据库默认是不开启的" class="headerlink" title="查看profile是否开启，数据库默认是不开启的"></a>查看profile是否开启，数据库默认是不开启的</h5><blockquote><p>查看方法： <code>show variables like &quot;%pro%&quot;; </code><br>设置开启方法： <code>set profiling = 1;</code></p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210606105154.png" alt="在这里插入图片描述"></p><p> 可以开始执行一些想要分析的sql语句了</p><h5 id="执行完后-，查询SQL的执行时间："><a href="#执行完后-，查询SQL的执行时间：" class="headerlink" title="执行完后 ，查询SQL的执行时间："></a>执行完后 ，查询SQL的执行时间：</h5><p> <code> show profiles；</code></p><p>即可查看所有sql的总的执行时间。<br><strong>Query_ID：SQL编号ID；</strong><br><strong>Duration：SQL执行时间；</strong><br><strong>Query：SQL语句。</strong><br><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210606105230.png" alt="在这里插入图片描述"></p><p><strong><code> show profile for query 1</code> 即可查看第1个sql语句的执行的各个操作的耗时详情。</strong><br><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210606105234.png" alt="在这里插入图片描述"></p><p><strong>查看出一条SQL语句执行的各种资源消耗情况，比如CPU，IO等:</strong><br><code> show profile cpu, block io, memory,swaps,context switches,source for query 1</code><br><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210606105236.png" alt="在这里插入图片描述"></p><blockquote><h5 id="关于show-profile-all-返回行和列的详解请见下篇文章：MySQL中show-profile详解"><a href="#关于show-profile-all-返回行和列的详解请见下篇文章：MySQL中show-profile详解" class="headerlink" title="关于show profile all 返回行和列的详解请见下篇文章：MySQL中show profile详解"></a>关于show profile all 返回行和列的详解请见下篇文章：<a href="https://blog.csdn.net/qq_44161695/article/details/115204821">MySQL中show profile详解</a></h5><p><strong>测试完毕后，关闭参数：<code>set profiling=0</code></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> SQL优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitee+PicGo+Typora实现高速图床</title>
      <link href="2021/03/15/Gitee-PicGo-Typora%E5%AE%9E%E7%8E%B0%E9%AB%98%E9%80%9F%E5%9B%BE%E5%BA%8A/"/>
      <url>2021/03/15/Gitee-PicGo-Typora%E5%AE%9E%E7%8E%B0%E9%AB%98%E9%80%9F%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>之前使用GitHub搭建床图，我们都知道GitHub在国内速度感人，图片经常刷不出来，而且上传巨慢，今天我们用国内Gitee搭建床图，实现秒级上传，而且配和Typora笔记集成实现自动上传</strong></p></blockquote><h3 id="Gitee创建图床仓库"><a href="#Gitee创建图床仓库" class="headerlink" title="Gitee创建图床仓库"></a>Gitee创建图床仓库</h3><h4 id="注册登录码云账户，并创建一个仓库"><a href="#注册登录码云账户，并创建一个仓库" class="headerlink" title="注册登录码云账户，并创建一个仓库"></a>注册登录码云账户，并创建一个仓库</h4><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605100622.png" alt="image-20210605100622875" style="zoom:67%;" /><blockquote><p><strong>注意这里一定要选择开源，否则最后生成的图片地址访问不到！</strong></p></blockquote><h4 id="获取仓库的私人令牌token"><a href="#获取仓库的私人令牌token" class="headerlink" title="获取仓库的私人令牌token"></a>获取仓库的私人令牌token</h4><p>这个token需要配置在PicGo中，用于自动上传使用，很重要</p><ol><li>进入Gitee首页点击头像，进入设置，在安全设置中找到私人令牌</li></ol><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605101826.png" alt="image-20210605101826038" style="zoom:67%;" /><ol start="2"><li><p>生成新的令牌：</p><p>这里全选就可以，提交之后就生成一个token，这个要<strong>保存好</strong>，因为这个token只有在<strong>第一次生成的时候才会显示</strong>，关闭页面之后就无法显示。以后忘记了只能重新生成</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605102005.png" alt="image-20210605102005400" style="zoom:67%;" /></li></ol><h3 id="安装配置PicGo"><a href="#安装配置PicGo" class="headerlink" title="安装配置PicGo"></a>安装配置PicGo</h3><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>picGo依赖于node.js，所以我们要先安装node.js</p><blockquote><p>下载地址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p>node.js安装很简单，在这里就不演示，基本直接下一步就OK，node.js会自动配置环境变量</p><p>安装好在cmd中输入：node -v 出现版本号就说明安装成功了。安装之后最好是重启一下。</p><p><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">node.js安装教程</a></p></blockquote><h4 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a>下载PicGo</h4><p><a href="https://github.com/Molunerfinn/picgo/releases">官网下载地址</a></p><blockquote><p>git下载很慢</p><p>百度云下载：链接：<a href="https://pan.baidu.com/s/1yYaw01mIUIIgyhQ324Q-xQ">https://pan.baidu.com/s/1yYaw01mIUIIgyhQ324Q-xQ</a>   提取码：8888 </p></blockquote><p>安装成功页面如下：</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605095818.png" alt="image-20210605095818661" style="zoom:67%;" /><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在插件设置中搜索gitee，找到gitee-upload并安装</p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605100011.png" alt="image-20210605100011315" style="zoom:67%;" /><h4 id="配置Gitee"><a href="#配置Gitee" class="headerlink" title="配置Gitee"></a>配置Gitee</h4><p>在首页 —&gt;图床设置中找到gitee</p><ul><li><p><strong>repo</strong>：用户名/仓库名称,也就是仓库的URL，比如我自己的仓库zhao_shu_chao/img</p></li><li><p><strong>branch</strong>：分支，这里写上master</p></li><li><p><strong>token</strong>：这里填入刚刚我们申请的码云的私人令牌，也就是那个token </p></li><li><p><strong>path</strong>：路径，我这里写的是blog</p></li><li><p>customPath：提交消息，这一项和下一项customURL都不用填。在提交到码云后，会显示提交消息，插件默认提交的是 Upload 图片名 by picGo - 时间</p></li></ul><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605101006.png" alt="image-20210605101006159" style="zoom: 80%;" /><h4 id="生成的格式"><a href="#生成的格式" class="headerlink" title="生成的格式"></a>生成的格式</h4><blockquote><p>配置到这里基本就可以使用了。剩下的就是一些额外说明</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605102603.png" alt="image-20210605102603897"></p><p>在这里我们可以测试上传一张图片试试效果，上传之后再相册中查看照片路径</p><p>这个支持五种返回的链接的格式，前三种都是我们常用的</p><p>格式实例：</p><ol><li><p>生成时链接格式选择<strong>markdown:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210522184639.jpeg)</span><br></pre></td></tr></table></figure></li><li><p>生成时链接选择<strong>URL：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210522184639.jpeg</span><br></pre></td></tr></table></figure></li><li><p>生成时链接选择<strong>HTML：</strong></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210522184639.jpeg&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="时间戳自动命名"><a href="#时间戳自动命名" class="headerlink" title="时间戳自动命名"></a>时间戳自动命名</h4><p>在PicGo设置中打开时间戳命名即可</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605103418.png" alt="image-20210605103418290"></p><h5 id="配置完毕"><a href="#配置完毕" class="headerlink" title="配置完毕"></a>配置完毕</h5><h3 id="集成Typora"><a href="#集成Typora" class="headerlink" title="集成Typora"></a>集成Typora</h3><p>到这里我们配置完毕了。很多人都使用Tppora在本地写博客文章，下面就演示一下Typora集成刚刚我们配置的床图，实现截图放在Typora或者上传本地图片自动上传到我们的床图</p><blockquote><p>Typora下载地址：<a href="https://typora.io/">https://typora.io/</a></p></blockquote><p>进入Typora的偏好设置，选择图像。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605104013.png" alt="image-20210605104013090"></p><p>在这里页面我们需要配置的是</p><ol><li>插入图片时选择：<strong>上传图片</strong></li><li>对<strong>本地和网络</strong>图片进行勾选，这里千万不要对第五个勾选，也就是转义URL，会导致图片乱码不可读。</li><li>上传服务选择<strong>PicGo(app)</strong>,选项里面还有一个pic(core)，不要选错了。</li><li>配置好picGo的<strong>安装路径</strong>即可</li></ol><p>到这里就完毕配置完毕，我们可以测试一下。我们随便截图一张图片，直接复制到笔记中，我们可以看到这个图片的地址变成了我们配置的图床网络地址了。这就说明Typora配置已经生效，自动帮助我们上传到了Gitee啦。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605104544.png" alt="image-20210605104544785"></p><p>我们回到gitee仓库中，就可以看到我们的提交记录：</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605104909.png" alt="image-20210605104909569"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用Volantis主题</title>
      <link href="2021/03/03/Hexo%E4%BD%BF%E7%94%A8Volantis%E4%B8%BB%E9%A2%98/"/>
      <url>2021/03/03/Hexo%E4%BD%BF%E7%94%A8Volantis%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><p>这里采用的是<code>Volantis5</code>主题和 <code>Hexo 5.0.2</code>，不用复制什么主题到theme文件夹下，直接使用npm安装即可</p><ol><li><p>在 <code>blog/_config.yml</code> 文件中找到并修改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">volantis</span></span><br></pre></td></tr></table></figure></li><li><p>下载主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">npm i hexo-theme-volantis</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 Hexo 搜索的依赖包</span></span><br><span class="line">npm i hexo-generator-search hexo-generator-json-content</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 Stylus 渲染器：</span></span><br><span class="line">npm i hexo-renderer-stylus</span><br></pre></td></tr></table></figure></li></ol><p>执行到这里主题就更换成功了。重新部署一下即可</p><h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><blockquote><p>新版的配置文件不在theme目录中，而是在根目录的<code>node_modules\hexo-theme-volantis</code>文件夹下的_config.yml文件中</p><p>把这个文件复制到自己的根目录下，重命名为 <code>_config.volantis.yml</code> 即可，这个文件中的配置信息优先级高于主题文件夹中的配置文件。以后再这里配置即可</p></blockquote><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210606110636.png" alt="image-20210606101344545"></p><blockquote><p> 具体每一项配置参考官方文档，很详细:<a href="https://volantis.js.org/v4/site-settings/">官方配置文档</a></p></blockquote><h4 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h4><p>发布文章之前，我们要把分类以及标签页面创建出来，默认是不创建的,创建好之后会生成一个新的在source目录下生成新的对应的文件夹，里面是一个md文档</p><ol><li><p>创建分类：<code>hexo new page &quot;categories&quot;</code></p><p>修改文件夹中的md内容为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: category</span><br><span class="line">index: true</span><br><span class="line">title: 所有分类</span><br></pre></td></tr></table></figure></li><li><p>创建标签：<code>hexo new page &quot;tags&quot;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: tag</span><br><span class="line">index: true</span><br><span class="line">title: 所有标签</span><br></pre></td></tr></table></figure></li><li><p>创建关于我：<code>hexo new page &quot;about&quot;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">layout: docs</span><br><span class="line">seo<span class="emphasis">_title: 关于</span></span><br><span class="line"><span class="emphasis">bottom_</span>meta: false</span><br><span class="line">sidebar: []</span><br><span class="line">valine:</span><br><span class="line">  placeholder: 有什么想对我说的呢？</span><br></pre></td></tr></table></figure></li><li><p>创建友链：<code>hexo new page &quot;friends&quot;</code></p></li></ol><h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><p>直接在在根目录中执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new  &#x27;xxxxx&#x27;</span><br></pre></td></tr></table></figure><p>要删除文章直接在目录中找到对应的md文档删除即可，但是里面最少要有一个，如果删除的是最后一个，会出现异常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">本地运行</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署到git或者自己的域名</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo搭建个人博客，绑定GitHub以及个人域名</title>
      <link href="2021/03/01/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8C%E7%BB%91%E5%AE%9AGitHub%E4%BB%A5%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/"/>
      <url>2021/03/01/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8C%E7%BB%91%E5%AE%9AGitHub%E4%BB%A5%E5%8F%8A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>关于Hexo博客搭建由于网上的教程很多都是旧版本，有时候跟新版不一致装错还得删除再来一遍很让人很难受</p><p>文章会基于win10系统开始搭建一个属于自己的博客。从本地启动，到部署到github,然后在到自己的域名</p><p>本次搭建使用到的软件以及工具：Git，node.js，GitHub，Hexo</p></blockquote><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>点击<a href="https://git-scm.com/download/win">Git官网</a>下载对应的版本<img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605190139.png" alt="image-20210605190139058" style="zoom:67%;" /></p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605190723.png" alt="image-20210605190723037"></p><p>上图红框内的选项是默认勾选的，建议不要动。绿色框1是决定是否在桌面创建快捷方式的。绿色框2是决定在所有控制台窗口中使用TrueType字体和是否每天检查Git是否有Windows更新的。这些根据自己需要选择。</p><p>接下来一路next就可以了</p><p>安装完成之后我们在cmd控制台运行<code>git</code>，显示一大坨东西就OK了</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605190928.png" alt="image-20210605190928033"></p><h4 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h4><blockquote><p>下载地址：<a href="https://nodejs.org/zh-cn/">node.js下载地址</a></p><p>(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</p><p>node.js安装很简单，在这里就不演示，基本直接下一步就OK，node.js会自动配置环境变量</p><p>安装好在cmd中输入：<code>node -v</code>和<code>npm -v</code>出现版本号就说明安装成功了。安装之后最好是重启一下。</p><p><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">node.js安装教程</a></p></blockquote><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><blockquote><p>官方文档：<a href="https://hexo.io/zh-cn/docs/">hexo</a></p></blockquote><h5 id="创建一个根目录"><a href="#创建一个根目录" class="headerlink" title="创建一个根目录"></a>创建一个根目录</h5><p>前面git和nodejs安装好后，就可以安装hexo博客框架了。</p><p>首先创建一个文件夹,我的名字是Blog，这个文件夹在后续就是用来存放你所创建博客的所有文件。这个文件也称根目录。因为我已经安装过了，所以里面是有内容的</p><h5 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h5><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605191901.png" alt="image-20210605191901290" style="zoom:67%;" /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 在git base执行</span><br><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure><p>等待安装完毕即可</p><h5 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br><span class="line"><span class="meta">#</span><span class="bash">输入显示版本号即可</span></span><br></pre></td></tr></table></figure><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605192416.png" alt="image-20210605192416537"></p><h5 id="初始化网址"><a href="#初始化网址" class="headerlink" title="初始化网址"></a>初始化网址</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>这一步稍微需要等待一下</p><p>出现 Start blogging with Hexo 代表初始化成功</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605192709.png" alt="img"></p><h5 id="安装网址依赖"><a href="#安装网址依赖" class="headerlink" title="安装网址依赖"></a>安装网址依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>然后Blog根目录就会出现一些文件夹，如安装Hexo展示都图片所示</p><p>因为我配置过主题，所以目录多了一些文件</p><blockquote><p>node_modules: 依赖包<br>public：存放生成的页面<br>source：用来存放你的文章<br>themes：主题<br>_config.yml: 博客的配置文件</p></blockquote><h5 id="开启本地服务"><a href="#开启本地服务" class="headerlink" title="开启本地服务"></a>开启本地服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g//生成静态网址</span><br><span class="line">hexo s//开启本地服务器</span><br></pre></td></tr></table></figure><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605193419.png" alt="image-20210605193419353"></p><p>运行结果提示running就OK了</p><p>在浏览器输入网址<a href="https://link.zhihu.com/?target=http://localhost:4000/">http://localhost:4000</a>就可以查看你的本地博客网页了</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605193456.jpeg" alt="img"></p><h4 id="托管到Git"><a href="#托管到Git" class="headerlink" title="托管到Git"></a>托管到Git</h4><blockquote><p>让我们的博客想让别人访问到在本地运行肯定是不行的</p><p>这里我们先选择托管到github上，github提供一个git pages功能，代码提交上去会给我们自动生成一个网络地址，供我们使用</p><p>git pages功能码云也有，但是很不巧的是，这段时间码云的gitpages在维护，并且长达3个月</p></blockquote><p>首先登陆到我们github，点击 New repository</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605194258.png" alt="image-20210605194258824"></p><blockquote><p><strong>这里要注意的是仓库名称一定要是自己的用户名+ <code>.github.io</code>别的名字是无效的！！！</strong></p><p>仓库选择public即可</p><p>这里我已经有这个仓库了，所以提醒我exists on this account</p></blockquote><h5 id="配置git的SSH"><a href="#配置git的SSH" class="headerlink" title="配置git的SSH"></a>配置git的SSH</h5><p>如果不配置ssh key 每次部署都需要输入github 账号密码，太麻烦</p><p>回到根目录下的git bash窗口中，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;//yourname填写你的github用户名</span><br><span class="line">git config --global user.email &quot;youremail&quot;//youremail填写你的github的邮箱</span><br></pre></td></tr></table></figure><p>查询刚刚执行的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p><strong>最关键的一步，生成秘钥</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;  //youremail填写你的github的邮箱</span><br></pre></td></tr></table></figure><p>执行了这个命令会提示存储路径和密码以及确认密码，你连续按三次Enter就好</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605194832.png" alt="img"></p><p>照着上面的存储路径打开id_rsa.pub，将里面所有的内容全部复制出来。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605194941.png" alt="image-20210605194941031"></p><blockquote><p>id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p></blockquote><h5 id="在github上配置秘钥"><a href="#在github上配置秘钥" class="headerlink" title="在github上配置秘钥"></a>在github上配置秘钥</h5><p>github点击头像，setting -&gt; SSH and GPG keys，新建SSH key。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605195428.png" alt="image-20210605195427989"></p><p>这里的title随便填写。key填写我们刚刚复制的id_rsa.pub内容。点击 add ssh key就OK了</p><p><strong>测试我们的秘钥配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>按照提示输入yes,看到successfully我们就知道配置成功了</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605195713.png" alt="image-20210605195713404"></p><h4 id="托管到GitHub"><a href="#托管到GitHub" class="headerlink" title="托管到GitHub"></a>托管到GitHub</h4><h5 id="配置仓库地址"><a href="#配置仓库地址" class="headerlink" title="配置仓库地址"></a>配置仓库地址</h5><p>这一步是将hexo和Github关联起来，在你的博客根目录下找到 _config.yml,最下面的deploy中配置你的repo</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605195909.png" alt="image-20210605195909102"></p><blockquote><p>这里一个大坑，很多文章都写的分支branch为master，这里GitHub很早就更新默认分支为main了。这里写了master还有在github上面配置默认分支，所以这里直接填写main接口</p><p>还有一个需要注意：hexo以及主题的配置的yml格式的。不熟悉yml配置的时候注意缩进和：后面跟个空格</p></blockquote><p>这里配置repo我们选择ssh链接即可，不要复制错了</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605200244.png" alt="image-20210605200244402"></p><h5 id="hexo安装部署的命令"><a href="#hexo安装部署的命令" class="headerlink" title="hexo安装部署的命令"></a>hexo安装部署的命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">部署命令 注意g和d都是缩写，</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以用一个命令拼接起来</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>打开浏览器，输入xxxx.github.io，这里将请按照 你的github用户名.github.io 输入，就可以访问你的博客</p><h4 id="部署到自己的域名"><a href="#部署到自己的域名" class="headerlink" title="部署到自己的域名"></a>部署到自己的域名</h4><blockquote><p>我们部署到github上就可以访问了，部署到自己的域名是可以选择的。但是总感觉每次访问的时候是自己的域名有一种高级感，哈哈哈。当然部署起来也很简单，其实也不算真正的部署，也是一个GitHub提供的映射服务</p></blockquote><h5 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h5><p>域名购买我是在阿里云上购买的。教程就不展示了，直接登陆阿里云搜索域名即可购买（购买的时候要实名认证，很快提交之后基本一个小时就认证成功）</p><h5 id="Github绑定域名"><a href="#Github绑定域名" class="headerlink" title="Github绑定域名"></a>Github绑定域名</h5><p>进入阿里云控制台找到域名管理，进入解析</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605201911.png" alt="image-20210605201911062"></p><p><strong>进入页面点击添加记录即可；要添加两个记录值，记录类型分别为A和CNAME，填写如下。</strong></p><p><strong>第一个</strong></p><ul><li>记录类型为A</li><li>主机记录为：@</li><li>记录值为自己git.io那个ip地址。IP地址在cmd中ping一下即可; 一般都是这个:185.199.110.153</li></ul><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605202126.png" alt="img"></p><p><strong>第二个</strong></p><ul><li>记录类型为CNAME</li><li>主机记录为www</li><li>记录值为自己的github访问地址。我这里填写 zsc-cloud.github.io</li></ul><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605202005.png" alt="image-20210605202005092"></p><p><strong>到这里阿里云上的配置就结束了</strong></p><h5 id="Hexo配置域名"><a href="#Hexo配置域名" class="headerlink" title="Hexo配置域名"></a>Hexo配置域名</h5><p>在自己博客的跟目录source文件夹下创建一个名字CNAME记事本</p><p>内容输入自己的个人域名，保存关闭。删除后缀.txt</p><h5 id="仓库绑定域名"><a href="#仓库绑定域名" class="headerlink" title="仓库绑定域名"></a>仓库绑定域名</h5><p>在GitHub中找到自己的博客仓库，点击setting，拉到最下面找到GitHub Pages点进去</p><p>在Custom domain输入自己的域名save一下即可，效果如下就说明配置成功了</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605203239.png" alt="image-20210605203239741"></p><h5 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h5><p>如果GitHub上可以开启Https直接开启即可，如果不能的话可以在阿里云申请一个免费的SSL证书</p><p>在这里就不展开说明了，按照提示操作即可。</p><p><img src="https://zsc-cloud-1305849843.cos.ap-beijing.myqcloud.com/img/20210605203536.png" alt="image-20210605203536148"></p><h4 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h4><p>绑定自己的域名耐心等待几分钟访问自己的域名即可！</p><blockquote><p><strong>下一篇我们讲解主题更换以及发布文章！</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
